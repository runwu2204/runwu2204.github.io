<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>runwu2204</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-21T13:38:09.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>runwu2204</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang</title>
    <link href="http://example.com/2023/10/21/Re/x86/golang/"/>
    <id>http://example.com/2023/10/21/Re/x86/golang/</id>
    <published>2023-10-21T13:36:53.000Z</published>
    <updated>2023-10-21T13:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂存</p><p>rax用于存放对应对象，或者对象传递位置 rbx及其它寄存器用于传递参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;暂存&lt;/p&gt;
&lt;p&gt;rax用于存放对应对象，或者对象传递位置 rbx及其它寄存器用于传递参数&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>WSA</title>
    <link href="http://example.com/2023/10/17/Re/%E5%AE%89%E5%8D%93/WSA/"/>
    <id>http://example.com/2023/10/17/Re/%E5%AE%89%E5%8D%93/WSA/</id>
    <published>2023-10-17T13:33:06.000Z</published>
    <updated>2023-10-17T15:43:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://a-jiua.github.io/blog/2023/07/22/WSAOnWin10_-_%E5%9C%A8_Windows10_%E4%B8%8A%E4%BD%BF%E7%94%A8WSA/" >WSAOnWin10 - 在 Windows10 上使用WSA | 行雺のBlog | Hexo (a-jiua.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>具体环境配置，因为wsa api版本过新所以magisk的大部分包都用不了，但magisk自带一个busybox，路径为<code>/data/adb/magisk</code>将其加入代码搜索路径内<code>export PATH=$PATH:/data/adb/magisk</code></p><p>同时因为wsa的<code>ro.debuggable</code>参数被设置为了0所以有些代码调试的时候会跑飞用<code>magisk resetprop ro.debuggable 1</code>命令修改掉默认值(每次重启都会失效)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://a-jiua.github.io/blog/2023/07/22/WSAOnWin10_-_%E5%9C%A8_Windows10_%E4%B8%8A%E4%BD%BF%E7%94%A8WSA/&quot; &gt;WSAOn</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CRT中国剩余定理</title>
    <link href="http://example.com/2023/10/05/Crypto/CRT%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <id>http://example.com/2023/10/05/Crypto/CRT%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</id>
    <published>2023-10-05T05:17:41.000Z</published>
    <updated>2023-10-05T05:17:41.000Z</updated>
    
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>密钥交换协定</title>
    <link href="http://example.com/2023/10/04/Crypto/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E5%AE%9A/"/>
    <id>http://example.com/2023/10/04/Crypto/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E5%AE%9A/</id>
    <published>2023-10-04T11:56:26.000Z</published>
    <updated>2023-10-04T11:56:26.000Z</updated>
    
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>dll注入</title>
    <link href="http://example.com/2023/10/02/Re/x86/dll%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2023/10/02/Re/x86/dll%E6%B3%A8%E5%85%A5/</id>
    <published>2023-10-02T08:45:24.000Z</published>
    <updated>2023-10-02T08:45:24.000Z</updated>
    
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>ida界面设置</title>
    <link href="http://example.com/2023/10/02/Re/x86/ida%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2023/10/02/Re/x86/ida%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE/</id>
    <published>2023-10-02T07:53:45.000Z</published>
    <updated>2023-10-02T08:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加窗口"><a href="#添加窗口" class="headerlink" title="添加窗口"></a>添加窗口</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202310021559856.png"                      alt="image-20231002155911771"                ></p><h2 id="移动窗口"><a href="#移动窗口" class="headerlink" title="移动窗口"></a>移动窗口</h2><h3 id="选中窗口将鼠标移动到灰线处-箭头所指的地方"><a href="#选中窗口将鼠标移动到灰线处-箭头所指的地方" class="headerlink" title="选中窗口将鼠标移动到灰线处(箭头所指的地方)"></a>选中窗口将鼠标移动到灰线处(箭头所指的地方)</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202310021601936.png"                      alt="image-20231002160132898"                ></p><p>长按将其拖动到一类位置(带有标记的地方),不同位置对应的不同效果可以自己试一试</p><h3 id=""><a href="#" class="headerlink" title=""></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202310021603990.png"                      alt="image-20231002160330840"                ></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;添加窗口&quot;&gt;&lt;a href=&quot;#添加窗口&quot; class=&quot;headerlink&quot; title=&quot;添加窗口&quot;&gt;&lt;/a&gt;添加窗口&lt;/h2&gt;&lt;p&gt;&lt;img  
                     lazyload
                     src=</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>randcrack</title>
    <link href="http://example.com/2023/09/21/Crypto/randcrack/"/>
    <id>http://example.com/2023/09/21/Crypto/randcrack/</id>
    <published>2023-09-21T14:50:11.000Z</published>
    <updated>2023-10-02T08:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用随机数漏洞预测随机数</p><p>参考[<a class="link"   href="https://blog.csdn.net/qq_42557115/article/details/128228201" >CTF&#x2F;randcrack]python随机数预测模块分析及改进方案_ctf 随机数_虚空guoql的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;利用随机数漏洞预测随机数&lt;/p&gt;
&lt;p&gt;参考[&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/qq_42557115/article/details/128228201&quot; &gt;CTF&amp;#x2F;randcrack]python随机数</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>bkcrack</title>
    <link href="http://example.com/2023/09/18/Misc/bkcrack/"/>
    <id>http://example.com/2023/09/18/Misc/bkcrack/</id>
    <published>2023-09-18T13:30:24.000Z</published>
    <updated>2023-10-02T08:21:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过利用压缩包内的一部分字节破解加密的压缩包</p><p><a class="link"   href="https://blog.csdn.net/q851579181q/article/details/109767425" >ZIP已知明文攻击深入利用_明文攻击密码软件-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过利用压缩包内的一部分字节破解加密的压缩包&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/q851579181q/article/details/109767425&quot; &gt;ZIP已知明文攻击深入利用_明文攻击密码软</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Coppersmith</title>
    <link href="http://example.com/2023/09/17/Crypto/sage/Coppersmith/"/>
    <id>http://example.com/2023/09/17/Crypto/sage/Coppersmith/</id>
    <published>2023-09-16T16:50:52.000Z</published>
    <updated>2023-09-16T16:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>例子</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p = getPrime(512)</span></span><br><span class="line"><span class="comment"># q = getPrime(512)</span></span><br><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># leak = p &gt;&gt; 230</span></span><br><span class="line"><span class="comment"># m = bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># c = pow(m,e,n)</span></span><br><span class="line"><span class="comment"># print(n)</span></span><br><span class="line"><span class="comment"># print(leak)</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"> </span><br><span class="line">n = <span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line">leak = <span class="number">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line">c = <span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(Zmod(n),<span class="string">&#x27;x&#x27;</span>)<span class="comment">#此处创建了一个变量为x的环(用于求解方程的范围)</span></span><br><span class="line">x = PR.gen()<span class="comment">#将环内变量赋值给x</span></span><br><span class="line"></span><br><span class="line">f = (leak&lt;&lt;<span class="number">230</span>) +x</span><br><span class="line">v = f.monic().small_roots(X=<span class="number">2</span>**<span class="number">230</span>, beta=<span class="number">0.4</span>, epsilon=<span class="number">0.02</span>)<span class="comment">#epsilon为精度 一般越高越好 不设置可能会出错 X为求解范围一般越接近你需要求的p缺失的位数越好 此处用**用^会出现异或与指数混淆</span></span><br><span class="line">p = <span class="built_in">int</span>(f(v[<span class="number">0</span>]))</span><br><span class="line">m = <span class="built_in">pow</span>(c, inverse_mod(<span class="number">65537</span>, (p-<span class="number">1</span>)),p)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Python&quot;&gt;&lt;figure class=&quot;iseeu highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    <category term="sage" scheme="http://example.com/categories/Crypto/sage/"/>
    
    
  </entry>
  
  <entry>
    <title>idc</title>
    <link href="http://example.com/2023/09/07/Re/x86/idc/"/>
    <id>http://example.com/2023/09/07/Re/x86/idc/</id>
    <published>2023-09-06T16:28:14.000Z</published>
    <updated>2023-09-30T14:11:39.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PatchByte()<span class="comment">//一般都未类型名 可以为Byte(1字节) Word(2字节) Dword(4字节) Qword(8字节)</span></span><br><span class="line">Byte()<span class="comment">//一般都未类型名 可以为Byte(1字节) Word(2字节) Dword(4字节) Qword(8字节)</span></span><br><span class="line"></span><br><span class="line">Message<span class="comment">//用于打印到终端</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;C&quot;&gt;&lt;figure class=&quot;iseeu highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>idapython</title>
    <link href="http://example.com/2023/09/07/Re/python/idapython/"/>
    <id>http://example.com/2023/09/07/Re/python/idapython/</id>
    <published>2023-09-06T16:27:51.000Z</published>
    <updated>2023-09-14T07:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人感觉7.0版本的语法比较方便</p><p>具体修改方式</p><p>ida目录&#x2F;cfg&#x2F;idapython.cfg</p><p>将这一项AUTOIMPORT_COMPAT_IDA695 &#x3D; NO 修改为AUTOIMPORT_COMPAT_IDA695 &#x3D; YES</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;个人感觉7.0版本的语法比较方便&lt;/p&gt;
&lt;p&gt;具体修改方式&lt;/p&gt;
&lt;p&gt;ida目录&amp;#x2F;cfg&amp;#x2F;idapython.cfg&lt;/p&gt;
&lt;p&gt;将这一项AUTOIMPORT_COMPAT_IDA695 &amp;#x3D; NO 修改为AUTOIMPORT_COMPA</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="python" scheme="http://example.com/categories/Re/python/"/>
    
    
  </entry>
  
  <entry>
    <title>正则</title>
    <link href="http://example.com/2023/09/06/Misc/%E6%AD%A3%E5%88%99/"/>
    <id>http://example.com/2023/09/06/Misc/%E6%AD%A3%E5%88%99/</id>
    <published>2023-09-05T16:20:12.000Z</published>
    <updated>2023-09-05T16:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&quot;(?&lt;=前面的项目).*?(?=后面的项目)&quot;</span> <span class="comment">#匹配中间项</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Python&quot;&gt;&lt;figure class=&quot;iseeu highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>python命令执行</title>
    <link href="http://example.com/2023/08/30/python/python%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2023/08/30/python/python%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2023-08-30T14:20:04.000Z</published>
    <updated>2023-08-30T14:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>subprocess</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(command, shell=<span class="literal">True</span>, check=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">command 命令</span></span><br><span class="line"><span class="string">shell 是否通过系统shell执行</span></span><br><span class="line"><span class="string">check 是否检查异常退出 如果为true则会在遇到异常退出的时候抛出异常</span></span><br><span class="line"><span class="string">capture_output 用于捕获命令的标准输出结果和标准错误结果</span></span><br><span class="line"><span class="string">text 以文本形式处理输入输出</span></span><br><span class="line"><span class="string">timeout 设定命令超时时间(s)</span></span><br><span class="line"><span class="string">input 执行命令后模拟输入字符 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">subprocess.check_output(command,shell,encoding)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">用于执行结果直接获得输出结果</span></span><br><span class="line"><span class="string">command 指令</span></span><br><span class="line"><span class="string">shell 是否以系统shell执行</span></span><br><span class="line"><span class="string">encoding 输入输出的文本编码格式 如utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>os</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">os.popen()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">用于获取对应指令的返回结果</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;subprocess&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Python&quot;&gt;&lt;figure class=&quot;iseeu highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>headache</title>
    <link href="http://example.com/2023/08/29/CTF%20WP/Re/headache/"/>
    <id>http://example.com/2023/08/29/CTF%20WP/Re/headache/</id>
    <published>2023-08-29T08:59:21.000Z</published>
    <updated>2023-08-29T09:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>main函数</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">264</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter flag: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) == <span class="number">61</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_401290(s) )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>sub_401290(s)作为flag校验函数</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_401290</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v2; <span class="comment">// rsi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (*a1 ^ a1[<span class="number">25</span>]) != <span class="number">86</span> )<span class="comment">//对flag进行校验</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v2 = &amp;loc_4012A4;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    *v2++ ^= <span class="number">0xEA228DE6</span>;<span class="comment">//对函数进行解密</span></span><br><span class="line">  <span class="keyword">while</span> ( *(v2 - <span class="number">1</span>) != <span class="number">-366834202</span> );</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="type">void</span>))loc_4012A4)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//汇编代码</span></span><br><span class="line"><span class="comment">/*.text:0000000000404374 loc_404374:                             ; CODE XREF: sub_401290+B↑j</span></span><br><span class="line"><span class="comment">.text:0000000000404374                 mov     eax, 0EA228DE6h</span></span><br><span class="line"><span class="comment">.text:0000000000404379                 lea     rsi, loc_4012A4</span></span><br><span class="line"><span class="comment">.text:0000000000404381</span></span><br><span class="line"><span class="comment">.text:0000000000404381 loc_404381:                             ; CODE XREF: sub_401290+30FA↓j</span></span><br><span class="line"><span class="comment">.text:0000000000404381                 xor     [rsi], eax</span></span><br><span class="line"><span class="comment">.text:0000000000404383                 add     rsi, 4</span></span><br><span class="line"><span class="comment">.text:0000000000404387                 cmp     [rsi-4], eax</span></span><br><span class="line"><span class="comment">.text:000000000040438A                 jnz     short loc_404381</span></span><br><span class="line"><span class="comment">.text:000000000040438C                 call    loc_4012A4</span></span><br><span class="line"><span class="comment">.text:0000000000404391                 retn*/</span></span><br></pre></td></tr></table></figure></div><blockquote><p>idc脚本(发现后续有一大堆加密，所以只是用这个暂时解密看看后面的函数怎么样)</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="title function_">xor</span><span class="params">(addr, p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; Dword(addr + i - <span class="number">4</span>) != p; )</span><br><span class="line">    &#123;</span><br><span class="line">        PatchDword(addr + i, Dword(addr + i) ^ p);</span><br><span class="line">        i = i + <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    xor(<span class="number">0x004012A4</span>, <span class="number">0xEA228DE6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><p>loc_4012A4解密后的结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012A4 loc_4012A4:                             ; CODE XREF: sub_401290+30FC↓p</span><br><span class="line">.text:00000000004012A4                                         ; DATA XREF: sub_401290+30E9↓o</span><br><span class="line">.text:00000000004012A4                 mov     r15b, [rdi+2Dh] ;flag[0x2d]</span><br><span class="line">.text:00000000004012A8                 xor     r15b, [rdi+0Eh] ;flag[0x0e]^flag[0x2d]</span><br><span class="line">.text:00000000004012AC                 cmp     r15b, 1Dh ;flag[0x0e]^flag[0x2d]=0x1d,作为flag校验条件</span><br><span class="line">.text:00000000004012B0                 jz      near ptr qword_404348+8</span><br><span class="line">.text:00000000004012B6                 xor     eax, eax</span><br><span class="line">.text:00000000004012B8                 retn</span><br></pre></td></tr></table></figure></div><p>接下来的结构都是类似于这个的循环,所以上脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simulate_xor</span>(<span class="params">address, xor_value</span>):</span><br><span class="line">    <span class="comment"># 模拟异或操作</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        patch_dword(address, idc.get_wide_dword(address) ^ xor_value)<span class="comment">#patch_dword改变对应地址的四字节</span></span><br><span class="line">        <span class="keyword">if</span>(idc.get_wide_dword(address)==xor_value):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        address+=<span class="number">4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">addr</span>):<span class="comment">#获取对应的值的z3条件因为有多种形式 mov就有[rdi],[rdi+1],[rdi+0Eh],这三种情况</span></span><br><span class="line">    <span class="comment">#cmp也有 1,1dh这两类情况</span></span><br><span class="line">    <span class="comment">#所以情况有点多直接用下面这个复杂的判断式子判断，也可以用一坨if else也行</span></span><br><span class="line">    l=<span class="built_in">int</span>(<span class="built_in">str</span>(idc.generate_disasm_line(addr,<span class="number">1</span>)).split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>][:-<span class="number">2</span>],<span class="number">16</span>) <span class="keyword">if</span> (<span class="string">&#x27;+&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr,<span class="number">1</span>))<span class="keyword">and</span> <span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr,<span class="number">1</span>)))  <span class="keyword">else</span> <span class="built_in">int</span>(<span class="built_in">str</span>(idc.generate_disasm_line(addr,<span class="number">1</span>)).split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>][:-<span class="number">1</span>],<span class="number">16</span>)  <span class="keyword">if</span> (<span class="string">&#x27;h&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr,<span class="number">1</span>))<span class="keyword">and</span> <span class="string">&#x27;+&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr,<span class="number">1</span>)) )  <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    r=<span class="built_in">int</span>(<span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">4</span>,<span class="number">1</span>)).split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>][:-<span class="number">2</span>],<span class="number">16</span>) <span class="keyword">if</span> (<span class="string">&#x27;+&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">4</span>,<span class="number">1</span>))<span class="keyword">and</span> <span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">4</span>,<span class="number">1</span>)))  <span class="keyword">else</span> <span class="built_in">int</span>(<span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">4</span>,<span class="number">1</span>)).split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>][:-<span class="number">1</span>],<span class="number">16</span>)  <span class="keyword">if</span> (<span class="string">&#x27;h&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">4</span>,<span class="number">1</span>))<span class="keyword">and</span> <span class="string">&#x27;+&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">4</span>,<span class="number">1</span>)) )  <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    e=<span class="built_in">int</span>(<span class="built_in">str</span>(idc.generate_disasm_line(addr+<span class="number">8</span>,<span class="number">1</span>)).split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;h&#x27;</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;flag[<span class="subst">&#123;l&#125;</span>]^flag[<span class="subst">&#123;r&#125;</span>]==<span class="subst">&#123;e&#125;</span>&#x27;</span><span class="comment">#返回对应的字符串</span></span><br><span class="line">start=<span class="number">0x404374</span><span class="comment">#最开始的加密地址</span></span><br><span class="line">nextptr=<span class="number">0x401290</span><span class="comment">#最开始的flag校验</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">flag=[BitVec(<span class="string">f&#x27;flag[<span class="subst">&#123;i&#125;</span>]&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">61</span>)]<span class="comment">#创建flag变量</span></span><br><span class="line">f=Solver()<span class="comment">#新建一个求解器类</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">&#x27;amateursCTF&#123;&#x27;</span>):<span class="comment">#添加基础条件前几个字符必须得是&quot;amateursCTF&#123;&quot;,最后的字符必须得是&quot;&#125;&quot;</span></span><br><span class="line">    f.add(flag[i]==<span class="built_in">ord</span>(j))</span><br><span class="line">f.add(flag[<span class="number">60</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    f.add(<span class="built_in">eval</span>(check(nextptr)))<span class="comment">#添加z3条件,eval执行对应的字符串获得flag[xx]^flag[xx]==xx，因为条件需要的是python中的等式判断所以直接用eval</span></span><br><span class="line">    tmp=<span class="built_in">str</span>(idc.generate_disasm_line(start,<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    instruction = <span class="built_in">int</span>(tmp[<span class="built_in">len</span>(<span class="string">&#x27;mov     eax, &#x27;</span>):-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">    tmp=idc.generate_disasm_line(start+<span class="number">24</span>,<span class="number">1</span>)<span class="comment">#有的时候需要第二个参数为1，为0可能会获取当前的数据而不是代码</span></span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;+&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tmp:<span class="comment">#用+号作为分隔符将call    near ptr qword_402348+1BCh分成[call    near ptr qword_402348,1BCh]这个列表用于得到对应地址值因为每次都只用了6个字符(此处为402348)作为地址所以直接获得第1个元素的后6个字符加上1BC(去掉h)就行</span></span><br><span class="line">        nextptr=<span class="built_in">int</span>(tmp[-<span class="number">6</span>:],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmplist=tmp.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> tmplist[<span class="number">1</span>]:</span><br><span class="line">            nextptr=<span class="built_in">int</span>(tmplist[<span class="number">0</span>][-<span class="number">6</span>:],<span class="number">16</span>)+<span class="built_in">int</span>(tmplist[<span class="number">1</span>][:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nextptr=<span class="built_in">int</span>(tmplist[<span class="number">0</span>][-<span class="number">6</span>:],<span class="number">16</span>)+<span class="built_in">int</span>(tmplist[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    simulate_xor(nextptr,instruction)</span><br><span class="line">    tmp=<span class="built_in">str</span>(idc.generate_disasm_line(nextptr+<span class="number">12</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;jz&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tmp:<span class="comment">#jz相当于跳转到下一次加密，如果没有jz了就代表加密结束了,所以就结束解密循环</span></span><br><span class="line">        <span class="built_in">print</span>(count,<span class="built_in">hex</span>(nextptr+<span class="number">12</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;+&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tmp:<span class="comment">#有些情况是地址+数字代表一个位置,也有直接jz地址的情况</span></span><br><span class="line">        start=<span class="built_in">int</span>(tmp[-<span class="number">6</span>:],<span class="number">16</span>)<span class="comment">#获取后6个字符串并用16进制形式转化成数字</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmplist=tmp.split(<span class="string">&#x27;+&#x27;</span>)<span class="comment">#用+号作为分隔符将jz      near ptr qword_404348+8分成[jz      near ptr qword_404348,8]这个列表用于得到对应地址值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> tmplist[<span class="number">1</span>]:</span><br><span class="line">            start=<span class="built_in">int</span>(tmplist[<span class="number">0</span>][-<span class="number">6</span>:],<span class="number">16</span>)+<span class="built_in">int</span>(tmplist[<span class="number">1</span>][:-<span class="number">1</span>],<span class="number">16</span>)<span class="comment">#有h代表16进制数同时又有+号所以直接模拟运算获得对应地址</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start=<span class="built_in">int</span>(tmplist[<span class="number">0</span>][-<span class="number">6</span>:],<span class="number">16</span>)+<span class="built_in">int</span>(tmplist[<span class="number">1</span>],<span class="number">16</span>)<span class="comment">#没有h直接获取+号前面6个字符和+号后面所有数值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(start))</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):<span class="comment">#check()函数检查是否有解</span></span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()<span class="comment">#m用于得到最后的解</span></span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">61</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))<span class="comment">#将61个flag字符添加进flag字符串里</span></span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)<span class="comment">#输出flag</span></span><br><span class="line">    f.add(Or(condition))<span class="comment">#将现在的情况添加进条件内防止下次循环获得一样的情况，用于检查是否有多解</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;main函数&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;C&quot;&gt;&lt;figure class=&quot;iseeu highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Re" scheme="http://example.com/categories/CTF-WP/Re/"/>
    
    
  </entry>
  
  <entry>
    <title>zsteg栈报错</title>
    <link href="http://example.com/2023/08/17/Misc/zsteg%E6%A0%88%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2023/08/17/Misc/zsteg%E6%A0%88%E6%8A%A5%E9%94%99/</id>
    <published>2023-08-17T12:33:20.000Z</published>
    <updated>2023-08-17T12:37:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>报错如下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">zsteg bincat_hacked\ \(1\).png</span><br><span class="line">/var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:318:in `upto&#x27;: stack level too deep (SystemStackError)</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:318:in `decoded_bytes&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line/mixins.rb:17:in `prev_scanline_byte&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:377:in `prev_scanline_byte&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:319:in `block in decoded_bytes&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:318:in `upto&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:318:in `decoded_bytes&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line/mixins.rb:17:in `prev_scanline_byte&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zpng-0.4.5/lib/zpng/scan_line.rb:377:in `prev_scanline_byte&#x27;</span><br><span class="line">         ... 4548 levels...</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zsteg-0.2.13/lib/zsteg.rb:26:in `run&#x27;</span><br><span class="line">        from /var/lib/gems/3.1.0/gems/zsteg-0.2.13/bin/zsteg:8:in `&lt;top (required)&gt;&#x27;</span><br><span class="line">        from /usr/local/bin/zsteg:25:in `load&#x27;</span><br><span class="line">        from /usr/local/bin/zsteg:25:in `&lt;main&gt;&#x27;</span><br></pre></td></tr></table></figure></div><p>栈限制过小了需要增加栈的大小</p><p>此处我设置了5mb</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export RUBY_THREAD_VM_STACK_SIZE=5242880</span><br></pre></td></tr></table></figure></div><p>如果需要永久设置可写入~&#x2F;.bashrc(具体rc文件对应你所用的shell)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;报错如下&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Shell&quot;&gt;&lt;figure class=&quot;iseeu highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>攻防世界-easyjava</title>
    <link href="http://example.com/2023/08/10/CTF%20WP/Re/%E5%AE%89%E5%8D%93/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-easyjava/"/>
    <id>http://example.com/2023/08/10/CTF%20WP/Re/%E5%AE%89%E5%8D%93/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-easyjava/</id>
    <published>2023-08-09T17:30:21.000Z</published>
    <updated>2023-08-09T17:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看xml</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span> <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">package</span>=<span class="string">&quot;com.a.easyjava&quot;</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">&quot;27&quot;</span> <span class="attr">platformBuildVersionName</span>=<span class="string">&quot;8.1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;19&quot;</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">&quot;26&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span> <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.p027a.easyjava.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;android.support.VERSION&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;26.1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;android.arch.lifecycle.VERSION&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;27.0.0-SNAPSHOT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>只有一个activity</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.p027a.easyjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.p021v7.app.ActivityC0435c;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: com.a.easyjava.MainActivity */</span></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">ActivityC0435c</span> &#123;</span><br><span class="line">    <span class="comment">/* renamed from: a */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">m6a</span><span class="params">(String str, C0680b c0680b, C0679a c0679a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c0679a.m3a(c0680b.m1a(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: private */</span></span><br><span class="line">    <span class="comment">/* renamed from: b */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">m5b</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.startsWith(<span class="string">&quot;flag&#123;&quot;</span>) &amp;&amp; str.endsWith(<span class="string">&quot;&#125;&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> str.substring(<span class="number">5</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="type">C0680b</span> <span class="variable">c0680b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C0680b</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="type">C0679a</span> <span class="variable">c0679a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C0679a</span>(<span class="number">3</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; substring.length(); i2++) &#123;</span><br><span class="line">                sb.append(m6a(substring.charAt(i2) + <span class="string">&quot;&quot;</span>, c0680b, c0679a));</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">valueOf</span> <span class="operator">=</span> Integer.valueOf(c0680b.m0b().intValue() / <span class="number">25</span>);</span><br><span class="line">                <span class="keyword">if</span> (valueOf.intValue() &gt; i &amp;&amp; valueOf.intValue() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(sb.toString().equals(<span class="string">&quot;wigwrkaugala&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.p021v7.app.ActivityC0435c, android.support.p007v4.p008a.ActivityC0114i, android.support.p007v4.p008a.ActivityC0094aa, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.a.easyjava.MainActivity.1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (MainActivity.m5b(((EditText) ((MainActivity) <span class="built_in">this</span>).findViewById(R.id.edit)).getText().toString()).booleanValue()) &#123;</span><br><span class="line">                    Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;You are right!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;You are wrong! Bye~&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Timer</span>().schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123; <span class="comment">// from class: com.a.easyjava.MainActivity.1.1</span></span><br><span class="line">                    <span class="meta">@Override</span> <span class="comment">// java.util.TimerTask, java.lang.Runnable</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.exit(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">2000L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>基本的验证如下</p><blockquote><p>验证加密后的结果是否等于wigwrkaugala</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">m6a</span><span class="params">(String str, C0680b c0680b, C0679a c0679a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c0679a.m3a(c0680b.m1a(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">m5b</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.startsWith(<span class="string">&quot;flag&#123;&quot;</span>) &amp;&amp; str.endsWith(<span class="string">&quot;&#125;&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> str.substring(<span class="number">5</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="type">C0680b</span> <span class="variable">c0680b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C0680b</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="type">C0679a</span> <span class="variable">c0679a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C0679a</span>(<span class="number">3</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; substring.length(); i2++) &#123;</span><br><span class="line">                sb.append(m6a(substring.charAt(i2) + <span class="string">&quot;&quot;</span>, c0680b, c0679a));</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">valueOf</span> <span class="operator">=</span> Integer.valueOf(c0680b.m0b().intValue() / <span class="number">25</span>);</span><br><span class="line">                <span class="keyword">if</span> (valueOf.intValue() &gt; i &amp;&amp; valueOf.intValue() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(sb.toString().equals(<span class="string">&quot;wigwrkaugala&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>其第一个调用的是<code>c0680b.m1a(str)</code>第二个调用的是<code>c0679a.m3a</code>,逆算法先从最后一个开始逆起</p><blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.p027a.easyjava;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* renamed from: com.a.easyjava.a */</span></span><br><span class="line">&gt;<span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C0679a</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: a */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; f2482a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: b */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="type">String</span> <span class="variable">f2483b</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: d */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">f2484d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   Integer[] f2485c = &#123;<span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">C0679a</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> num.intValue(); intValue &lt; <span class="built_in">this</span>.f2485c.length; intValue++) &#123;</span><br><span class="line">           f2482a.add(<span class="built_in">this</span>.f2485c[intValue]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.intValue(); i++) &#123;</span><br><span class="line">           f2482a.add(<span class="built_in">this</span>.f2485c[i]); <span class="comment">// [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7 , 14 , 16]</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//这个方法只有在数据长度大于等于25的时候才有用所以省略掉</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m4a</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: a */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">m3a</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (num.intValue() == -<span class="number">10</span>) &#123;<span class="comment">//因为最后的验证结果中没有&quot; &quot;所以可以直接跳过这个if语句</span></span><br><span class="line">           m4a();</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.charAt(<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; f2482a.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (f2482a.get(i) == num) &#123;</span><br><span class="line">               num2 = Integer.valueOf(i);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       m4a();</span><br><span class="line">       <span class="keyword">return</span> f2483b.charAt(num2.intValue());</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></div><p>m3a这个方法基本上就可以逆向算了，最后的返回结果就是<code>f2483b[f2485c.indexof(num)]</code>在python方法中逆回去就是</p><p><code>f2485c[f2483b.find(ret)]</code></p><p>而<code>c0680b.m1a(char)</code>方法如下</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.p027a.easyjava;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* renamed from: com.a.easyjava.b */</span></span><br><span class="line">&gt;<span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C0680b</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: a */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; f2486a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: b */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="type">String</span> <span class="variable">f2487b</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: d */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">f2488d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: c */</span></span><br><span class="line">   Integer[] f2489c = &#123;<span class="number">8</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">C0680b</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> num.intValue(); intValue &lt; <span class="built_in">this</span>.f2489c.length; intValue++) &#123;</span><br><span class="line">           f2486a.add(<span class="built_in">this</span>.f2489c[intValue]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.intValue(); i++) &#123;</span><br><span class="line">           f2486a.add(<span class="built_in">this</span>.f2489c[i]); <span class="comment">// 传入的num为2 所以f2489c第一次运行的情况下是[17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13,8,25]</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: a */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2a</span><span class="params">()</span> &#123;<span class="comment">//这个每运行一步都会改变f2489c，f2487b</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> f2486a.get(<span class="number">0</span>).intValue();</span><br><span class="line">       f2486a.remove(<span class="number">0</span>);</span><br><span class="line">       f2486a.add(Integer.valueOf(intValue));</span><br><span class="line">       f2487b += <span class="string">&quot;&quot;</span> + f2487b.charAt(<span class="number">0</span>);</span><br><span class="line">       f2487b = f2487b.substring(<span class="number">1</span>, <span class="number">27</span>);</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> f2488d;</span><br><span class="line">       f2488d = Integer.valueOf(f2488d.intValue() + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: a */</span></span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">m1a</span><span class="params">(String str)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (f2487b.contains(str.toLowerCase())) &#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">valueOf</span> <span class="operator">=</span> Integer.valueOf(f2487b.indexOf(str));</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; f2486a.size() - <span class="number">1</span>; i2++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (f2486a.get(i2) == valueOf) &#123;</span><br><span class="line">                   i = Integer.valueOf(i2);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           i = str.contains(<span class="string">&quot; &quot;</span>) ? -<span class="number">10</span> : -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       m2a();</span><br><span class="line">       <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* renamed from: b */</span></span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">m0b</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> f2488d;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></div><p>此处可以建议概括返回值为<code>f2486a.indexOf(f2487b.indexOf(str))</code>，所以python中可以逆解为<code>f2487b[f2486a[ret]]</code></p></blockquote></blockquote><p>exp:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f2487b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">f2489c = [<span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>,<span class="number">8</span>,<span class="number">25</span>]</span><br><span class="line">f2483b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">f2485c = [<span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>,<span class="number">14</span>,<span class="number">16</span>]</span><br><span class="line">str1=<span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line">tmp1=<span class="string">&#x27;wigwrkaugala&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp1:</span><br><span class="line">    str1+=f2487b[f2489c[f2485c[(f2483b.find(i))]]]</span><br><span class="line">    f2487b=f2487b[<span class="number">1</span>:]+f2487b[<span class="number">0</span>]</span><br><span class="line">    f2489c=f2489c[<span class="number">1</span>:]+f2489c[:<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(str1+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>得到了flag</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202308100157017.png"                      alt="image-20230810015715953"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看xml&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Xml&quot;&gt;&lt;figure class=&quot;iseeu highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Re" scheme="http://example.com/categories/CTF-WP/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/CTF-WP/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>ab(android backup)文件提取</title>
    <link href="http://example.com/2023/08/09/Re/%E5%AE%89%E5%8D%93/ab(android%20backup)%E6%96%87%E4%BB%B6%E6%8F%90%E5%8F%96/"/>
    <id>http://example.com/2023/08/09/Re/%E5%AE%89%E5%8D%93/ab(android%20backup)%E6%96%87%E4%BB%B6%E6%8F%90%E5%8F%96/</id>
    <published>2023-08-09T08:17:57.000Z</published>
    <updated>2023-08-09T08:26:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要下载abe.jar工具<a class="link"   href="https://github.com/nelenkov/android-backup-extractor" >https://github.com/nelenkov/android-backup-extractor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>具体命令</p><blockquote><p>abe.jar unpack “ab文件地址” “输出文件地址”</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需要下载abe.jar工具&lt;a class=&quot;link&quot;   href=&quot;https://github.com/nelenkov/android-backup-extractor&quot; &gt;https://github.com/nelenkov/android-backup-ex</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>android动态调试</title>
    <link href="http://example.com/2023/08/07/Re/%E5%AE%89%E5%8D%93/android%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2023/08/07/Re/%E5%AE%89%E5%8D%93/android%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/</id>
    <published>2023-08-07T08:38:54.000Z</published>
    <updated>2023-08-07T08:38:54.000Z</updated>
    
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>wireshark字符串搜索</title>
    <link href="http://example.com/2023/08/06/Misc/wireshark%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2/"/>
    <id>http://example.com/2023/08/06/Misc/wireshark%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2/</id>
    <published>2023-08-06T05:52:24.000Z</published>
    <updated>2023-08-06T06:15:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202308061414917.png"                                     ></p><p>只需要根据要搜索的选项改变搜索类型即可，也可直接通过全局搜索16进制数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://cdn.jsdelivr.n</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>gdb</title>
    <link href="http://example.com/2023/08/05/Re/x86/gdb/"/>
    <id>http://example.com/2023/08/05/Re/x86/gdb/</id>
    <published>2023-08-05T04:36:52.000Z</published>
    <updated>2023-08-05T09:11:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gdb使用"><a href="#gdb使用" class="headerlink" title="gdb使用"></a>gdb使用</h2><p>linux执行命令安装gdb</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file #载入可执行文件</span><br><span class="line">start #停到程序入口点处</span><br><span class="line">run #运行程序，直到遇见断点</span><br><span class="line">step #步入</span><br><span class="line">next #步过</span><br><span class="line">c #继续，直到遇到下个断点或者输入</span><br><span class="line">b 函数名 #在函数处打断点，可能需要符号表</span><br><span class="line">b *地址 #在地址处打断点，</span><br><span class="line">x/类型 地址或寄存器 #x/s 0xfffff或者 x/s $rax斜杠后面的参数名可见下面参数列表，注意此处的*是起解引用的作用而不是指指针了</span><br><span class="line">set args 参数1 参数2 #设置参数，字符串可用双引号包裹</span><br></pre></td></tr></table></figure></div><p>db defined byte 字节型</p><p>dw defined word 字型，2字节</p><p>dd 双字型，4字节</p><p>dq 四字，8字节</p><p>s string</p><h2 id="peda安装"><a href="#peda安装" class="headerlink" title="peda安装"></a>peda安装</h2><p>安装peda</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda</span><br><span class="line">cd peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure></div><p>输入gdb验证peda是否安装成功(注意linux需要有python环境)</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb</span></span><br><span class="line">GNU gdb (Debian 13.2-1) 13.2</span><br><span class="line">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class="line"><span class="meta prompt_">gdb-peda$</span></span><br></pre></td></tr></table></figure></div><h2 id="peda命令"><a href="#peda命令" class="headerlink" title="peda命令"></a>peda命令</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">peda.execute(<span class="string">&quot;命令&quot;</span>)<span class="comment">#执行对应的gdb命令</span></span><br><span class="line">peda.execute_redirect(<span class="string">&quot;命令&quot;</span>)<span class="comment">#执行命令并接受该命令返回值</span></span><br><span class="line">peda.set_breakpoint(<span class="string">&#x27;地址&#x27;</span>)<span class="comment">#设置断点</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>可用下面的来模拟输入操作</p><p>注意gdb中的重定向是&lt; &lt;中间会有个空格</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">peda.execute(&quot;run &lt; &lt;&quot; + &quot;(python3 -c &#x27;print(\&quot;&quot; + &#x27;&#x27;.join(参数) + &quot;\&quot;)&#x27;)&quot;)</span><br><span class="line">peda.execute(&quot;r &lt; &lt;(echo -e &#x27;&quot; + input_data.replace(&#x27;\n&#x27;, &#x27;\\n&#x27;) + &quot;&#x27;)&quot;)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gdb使用&quot;&gt;&lt;a href=&quot;#gdb使用&quot; class=&quot;headerlink&quot; title=&quot;gdb使用&quot;&gt;&lt;/a&gt;gdb使用&lt;/h2&gt;&lt;p&gt;linux执行命令安装gdb&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-r</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
</feed>
