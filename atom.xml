<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>runwu2204</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-07T08:24:05.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>runwu2204</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>api</title>
    <link href="http://example.com/2024/06/07/Web/Python/api/"/>
    <id>http://example.com/2024/06/07/Web/Python/api/</id>
    <published>2024-06-07T08:23:29.000Z</published>
    <updated>2024-06-07T08:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>os.path.join</p><p>以最后出现&#x2F;的字符串为基地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;os.path.join&lt;/p&gt;
&lt;p&gt;以最后出现&amp;#x2F;的字符串为基地址&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    <category term="Python" scheme="http://example.com/categories/Web/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>openat</title>
    <link href="http://example.com/2024/06/07/Pwn/linux/api/openat/"/>
    <id>http://example.com/2024/06/07/Pwn/linux/api/openat/</id>
    <published>2024-06-07T07:30:00.000Z</published>
    <updated>2024-06-07T07:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>open函数原型</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int openat(int dirfd, const char *pathname, int flags);</span><br><span class="line">int openat(int dirfd, const char *pathname, int flags, mode_t mode);</span><br></pre></td></tr></table></figure></div><p>fd参数如下</p><p><a class="link"   href="https://docs.huihoo.com/doxygen/linux/kernel/3.7/include_2uapi_2linux_2fcntl_8h.html" >Linux 内核：include&#x2F;uapi&#x2F;linux&#x2F;fcntl.h 文件参考 (huihoo.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT_FDCWD -100</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;open函数原型&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Plaintext&quot;&gt;&lt;figure class=&quot;iseeu highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="Pwn" scheme="http://example.com/categories/Pwn/"/>
    
    <category term="linux" scheme="http://example.com/categories/Pwn/linux/"/>
    
    <category term="api" scheme="http://example.com/categories/Pwn/linux/api/"/>
    
    
  </entry>
  
  <entry>
    <title>seccomp</title>
    <link href="http://example.com/2024/06/07/Pwn/linux/seccomp/"/>
    <id>http://example.com/2024/06/07/Pwn/linux/seccomp/</id>
    <published>2024-06-07T07:22:14.000Z</published>
    <updated>2024-06-07T07:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sandbox的安全机制"><a href="#Sandbox的安全机制" class="headerlink" title="Sandbox的安全机制"></a>Sandbox的安全机制</h2><p>限制系统调用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Sandbox的安全机制&quot;&gt;&lt;a href=&quot;#Sandbox的安全机制&quot; class=&quot;headerlink&quot; title=&quot;Sandbox的安全机制&quot;&gt;&lt;/a&gt;Sandbox的安全机制&lt;/h2&gt;&lt;p&gt;限制系统调用&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Pwn" scheme="http://example.com/categories/Pwn/"/>
    
    <category term="linux" scheme="http://example.com/categories/Pwn/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>模拟发包</title>
    <link href="http://example.com/2024/06/03/Web/%E6%A8%A1%E6%8B%9F%E5%8F%91%E5%8C%85/"/>
    <id>http://example.com/2024/06/03/Web/%E6%A8%A1%E6%8B%9F%E5%8F%91%E5%8C%85/</id>
    <published>2024-06-03T14:55:17.000Z</published>
    <updated>2024-06-03T14:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>scapy</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;scapy&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>misc</title>
    <link href="http://example.com/2024/06/03/Re/%E5%AE%89%E5%8D%93/misc/"/>
    <id>http://example.com/2024/06/03/Re/%E5%AE%89%E5%8D%93/misc/</id>
    <published>2024-06-02T18:05:51.000Z</published>
    <updated>2024-06-02T18:15:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用操作"><a href="#应用操作" class="headerlink" title="应用操作"></a>应用操作</h2><h3 id="手动发送广播"><a href="#手动发送广播" class="headerlink" title="手动发送广播"></a>手动发送广播</h3><blockquote><p><a class="link"   href="https://www.cnblogs.com/tc310/p/11152853.html" >Android通过adb shell am broadcast发送广播 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="启动actvity"><a href="#启动actvity" class="headerlink" title="启动actvity"></a>启动actvity</h3><blockquote><p><a class="link"   href="https://www.cnblogs.com/yhjoker/p/8974119.html" >Android Studio 动态调试 apk 反编译出的 smali 代码 - yhjoker - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><code> adb shell am start -D -S -W packageName/ActivityName</code>    &#x2F;&#x2F;以调试状态运行目标activity </p></blockquote><h2 id="自启动任务"><a href="#自启动任务" class="headerlink" title="自启动任务"></a>自启动任务</h2><p>向<code>/data/adb/post-fs-data.d</code>写入自定义<code>.sh</code>文件即可</p><p>注意给xxx权限(<code>chmod +xxx</code>)</p><p>比如</p><blockquote><p>1、<code>su -c /data/local/tmp/frida-server-16.3.1-android-arm</code>写入frida.sh(名字任意)</p><p>2、<code>chmod +xxx frida.sh</code></p><p>重启后用frida hook任意应用,能hook即可</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;应用操作&quot;&gt;&lt;a href=&quot;#应用操作&quot; class=&quot;headerlink&quot; title=&quot;应用操作&quot;&gt;&lt;/a&gt;应用操作&lt;/h2&gt;&lt;h3 id=&quot;手动发送广播&quot;&gt;&lt;a href=&quot;#手动发送广播&quot; class=&quot;headerlink&quot; title=&quot;手动发送广</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>自动任务</title>
    <link href="http://example.com/2024/06/02/Re/%E5%AE%89%E5%8D%93/%E8%87%AA%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2024/06/02/Re/%E5%AE%89%E5%8D%93/%E8%87%AA%E5%8A%A8%E4%BB%BB%E5%8A%A1/</id>
    <published>2024-06-02T10:06:19.000Z</published>
    <updated>2024-06-02T17:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>向<code>/data/adb/post-fs-data.d</code>写入自定义<code>.sh</code>文件即可</p><p>注意给xxx权限(<code>chmod +xxx</code>)</p><p>比如</p><blockquote><p>1、<code>su -c /data/local/tmp/frida-server-16.3.1-android-arm</code>写入frida.sh(名字任意)</p><p>2、<code>chmod +xxx frida.sh</code></p><p>重启后用frida hook任意应用,能hook即可</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;向&lt;code&gt;/data/adb/post-fs-data.d&lt;/code&gt;写入自定义&lt;code&gt;.sh&lt;/code&gt;文件即可&lt;/p&gt;
&lt;p&gt;注意给xxx权限(&lt;code&gt;chmod +xxx&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>AndroidStudioemulator_Root</title>
    <link href="http://example.com/2024/05/29/Re/%E5%AE%89%E5%8D%93/AndroidStudioemulator_Root/"/>
    <id>http://example.com/2024/05/29/Re/%E5%AE%89%E5%8D%93/AndroidStudioemulator_Root/</id>
    <published>2024-05-28T17:15:59.000Z</published>
    <updated>2024-06-03T13:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>[<a class="link"   href="https://xdaforums.com/t/script-rootavd-root-your-android-studio-virtual-device-emulator-with-magisk-android-linux-darwin-macos-win-google-play-store-apis.4218123/" >SCRIPT] rootAVD - root your Android Studio Virtual Device emulator with Magisk [Android][Linux][Darwin&#x2F;MacOS][WIN][Google Play Store APIs] | XDA Forums <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a class=&quot;link&quot;   href=&quot;https://xdaforums.com/t/script-rootavd-root-your-android-studio-virtual-device-emulator-with-magisk-android-linu</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>one_gadget</title>
    <link href="http://example.com/2024/05/24/Pwn/linux/one_gadget/"/>
    <id>http://example.com/2024/05/24/Pwn/linux/one_gadget/</id>
    <published>2024-05-24T15:19:18.000Z</published>
    <updated>2024-05-24T15:19:18.000Z</updated>
    
    
    
    
    <category term="Pwn" scheme="http://example.com/categories/Pwn/"/>
    
    <category term="linux" scheme="http://example.com/categories/Pwn/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Cgo_dll</title>
    <link href="http://example.com/2024/05/15/Re/golang/Cgo_dll/"/>
    <id>http://example.com/2024/05/15/Re/golang/Cgo_dll/</id>
    <published>2024-05-14T18:01:27.000Z</published>
    <updated>2024-05-14T18:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">type</span> SHA1Context <span class="keyword">struct</span> &#123;</span><br><span class="line">M                       <span class="type">string</span></span><br><span class="line">Message_Blocklist       [<span class="number">80</span>][<span class="number">4</span>]<span class="type">uint8</span></span><br><span class="line">Message_bitBlocklist    [<span class="number">80</span>]<span class="type">string</span></span><br><span class="line">Message_bitBlocklistALL <span class="type">string</span></span><br><span class="line">index                   <span class="type">int</span></span><br><span class="line">size                    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha1PadMessage</span><span class="params">(context *SHA1Context)</span></span> &#123;</span><br><span class="line"><span class="comment">//pading</span></span><br><span class="line">context.size = <span class="built_in">len</span>(context.M) * <span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> _, j := <span class="keyword">range</span> context.M &#123;</span><br><span class="line">context.Message_bitBlocklistALL += fmt.Sprintf(<span class="string">&quot;%08b&quot;</span>, j)</span><br><span class="line">&#125;</span><br><span class="line">padsize := (<span class="number">448</span> - context.size - <span class="number">1</span> + <span class="number">512</span>) % <span class="number">512</span></span><br><span class="line">context.Message_bitBlocklistALL += <span class="string">&quot;1&quot;</span> + strings.Repeat(<span class="string">&quot;0&quot;</span>, padsize) + fmt.Sprintf(<span class="string">&quot;%064b&quot;</span>, context.size)</span><br><span class="line">context.size = <span class="built_in">len</span>(context.Message_bitBlocklistALL)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; context.size; i += <span class="number">8</span> &#123;</span><br><span class="line">tmp, _ := strconv.ParseInt(context.Message_bitBlocklistALL[i:i+<span class="number">8</span>], <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line">context.Message_Blocklist[i/<span class="number">32</span>][i/<span class="number">8</span>%<span class="number">4</span>] = <span class="type">uint8</span>(tmp)</span><br><span class="line">context.Message_bitBlocklist[i/<span class="number">32</span>] += context.Message_bitBlocklistALL[i : i+<span class="number">8</span>]</span><br><span class="line">context.index = i/<span class="number">32</span> + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xor</span><span class="params">(a ...<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">len</span>(a) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">tmp := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="keyword">range</span> a[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="type">string</span>(j) != <span class="type">string</span>(a[<span class="number">1</span>][i]) &#123;</span><br><span class="line">tmp += <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> xor(<span class="built_in">append</span>(a[<span class="number">2</span>:], xor(a[<span class="number">0</span>], a[<span class="number">1</span>]))...) <span class="comment">//...切片解包</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">and</span><span class="params">(a ...<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">len</span>(a) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">tmp := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="keyword">range</span> a[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="type">string</span>(j) == <span class="string">&quot;1&quot;</span> &amp;&amp; <span class="type">string</span>(a[<span class="number">1</span>][i]) == <span class="string">&quot;1&quot;</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> and(<span class="built_in">append</span>(a[<span class="number">2</span>:], and(a[<span class="number">0</span>], a[<span class="number">1</span>]))...) <span class="comment">//...切片解包</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">not</span><span class="params">(a <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">tmp := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _, j := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="type">string</span>(j) == <span class="string">&quot;0&quot;</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a ...<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">tmp := <span class="type">int64</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, j := <span class="keyword">range</span> a &#123;</span><br><span class="line">tmq, _ := strconv.ParseInt(j, <span class="number">2</span>, <span class="number">33</span>)</span><br><span class="line">tmp += tmq</span><br><span class="line">&#125;</span><br><span class="line">tmo := fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, tmp)</span><br><span class="line"><span class="keyword">return</span> tmo[<span class="built_in">len</span>(tmo)<span class="number">-32</span>:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">or</span><span class="params">(a ...<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">len</span>(a) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">tmp := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="keyword">range</span> a[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="type">string</span>(j) == <span class="string">&quot;0&quot;</span> &amp;&amp; <span class="type">string</span>(a[<span class="number">1</span>][i]) == <span class="string">&quot;0&quot;</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp += <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> or(<span class="built_in">append</span>(a[<span class="number">2</span>:], or(a[<span class="number">0</span>], a[<span class="number">1</span>]))...) <span class="comment">//...切片解包</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotl</span><span class="params">(n <span class="type">int</span>, t ...<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//循环左移</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">len</span>(t) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> t[<span class="number">0</span>][n:<span class="number">32</span>] + t[<span class="number">0</span>][<span class="number">0</span>:n]</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> rotl(n, xor(t[<span class="number">0</span>], t[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> rotl(n, xor(t[<span class="number">0</span>], t[<span class="number">1</span>]), t[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> rotl(n, xor(t[<span class="number">0</span>], t[<span class="number">1</span>]), xor(t[<span class="number">2</span>], t[<span class="number">3</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha1ProcessMessageBlock</span><span class="params">(context *SHA1Context)</span></span> &#123;</span><br><span class="line"><span class="comment">//实现数据扩展</span></span><br><span class="line"><span class="keyword">for</span> ; context.index &lt; <span class="number">80</span>; context.index++ &#123;</span><br><span class="line">context.Message_bitBlocklist[context.index] = rotl(<span class="number">1</span>, context.Message_bitBlocklist[context.index<span class="number">-3</span>], context.Message_bitBlocklist[context.index<span class="number">-8</span>], context.Message_bitBlocklist[context.index<span class="number">-14</span>], context.Message_bitBlocklist[context.index<span class="number">-16</span>])</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">8</span> &#123;</span><br><span class="line">tmp, _ := strconv.ParseInt(context.Message_bitBlocklist[context.index][i:i+<span class="number">8</span>], <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line">context.Message_Blocklist[context.index][i/<span class="number">8</span>] = <span class="type">uint8</span>(tmp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makelist</span><span class="params">(context SHA1Context)</span></span> []SHA1Context &#123;</span><br><span class="line"><span class="comment">//用于分组</span></span><br><span class="line"><span class="keyword">var</span> contextlist []SHA1Context</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; context.size/<span class="number">512</span>; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> tmpbyte [<span class="number">80</span>][<span class="number">4</span>]<span class="type">byte</span></span><br><span class="line"><span class="keyword">var</span> tmpstr [<span class="number">80</span>]<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">16</span>; j++ &#123;</span><br><span class="line">tmpbyte[j] = context.Message_Blocklist[i*<span class="number">16</span>+j]</span><br><span class="line">tmpstr[j] = context.Message_bitBlocklist[i*<span class="number">16</span>+j]</span><br><span class="line">&#125;</span><br><span class="line">tmp := SHA1Context&#123;</span><br><span class="line">Message_Blocklist:    tmpbyte,</span><br><span class="line">Message_bitBlocklist: tmpstr,</span><br><span class="line">size:                 <span class="number">512</span>,</span><br><span class="line">index:                <span class="number">16</span>,</span><br><span class="line">&#125;</span><br><span class="line">contextlist = <span class="built_in">append</span>(contextlist, tmp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> contextlist</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha1_digest</span><span class="params">(context *SHA1Context)</span></span> [<span class="number">20</span>]<span class="type">byte</span> &#123;</span><br><span class="line">hash := []<span class="type">string</span>&#123;</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0x67452301</span>),</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0xEFCDAB89</span>),</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0x98BADCFE</span>),</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0x10325476</span>),</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0xC3D2E1F0</span>)&#125;</span><br><span class="line">a, b, c, d, e := hash[<span class="number">0</span>], hash[<span class="number">1</span>], hash[<span class="number">2</span>], hash[<span class="number">3</span>], hash[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="keyword">range</span> context.Message_Blocklist &#123;</span><br><span class="line">w := fmt.Sprintf(<span class="string">&quot;%08b%08b%08b%08b&quot;</span>, j[<span class="number">0</span>], j[<span class="number">1</span>], j[<span class="number">2</span>], j[<span class="number">3</span>])</span><br><span class="line">f := <span class="string">&quot;&quot;</span></span><br><span class="line">k := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i &lt; <span class="number">20</span>:</span><br><span class="line">f = or(and(b, c), and(not(b), d)) <span class="comment">//&#x27;0b1100001011000100110001110000000&#x27;</span></span><br><span class="line"><span class="comment">//&#x27;0b10001000100010001000100010001000&#x27;|&#x27;0b10000001100100101010001110110&#x27;</span></span><br><span class="line">k = fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0x5A827999</span>)</span><br><span class="line"><span class="keyword">case</span> i &lt; <span class="number">40</span>:</span><br><span class="line">f = xor(b, c, d)</span><br><span class="line">k = fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0x6ED9EBA1</span>)</span><br><span class="line"><span class="keyword">case</span> i &lt; <span class="number">60</span>:</span><br><span class="line">f = or(and(b, c), and(b, d), and(c, d))</span><br><span class="line">k = fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0x8F1BBCDC</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">f = xor(b, c, d)</span><br><span class="line">k = fmt.Sprintf(<span class="string">&quot;%032b&quot;</span>, <span class="number">0xCA62C1D6</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tmp := add(rotl(<span class="number">5</span>, a), f, e, k, w)</span><br><span class="line">e, d, c, b, a = d, c, rotl(<span class="number">30</span>, b), a, tmp</span><br><span class="line">&#125;</span><br><span class="line">hash[<span class="number">0</span>], hash[<span class="number">1</span>], hash[<span class="number">2</span>], hash[<span class="number">3</span>], hash[<span class="number">4</span>] = add(hash[<span class="number">0</span>], a), add(hash[<span class="number">1</span>], b), add(hash[<span class="number">2</span>], c), add(hash[<span class="number">3</span>], d), add(hash[<span class="number">4</span>], e)</span><br><span class="line">hash_list2byte_list := <span class="function"><span class="keyword">func</span><span class="params">(a [5]<span class="type">string</span>)</span></span> [<span class="number">20</span>]<span class="type">byte</span> &#123;</span><br><span class="line">tmp := [<span class="number">20</span>]<span class="type">byte</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>) &#123;</span><br><span class="line">tmq, _ := strconv.ParseUint(a[i][j*<span class="number">8</span>:j*<span class="number">8</span>+<span class="number">8</span>], <span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line">tmp[i*<span class="number">4</span>+j] = <span class="type">byte</span>(tmq)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash_list2byte_list([<span class="number">5</span>]<span class="type">string</span>(hash))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//export Output</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Output</span><span class="params">(input *C.char)</span></span> *C.char &#123;</span><br><span class="line"><span class="keyword">var</span> context SHA1Context</span><br><span class="line">context.M = C.GoString(input)<span class="comment">//Cstring转GOstring</span></span><br><span class="line">sha1PadMessage(&amp;context)</span><br><span class="line">sha1ProcessMessageBlock(&amp;context)</span><br><span class="line">tmp:=sha1_digest(&amp;context)</span><br><span class="line"><span class="keyword">return</span> C.CString(fmt.Sprintln(tmp))<span class="comment">//生成对应字符串的的副本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">Output(Output(C.CString(<span class="string">&quot;123456&quot;</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Golang&quot;&gt;&lt;figure class=&quot;iseeu highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="golang" scheme="http://example.com/categories/Re/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>start</title>
    <link href="http://example.com/2024/05/12/Re/WASM/start/"/>
    <id>http://example.com/2024/05/12/Re/WASM/start/</id>
    <published>2024-05-11T16:22:27.000Z</published>
    <updated>2024-05-11T16:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>工具</p><blockquote><h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><p>jeb</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p>apt安装下面两个即可</p><p><code>wabt</code><code>binaryen</code> </p><p>wasm-decompile 用于将wasm转为类js语言</p><p>wasm2wat 用于将wasm转为wat 前者是二进制文件 后者是文本</p></blockquote><h2 id="jeb操作"><a href="#jeb操作" class="headerlink" title="jeb操作"></a>jeb操作</h2><p>拖进jeb里选择wasmbc即可</p><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202405120045490.png"                      alt="image-20240512004506410"                ></p></blockquote><p>函数入口一般会以start开头</p><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202405120046015.png"                      alt="image-20240512004629865"                ></p></blockquote><p>之后就可以逆向啦</p><p>但是存在一个问题，它可能会将常量认为是指针(地址)，同时在更改对应定义时，他会decompile失败</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工具&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;推荐工具&quot;&gt;&lt;a href=&quot;#推荐工具&quot; class=&quot;headerlink&quot; title=&quot;推荐工具&quot;&gt;&lt;/a&gt;推荐工具&lt;/h2&gt;&lt;p&gt;jeb&lt;/p&gt;
&lt;h2 id=&quot;其他工具&quot;&gt;&lt;a href=&quot;#其他工具&quot; c</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="WASM" scheme="http://example.com/categories/Re/WASM/"/>
    
    
  </entry>
  
  <entry>
    <title>调用动态链接库</title>
    <link href="http://example.com/2024/05/07/%E5%BC%80%E5%8F%91/Electron/%E8%B0%83%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    <id>http://example.com/2024/05/07/%E5%BC%80%E5%8F%91/Electron/%E8%B0%83%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</id>
    <published>2024-05-07T08:37:37.000Z</published>
    <updated>2024-05-07T10:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://nongchatea.gitbook.io/koffi-chinese" >https://nongchatea.gitbook.io/koffi-chinese <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>example</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koffi = <span class="built_in">require</span>(<span class="string">&#x27;koffi&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the shared library</span></span><br><span class="line"><span class="keyword">const</span> lib = koffi.<span class="title function_">load</span>(<span class="string">&#x27;user32.dll&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare constants</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MB_OK</span> = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MB_YESNO</span> = <span class="number">0x4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MB_ICONQUESTION</span> = <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MB_ICONINFORMATION</span> = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDOK</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDYES</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDNO</span> = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find functions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MessageBoxA</span> = lib.<span class="title function_">func</span>(<span class="string">&#x27;__stdcall&#x27;</span>, <span class="string">&#x27;MessageBoxA&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;void *&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;uint&#x27;</span>]);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MessageBoxW</span> = lib.<span class="title function_">func</span>(<span class="string">&#x27;__stdcall&#x27;</span>, <span class="string">&#x27;MessageBoxW&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;void *&#x27;</span>, <span class="string">&#x27;str16&#x27;</span>, <span class="string">&#x27;str16&#x27;</span>, <span class="string">&#x27;uint&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ret = <span class="title class_">MessageBoxA</span>(<span class="literal">null</span>, <span class="string">&#x27;Do you want another message box?&#x27;</span>, <span class="string">&#x27;Koffi&#x27;</span>, <span class="variable constant_">MB_YESNO</span> | <span class="variable constant_">MB_ICONQUESTION</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="variable constant_">IDYES</span>)</span><br><span class="line">    <span class="title class_">MessageBoxW</span>(<span class="literal">null</span>, <span class="string">&#x27;Hello World!&#x27;</span>, <span class="string">&#x27;Koffi&#x27;</span>, <span class="variable constant_">MB_ICONINFORMATION</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">returnANumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dll.<span class="title function_">returnANumber</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="较方便的调用"><a href="#较方便的调用" class="headerlink" title="较方便的调用"></a>较方便的调用</h2><p>用类似于c函数声明的格式</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> printf = lib.<span class="title function_">func</span>(<span class="string">&#x27;int printf(const char *fmt, ...)&#x27;</span>);</span><br><span class="line"><span class="comment">// The parameter name is not used by Koffi, and optional</span></span><br><span class="line"><span class="keyword">const</span> atoi = lib.<span class="title function_">func</span>(<span class="string">&#x27;int atoi(str)&#x27;</span>);</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://nongchatea.gitbook.io/koffi-chinese&quot; &gt;https://nongchatea.gitbook.io/koffi-chinese &lt;i class=&quot;fa-regular fa</summary>
      
    
    
    
    <category term="开发" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Electron" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/Electron/"/>
    
    
  </entry>
  
  <entry>
    <title>拼图</title>
    <link href="http://example.com/2024/05/03/Misc/%E6%9D%82%E5%AD%A6/%E6%8B%BC%E5%9B%BE/"/>
    <id>http://example.com/2024/05/03/Misc/%E6%9D%82%E5%AD%A6/%E6%8B%BC%E5%9B%BE/</id>
    <published>2024-05-02T16:02:19.000Z</published>
    <updated>2024-05-02T16:09:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前提</p><p><a class="link"   href="https://imagemagick.org/script/download.php#windows" >ImageMagick – Download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> -下载适合你系统的版本即可</p><p>默认选项会配好环境变量</p></blockquote><h2 id="将图片直接拼合成一张大图"><a href="#将图片直接拼合成一张大图" class="headerlink" title="将图片直接拼合成一张大图"></a>将图片直接拼合成一张大图</h2><p><code>magick montage *.png -tile 23x25 -geometry +0+0 big.jpg</code></p><blockquote><p>*.png 是指当前目录所有的以png为后缀的都参与拼图</p><p>23x25 是指 横向的图片x纵向的图片个数,这个需要自己手动计算哪个比例合理</p><p>-geometry 指图像偏移默认会将图片间自动填充空白，不适合后续拼图操作</p><p>big.jpg 指最后输出的图像</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前提&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://imagemagick.org/script/download.php#windows&quot; &gt;ImageMagick – Download &lt;i class=&quot;fa-</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    <category term="杂学" scheme="http://example.com/categories/Misc/%E6%9D%82%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>PIL</title>
    <link href="http://example.com/2024/05/01/Misc/%E6%9D%82%E5%AD%A6/PIL/"/>
    <id>http://example.com/2024/05/01/Misc/%E6%9D%82%E5%AD%A6/PIL/</id>
    <published>2024-05-01T13:44:43.000Z</published>
    <updated>2024-05-01T13:44:43.000Z</updated>
    
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    <category term="杂学" scheme="http://example.com/categories/Misc/%E6%9D%82%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>aab2apk</title>
    <link href="http://example.com/2024/05/01/Re/%E5%AE%89%E5%8D%93/aab2apk/"/>
    <id>http://example.com/2024/05/01/Re/%E5%AE%89%E5%8D%93/aab2apk/</id>
    <published>2024-04-30T17:51:28.000Z</published>
    <updated>2024-06-02T10:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://jedok.com/converter/aab-to-apk" >https://jedok.com/converter/aab-to-apk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>有在线转换器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://jedok.com/converter/aab-to-apk&quot; &gt;https://jedok.com/converter/aab-to-apk &lt;i class=&quot;fa-regular fa-arrow-up-</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>parse_url绕过</title>
    <link href="http://example.com/2024/05/01/Web/php/parse_url%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/05/01/Web/php/parse_url%E7%BB%95%E8%BF%87/</id>
    <published>2024-04-30T17:24:06.000Z</published>
    <updated>2024-04-30T17:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://www.cnblogs.com/Lee-404/p/12826352.html" >parse_url绕过 - Lee-404 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="双斜杠绕过"><a href="#双斜杠绕过" class="headerlink" title="双斜杠绕过"></a>双斜杠绕过</h2><p>逻辑类似下面的</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">            <span class="title function_ invoke__">parse_str</span>(<span class="variable">$url</span>[<span class="string">&#x27;query&#x27;</span>],<span class="variable">$query</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^O/i&quot;</span>,<span class="variable">$value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;STOP HACKING&#x27;</span>);</span><br><span class="line">                    <span class="keyword">exit</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div><p>可通过给上上级路由添加两个<code>/</code></p><p>如<code>127.0.0.1:8000///web/index.php?aaa=bbb</code></p><p>原理</p><blockquote><p>$_SERVER[‘REQUEST_URI’]为你输入的url值也就是当前链接<code>127.0.0.1:8000///web/index.php?aaa=bbb</code></p><p><code>//</code>会引起parse_url报错返回false而false就无法执行<code>parse_str($url[&#39;query&#39;],$query)</code>自然就进不了waf逻辑</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/Lee-404/p/12826352.html&quot; &gt;parse_url绕过 - Lee-404 - 博客园 (cnblogs.com) &lt;i class=&quot;fa-regular </summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    <category term="php" scheme="http://example.com/categories/Web/php/"/>
    
    
  </entry>
  
  <entry>
    <title>反序列化</title>
    <link href="http://example.com/2024/05/01/Web/php/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/05/01/Web/php/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-04-30T16:56:38.000Z</published>
    <updated>2024-04-30T17:29:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://github.com/ambionics/phpggc" >ambionics&#x2F;phpggc: PHPGGC is a library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically. (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>[<a class="link"   href="https://icode.best/i/98379040861373" >安洵杯 2019]iamthinking-爱代码爱编程 (icode.best) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/xrzxyyds/p/the-introduction-and-installation-of-the-use-of-phpggc-s81yc.html" >PHPGGC的使用介绍和安装 - xrzx - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/ambionics/phpggc&quot; &gt;ambionics&amp;#x2F;phpggc: PHPGGC is a library of PHP unserialize() payloads al</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    <category term="php" scheme="http://example.com/categories/Web/php/"/>
    
    
  </entry>
  
  <entry>
    <title>反序列化</title>
    <link href="http://example.com/2024/04/30/Web/%E6%A1%86%E6%9E%B6/thinkphp/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2024/04/30/Web/%E6%A1%86%E6%9E%B6/thinkphp/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-04-30T15:02:11.000Z</published>
    <updated>2024-04-30T15:02:11.000Z</updated>
    
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    <category term="框架" scheme="http://example.com/categories/Web/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="thinkphp" scheme="http://example.com/categories/Web/%E6%A1%86%E6%9E%B6/thinkphp/"/>
    
    
  </entry>
  
  <entry>
    <title>start</title>
    <link href="http://example.com/2024/04/27/%E5%BC%80%E5%8F%91/Electron/start/"/>
    <id>http://example.com/2024/04/27/%E5%BC%80%E5%8F%91/Electron/start/</id>
    <published>2024-04-26T16:40:33.000Z</published>
    <updated>2024-05-07T16:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx create-electron-app <span class="comment">#通过远程下载create-electron-app创建electron项目</span></span><br><span class="line">npx electron . <span class="comment">#远程执行electron编译项目</span></span><br><span class="line">npx electron-packager <span class="comment">#打包</span></span><br><span class="line">npx electron-packager <span class="string">&#x27;项目路径&#x27;</span> <span class="string">&#x27;打包出来的位置&#x27;</span>  --asar <span class="comment">#用asar对源码打包</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Sh&quot;&gt;&lt;figure class=&quot;iseeu highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="开发" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Electron" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/Electron/"/>
    
    
  </entry>
  
  <entry>
    <title>gccException</title>
    <link href="http://example.com/2024/04/24/Re/C&amp;C++/gccException/"/>
    <id>http://example.com/2024/04/24/Re/C&amp;C++/gccException/</id>
    <published>2024-04-24T13:39:24.000Z</published>
    <updated>2024-04-25T05:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://solotzg.github.io/2023/09/04/system/cpp-exception/#C-Exception-Handling" >浅析 C++ 异常机制 | SOLOTZG <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://4nsw3r.top/2022/02/03/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0" >https://4nsw3r.top/2022/02/03/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();<span class="comment">//抛出异常,对象需要继承 exception 基类</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123; </span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//异常处理语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://solotzg.github.io/2023/09/04/system/cpp-exception/#C-Exception-Handling&quot; &gt;浅析 C++ 异常机制 | SOLOTZG &lt;i class=</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="C&amp;C++" scheme="http://example.com/categories/Re/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>ida调试</title>
    <link href="http://example.com/2024/04/17/Re/QEMU/ida%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2024/04/17/Re/QEMU/ida%E8%B0%83%E8%AF%95/</id>
    <published>2024-04-17T13:14:38.000Z</published>
    <updated>2024-04-17T13:14:38.000Z</updated>
    
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="QEMU" scheme="http://example.com/categories/Re/QEMU/"/>
    
    
  </entry>
  
</feed>
