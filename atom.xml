<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>runwu2204</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-05T05:05:18.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>runwu2204</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gdb</title>
    <link href="http://example.com/2023/08/05/Re/x86/gdb/"/>
    <id>http://example.com/2023/08/05/Re/x86/gdb/</id>
    <published>2023-08-05T04:36:52.000Z</published>
    <updated>2023-08-05T05:05:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>linux执行命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb</span><br></pre></td></tr></table></figure></div><p>安装peda</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda</span><br><span class="line">cd peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure></div><p>输入gdb验证peda是否安装成功(注意linux需要有python环境)</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb</span></span><br><span class="line">GNU gdb (Debian 13.2-1) 13.2</span><br><span class="line">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class="line"><span class="meta prompt_">gdb-peda$</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;linux执行命令&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Shell&quot;&gt;&lt;figure class=&quot;iseeu highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>缺失的快递信息</title>
    <link href="http://example.com/2023/08/04/%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%BF%AB%E9%80%92%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2023/08/04/%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%BF%AB%E9%80%92%E4%BF%A1%E6%81%AF/</id>
    <published>2023-08-03T16:24:46.000Z</published>
    <updated>2023-08-03T16:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>是个jpg图片,开始猜测是否是steghide隐写啥的，最后发现只需要改下图片长宽即可</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="E:\note\assets\image-20230804002550117.png"                      alt="image-20230804002550117"                ></p><p>此处只需要修改y坐标的大小即可,修改x坐标会让像素混乱，我是一个个试出来的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="E:\note\assets\image-20230804002654105.png"                      alt="image-20230804002654105"                ></p><p>改出来的结果如下</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="E:\note\assets\image-20230804002751170.png"                      alt="image-20230804002751170"                ></p><p>看着不太清晰(恼)试了几次才试出来flag</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;64e2844233108bce7bd4e214e1f99b36&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;是个jpg图片,开始猜测是否是steghide隐写啥的，最后发现只需要改下图片长宽即可&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
  </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Analyze</title>
    <link href="http://example.com/2023/08/03/Analyze/"/>
    <id>http://example.com/2023/08/03/Analyze/</id>
    <published>2023-08-03T15:16:52.000Z</published>
    <updated>2023-08-03T15:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>文件是一个pdf,只有下面这段话，猜测是base64</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VGhlIHBhc3N3b3JkIGlzIG5vdCBqdXN0IGFib3V0IGRlY29kaW5nLCBidXQgYWxzby</span><br><span class="line">BoYWNraW5nIHRoZSBaSVAh</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from base64 import *</span><br><span class="line"></span><br><span class="line">In [2]: b64decode(b&quot;VGhlIHBhc3N3b3JkIGlzIG5vdCBqdXN0IGFib3V0IGRlY29kaW5nLCBidXQgYWxzbyBoYWNraW5nIHRoZSBaSVAh&quot;)</span><br><span class="line">Out[2]: b&#x27;The password is not just about decoding, but also hacking the ZIP!&#x27;</span><br></pre></td></tr></table></figure></div><p>有个提示提到了zip猜测是有隐藏文件,用binwalk看一下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binwalk  text.pdf</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PDF document, version: &quot;1.3&quot;</span><br><span class="line">19205         0x4B05          Zip archive data, encrypted at least v2.0 to extract, compressed size: 76, uncompressed size: 66, name: password.txt</span><br><span class="line">19339         0x4B8B          Zip archive data, encrypted at least v2.0 to extract, compressed size: 458952, uncompressed size: 470737, name: fun.png-stego.png</span><br><span class="line">478547        0x74D53         End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure></div><p>有个有密码的zip里面塞了txt和png，尝试跑了低位数的爆破，没有爆出来，结合”The password is not just about decoding, but also hacking the ZIP!”猜测可以用明文攻击</p><p>将”The password is not just about decoding, but also hacking the ZIP!”放到一个新建的password.txt里面并压缩查看其crc32，是跟压缩文件里的password.txt的crc32是一样的可以通过明文攻击获取密钥</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="E:\note\assets\image-20230803232227566.png"                      alt="image-20230803232227566"                ></p><p>此处稍微遇到了一点问题，因为360压缩模式跟winrar压缩模式可能有些不同导致我之前用360的压缩包无法跑通明文攻击</p><p>攻击结果如下 获得了密钥cr4ck!*</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="E:\note\assets\image-20230803232500344.png"                      alt="image-20230803232500344"                ></p><p>解压后有个fun.png-stego.png的图片,看名字就是隐写的png</p><p>用zsteg跑一下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">zsteg fun.png-stego.png</span></span><br><span class="line">b1,rgb,lsb,xy       .. text: &quot;flag&#123;abae93fb-c31f-aeaf-91fc-0f1d42ba26e4&#125;&quot;</span><br><span class="line">b1,bgr,lsb,xy       .. &lt;wbStego size=32904, ext=&quot;\x00=)&quot;, data=&quot;\xC1=~\xC19\f\xD1b^\xD0&quot;..., even=false&gt;</span><br><span class="line">b1,bgr,msb,xy       .. file: 0421 Alliant compact executable not stripped</span><br><span class="line">b2,rgb,msb,xy       .. text: &quot;uwUUUUUU&#125;&#125;&#125;_&#125;&quot;</span><br><span class="line">b2,bgr,msb,xy       .. text: &quot;WWWUUUUU&quot;</span><br><span class="line">b2,abgr,msb,xy      .. text: [&quot;W&quot; repeated 8 times]</span><br><span class="line">b3,abgr,msb,xy      .. file: MPEG ADTS, layer I, v2, 112 kbps, Monaural</span><br><span class="line">b4,rgb,msb,xy       .. text: [&quot;w&quot; repeated 12 times]</span><br><span class="line">b4,bgr,msb,xy       .. text: [&quot;w&quot; repeated 12 times]</span><br></pre></td></tr></table></figure></div><p>获得了flag{abae93fb-c31f-aeaf-91fc-0f1d42ba26e4}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文件是一个pdf,只有下面这段话，猜测是base64&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Plaintext&quot;&gt;&lt;figure class=&quot;iseeu highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BlackAndWhite</title>
    <link href="http://example.com/2023/08/03/BlackAndWhite/"/>
    <id>http://example.com/2023/08/03/BlackAndWhite/</id>
    <published>2023-08-03T15:00:39.000Z</published>
    <updated>2023-08-03T15:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>附件是一堆黑白图片共336个，应该不是黑白图片组成的二维码，应该就是二进制编码，尝试将其转化为0和1</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="E:\note\assets\image-20230803230901379.png"                      alt="image-20230803230901379"                ></p><p>脚本如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">tmp=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">336</span>):</span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">rf&#x27;./target/<span class="subst">&#123;i&#125;</span>.png&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#遍历所有图像</span></span><br><span class="line">        tmp.append(f.getpixel((<span class="number">5</span>, <span class="number">5</span>)))<span class="comment">#取坐标为5，5的像素的颜色</span></span><br><span class="line">str1=<span class="string">&#x27;&#x27;</span></span><br><span class="line">str2=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">    <span class="keyword">if</span>(i==(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)):<span class="comment">#因为不知道其是0还是1就都列举一遍</span></span><br><span class="line">        str1+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        str2+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str1+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        str2+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="comment"># 保存图片到本地</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(str1,<span class="number">2</span>)),long_to_bytes(<span class="built_in">int</span>(str2,<span class="number">2</span>)))<span class="comment">#将其转化为数字然后转化为bytes型输出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>结果如下,获得了flag</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;flag&#123;baaf013d-f3fa-bcbe-00fb-1e1a34bb2af1&#125;&#x27; b&#x27;\x99\x93\x9e\x98\x84\x9d\x9e\x9e\x99\xcf\xce\xcc\x9b\xd2\x99\xcc\x99\x9e\xd2\x9d\x9c\x9d\x9a\xd2\xcf\xcf\x99\x9d\xd2\xce\x9a\xce\x9e\xcc\xcb\x9d\x9d\xcd\x9e\x99\xce\x82&#x27;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;附件是一堆黑白图片共336个，应该不是黑白图片组成的二维码，应该就是二进制编码，尝试将其转化为0和1&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tmp - 副本</title>
    <link href="http://example.com/2023/08/02/tmp%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://example.com/2023/08/02/tmp%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2023-08-02T09:20:54.000Z</published>
    <updated>2023-08-02T10:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>主函数，此处argc作为参数计数,argv作为参数传递的，此时作为argv传递的就是key这个字符串</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">jumble</span><span class="params">(<span class="type">char</span> a1)</span><span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+0h] [rbp-4h]</span></span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [rsp+0h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = a1;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">96</span> )</span><br><span class="line">    v2 = a1 + <span class="number">9</span>;</span><br><span class="line">  v3 = <span class="number">2</span> * (v2 % <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; <span class="number">15</span> )</span><br><span class="line">    ++v3;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> __int8)v3;<span class="comment">//此处只修改了当前位置的字符串，没有修改其他位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// dl</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-E4h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-E0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">104</span>]; <span class="comment">// [rsp+90h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+F8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( argc &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strncpy</span>(dest, argv[<span class="number">1</span>], <span class="number">0x64</span>uLL);<span class="comment">//复制字符串</span></span><br><span class="line">    dest[<span class="number">100</span>] = <span class="number">0</span>;<span class="comment">//给字符串末尾留个\00作为字符串结尾</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; valid_char(dest[i]); ++i )<span class="comment">//valid_char只是判断字符是否符合要求,概括为要求字符属于47~57或96~102之间</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i )<span class="comment">//i&gt;0的情况,加密后面的字符,每个字符与上一个字符有关</span></span><br><span class="line">      &#123;</span><br><span class="line">        v4 = jumble((<span class="type">unsigned</span> <span class="type">int</span>)dest[i]);</span><br><span class="line">        v5 = s1[i - <span class="number">1</span>] + v4;</span><br><span class="line">        v6 = (<span class="type">unsigned</span> <span class="type">int</span>)((s1[i - <span class="number">1</span>] + v4) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>;</span><br><span class="line">        s1[i] = ((v6 + v5) &amp; <span class="number">0xF</span>) - v6;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span><span class="comment">//i=0的情况,加密第一个字符</span></span><br><span class="line">      &#123;</span><br><span class="line">        s1[<span class="number">0</span>] = (<span class="type">char</span>)jumble((<span class="type">unsigned</span> <span class="type">int</span>)dest[<span class="number">0</span>]) % <span class="number">16</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; i; ++j )</span><br><span class="line">      s1[j] += <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">100</span><span class="comment">//满足100个合法字符</span></span><br><span class="line">      &amp;&amp; !<span class="built_in">strncmp</span>(<span class="comment">//满足加密后的字符跟&quot;occ..................&quot;相等就代表key正确</span></span><br><span class="line">            s1,</span><br><span class="line">            <span class="string">&quot;occdpnkibjefihcgjanhofnhkdfnabmofnopaghhgnjhbkalgpnpdjonblalfciifiimkaoenpealibelmkdpbdlcldicplephbo&quot;</span>,</span><br><span class="line">            <span class="number">0x64</span>uLL) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You got the key, congrats! Now xor it with the flag!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid key!&quot;</span>);<span class="comment">//key错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;USAGE: %s [KEY]\n&quot;</span>, *argv);<span class="comment">//没有传参就输出这个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>此处的加密也是符合暴力求解的条件的,第一个字符是直接用jumble加密,第二个字符是通过jumble和上一个字符加密,第三个跟第二个是一样的.</p><p>只要第一个字符正确了，后面的经过暴力求解也会正确,所以可以通过暴力算法逐步计算是否正确</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; valid_char(dest[i]); ++i )<span class="comment">//valid_char只是判断字符是否符合要求,概括为要求字符属于47~57或96~102之间</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( i )<span class="comment">//i&gt;0的情况,加密后面的字符,每个字符与上一个字符有关</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = jumble((<span class="type">unsigned</span> <span class="type">int</span>)dest[i]);</span><br><span class="line">    v5 = s1[i - <span class="number">1</span>] + v4;</span><br><span class="line">    v6 = (<span class="type">unsigned</span> <span class="type">int</span>)((s1[i - <span class="number">1</span>] + v4) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>;</span><br><span class="line">    s1[i] = ((v6 + v5) &amp; <span class="number">0xF</span>) - v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//i=0的情况,加密第一个字符</span></span><br><span class="line">  &#123;</span><br><span class="line">    s1[<span class="number">0</span>] = (<span class="type">char</span>)jumble((<span class="type">unsigned</span> <span class="type">int</span>)dest[<span class="number">0</span>]) % <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>断点的地址计算</p><p>断点只需要停下来用于提取数据就行,就停在strncmp函数调用前即可,就是call strncmp之前0x09B3即可,这个是它的物理地址,需要与gdb地址进行换算</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000000099</span>D                 cmp     [rbp+var_E8], <span class="number">64</span>h ; <span class="string">&#x27;d&#x27;</span></span><br><span class="line">.text:<span class="number">00000000000009</span>A4                 jnz     <span class="type">short</span> loc_9C6</span><br><span class="line">.text:<span class="number">00000000000009</span>A6                 mov     eax, [rbp+var_E8]</span><br><span class="line">.text:<span class="number">00000000000009</span>AC                 movsxd  rdx, eax        ; n</span><br><span class="line">.text:<span class="number">00000000000009</span>AF                 lea     rax, [rbp+s1]</span><br><span class="line">.text:<span class="number">00000000000009B</span>3                 lea     rsi, s2         ; <span class="string">&quot;occdpnkibjefihcgjanhofnhkdfnabmofnopagh&quot;</span>...</span><br><span class="line">.text:<span class="number">00000000000009B</span>A                 mov     rdi, rax        ; s1</span><br><span class="line">.text:<span class="number">00000000000009B</span>D                 call    _strncmp</span><br><span class="line">.text:<span class="number">00000000000009</span>C2                 test    eax, eax</span><br><span class="line">.text:<span class="number">00000000000009</span>C4                 jz      <span class="type">short</span> loc_9D9</span><br></pre></td></tr></table></figure></div><p>gdb停在main函数处,地址为0x55555540080e，</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   <span class="number">0x55555540080d</span> &lt;jumble+<span class="number">77</span>&gt;:  ret</span><br><span class="line">   <span class="number">0x55555540080e</span> &lt;main&gt;:       push   rbp</span><br><span class="line">   <span class="number">0x55555540080f</span> &lt;main+<span class="number">1</span>&gt;:     mov    rbp,rsp</span><br><span class="line">=&gt; <span class="number">0x555555400812</span> &lt;main+<span class="number">4</span>&gt;:     sub    rsp,<span class="number">0x100</span></span><br><span class="line">   <span class="number">0x555555400819</span> &lt;main+<span class="number">11</span>&gt;:    mov    DWORD PTR [rbp<span class="number">-0xf4</span>],edi</span><br><span class="line">   <span class="number">0x55555540081f</span> &lt;main+<span class="number">17</span>&gt;:    mov    QWORD PTR [rbp<span class="number">-0x100</span>],rsi</span><br><span class="line">   <span class="number">0x555555400826</span> &lt;main+<span class="number">24</span>&gt;:    mov    rax,QWORD PTR fs:<span class="number">0x28</span></span><br><span class="line">   <span class="number">0x55555540082f</span> &lt;main+<span class="number">33</span>&gt;:    mov    QWORD PTR [rbp<span class="number">-0x8</span>],rax</span><br></pre></td></tr></table></figure></div><p>ida的main函数物理地址为0x080E</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00000000000080E ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:000000000000080E                 public main</span><br><span class="line">.text:000000000000080E main            proc near               ; DATA XREF: _start+1D↑o</span><br><span class="line">.text:000000000000080E</span><br><span class="line">.text:000000000000080E var_100         = qword ptr -100h</span><br><span class="line">.text:000000000000080E var_F4          = dword ptr -0F4h</span><br><span class="line">.text:000000000000080E var_E8          = dword ptr -0E8h</span><br><span class="line">.text:000000000000080E var_E4          = dword ptr -0E4h</span><br><span class="line">.text:000000000000080E dest            = byte ptr -0E0h</span><br><span class="line">.text:000000000000080E var_7C          = byte ptr -7Ch</span><br><span class="line">.text:000000000000080E s1              = byte ptr -70h</span><br><span class="line">.text:000000000000080E var_8           = qword ptr -8</span><br><span class="line">.text:000000000000080E</span><br><span class="line">.text:000000000000080E ; __unwind &#123;</span><br><span class="line">.text:000000000000080E                 push    rbp</span><br></pre></td></tr></table></figure></div><p>通过地址换算</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmp的gdb地址=main函数gdb地址-main函数物理地址+cmp的物理地址</span><br><span class="line">cmp=0x55555540080e-0x080E+0x09B3</span><br><span class="line">cmp=0x5555554009b3</span><br></pre></td></tr></table></figure></div><p>脚本如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">key = <span class="built_in">list</span>(<span class="string">&quot;ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff&quot;</span>)</span><br><span class="line">cmp=<span class="string">&quot;occdpnkibjefihcgjanhofnhkdfnabmofnopaghhgnjhbkalgpnpdjonblalfciifiimkaoenpealibelmkdpbdlcldicplephbo&quot;</span></span><br><span class="line">peda.execute(<span class="string">&#x27;file otp&#x27;</span>)<span class="comment">#加载otp程序</span></span><br><span class="line">peda.set_breakpoint(<span class="string">&#x27;0x5555554009b3&#x27;</span>)<span class="comment">#在传入加密后字符串的时候打断点</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">103</span>, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (( x &gt; <span class="number">47</span> <span class="keyword">and</span> x &lt;= <span class="number">57</span> )<span class="keyword">or</span> (x &gt; <span class="number">96</span> <span class="keyword">and</span> x &lt;= <span class="number">102</span>)): <span class="comment">#遍历字符</span></span><br><span class="line">            character = <span class="built_in">chr</span>(x)</span><br><span class="line">            key[y] = character<span class="comment">#给flag赋值</span></span><br><span class="line">            peda.execute(<span class="string">&quot;set args \&quot;%s\&quot;&quot;</span> %(<span class="string">&quot;&quot;</span>.join(key))) <span class="comment">#将字符串作为args传参</span></span><br><span class="line">            peda.execute(<span class="string">&quot;r&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (re.findall(<span class="string">r&#x27;&quot;([^&quot;]*)&quot;&#x27;</span>,peda.execute_redirect(<span class="string">&quot;x/s $rax&quot;</span>))[<span class="number">0</span>][y]==cmp[y]):<span class="comment">#如果当前字符满足要求,就填入跳过本次循环让y+1 </span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found character &quot;</span> + character + <span class="string">&quot; for position &quot;</span> + <span class="built_in">str</span>(y))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key:&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(key))</span><br><span class="line">key=<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(key),<span class="number">16</span>)<span class="comment">#&quot;720867e7c4d89fd29be5bb459c1498d1b4888380fb675c3ddc7123af25ad5e30e9027373c1a6dec9b87c6114bc4a5e6cd45e&quot;，此处为算出来的key(因为要进行异或操作所以得从字符串转化为数字)</span></span><br><span class="line">flag=<span class="number">0x02610488878cd9a9f890c831ac79c7bbc1e5e1ecc8140309ae424ddb7a990157d94d172cf0c2ed88e74d547184733d0de023</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag:&#x27;</span>+<span class="built_in">hex</span>(key^flag))<span class="comment">#将flag文本中的数据与计算出来的key进行异或，通过hex函数转化为16进制字符串</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主函数，此处argc作为参数计数,argv作为参数传递的，此时作为argv传递的就是key这个字符串&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;C&quot;&gt;&lt;figure class=&quot;iseeu highlight c&quot;&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tmp</title>
    <link href="http://example.com/2023/08/01/tmp/"/>
    <id>http://example.com/2023/08/01/tmp/</id>
    <published>2023-08-01T07:17:26.000Z</published>
    <updated>2023-08-01T13:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要的函数</p><p>这个函数相当于main函数，有个输入比较重要</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_9AF</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp-8h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp-4h] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">char</span> *src; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  s = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">0x200</span>u, <span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input the flag: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">512</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v0 = (<span class="type">char</span> *)strnlen(aZNh, <span class="number">512</span>, v2, v3);</span><br><span class="line">  src = (<span class="type">char</span> *)sub_82B(v0, (<span class="type">size_t</span>)v0);</span><br><span class="line">  sub_7C2((<span class="type">int</span>)src, <span class="number">1u</span>, <span class="number">1</span>);<span class="comment">//注意此处的第三个参数是1，</span></span><br><span class="line">  <span class="keyword">if</span> ( sub_8C4(src, n) == <span class="number">1</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Incorrect.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_8C4</span><span class="params">(<span class="type">char</span> *src, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  dest = (<span class="type">char</span> *)<span class="built_in">calloc</span>(n + <span class="number">1</span>, <span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">strncpy</span>(dest, src, n);</span><br><span class="line">  sub_7C2((<span class="type">int</span>)dest, n, <span class="number">-1</span>);<span class="comment">//混淆操作将dest进行混淆,这第三个参数是-1</span></span><br><span class="line">  v6 = (<span class="type">char</span> *)<span class="built_in">calloc</span>(n + <span class="number">1</span>, <span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">strncpy</span>(v6, aZNh, n);</span><br><span class="line">  sub_7C2((<span class="type">int</span>)v6, n, <span class="number">-1</span>);<span class="comment">//混淆操作将v6进行混淆</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;checking solution...&quot;</span>);</span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dest[i] != v6[i] )<span class="comment">//两者值不相同则代表flag错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************aZNh数据************************/</span></span><br><span class="line">.data:<span class="number">00002008</span> aZNh            db <span class="string">&#x27;z.nh&#x27;</span>               ; DATA XREF: sub_8C4+<span class="number">6</span>D↑o</span><br><span class="line">.data:<span class="number">00002008</span>                                         ; sub_9AF+<span class="number">6</span>A↑o</span><br><span class="line">.data:<span class="number">0000200</span>C                 db  <span class="number">1</span>Dh</span><br><span class="line">.data:<span class="number">0000200</span>D                 db  <span class="number">65</span>h ; e</span><br><span class="line">.data:<span class="number">0000200</span>E                 db  <span class="number">16</span>h</span><br><span class="line">.data:<span class="number">0000200F</span>                 db  <span class="number">7</span>Ch ; |</span><br><span class="line">.data:<span class="number">00002010</span>                 db  <span class="number">6</span>Dh ; m</span><br><span class="line">.data:<span class="number">00002011</span>                 db  <span class="number">43</span>h ; C</span><br><span class="line">.data:<span class="number">00002012</span>                 db  <span class="number">6F</span>h ; o</span><br><span class="line">.data:<span class="number">00002013</span>                 db  <span class="number">36</span>h ; <span class="number">6</span></span><br><span class="line">.data:<span class="number">00002014</span>                 db  <span class="number">3</span>Eh ; &gt;</span><br><span class="line">.data:<span class="number">00002015</span>                 db  <span class="number">62</span>h ; b</span><br><span class="line">.data:<span class="number">00002016</span>                 db  <span class="number">15</span>h</span><br><span class="line">.data:<span class="number">00002017</span>                 db  <span class="number">12</span>h</span><br><span class="line">.data:<span class="number">00002018</span>                 db  <span class="number">43</span>h ; C</span><br><span class="line">.data:<span class="number">00002019</span>                 db  <span class="number">31</span>h ; <span class="number">1</span></span><br><span class="line">.data:<span class="number">0000201</span>A                 db  <span class="number">40</span>h ; @</span><br><span class="line">.data:<span class="number">0000201B</span>                 db  <span class="number">66</span>h ; f</span><br><span class="line">.data:<span class="number">0000201</span>C                 db  <span class="number">58</span>h ; X</span><br><span class="line">.data:<span class="number">0000201</span>D                 db    <span class="number">1</span></span><br><span class="line">.data:<span class="number">0000201</span>E                 db  <span class="number">58</span>h ; X</span><br><span class="line">.data:<span class="number">0000201F</span>                 db  <span class="number">65</span>h ; e</span><br><span class="line">.data:<span class="number">00002020</span>                 db  <span class="number">62</span>h ; b</span><br><span class="line">.data:<span class="number">00002021</span>                 db  <span class="number">6</span>Dh ; m</span><br><span class="line">.data:<span class="number">00002022</span>                 db  <span class="number">53</span>h ; S</span><br><span class="line">.data:<span class="number">00002023</span>                 db  <span class="number">30</span>h ; <span class="number">0</span></span><br><span class="line">.data:<span class="number">00002024</span>                 db  <span class="number">66</span>h ; f</span><br><span class="line">.data:<span class="number">00002025</span>                 db  <span class="number">17</span>h</span><br><span class="line">.data:<span class="number">00002025</span> _data           ends</span><br></pre></td></tr></table></figure></div><p>下面是混淆的函数</p><p>a3为正数的时候，就是从a2-1一直换到1</p><p>a3为负数的时候就是从1一直换到a2-1</p><p>sub_751为交换固定位置的函数</p><p>当a3通过正数交换再通过负数交换就是本身了</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_7C2</span><span class="params">(<span class="type">char</span> *a1, <span class="type">unsigned</span> <span class="type">int</span> a2, <span class="type">int</span> a3)</span><span class="comment">//此处a2=0x1e</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [esp+8h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">0</span> )<span class="comment">//参数为-1时，从后往前进行交换</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = a2 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = a2 - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">      result = sub_751(a1, a2, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//参数为1时，从前往后进行交换与前面的相当于逆运算了</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">1</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      result = j;</span><br><span class="line">      <span class="keyword">if</span> ( a2 &lt;= j )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_751(a1, a2, j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_751</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+Bh] [ebp-5h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i += a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = a2 - a3 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v4 = a1[i];</span><br><span class="line">    a1[i] = a1[i - <span class="number">1</span> + a3];<span class="comment">//与距离长度为a3-1的数据进行交换</span></span><br><span class="line">    a1[i - <span class="number">1</span> + a3] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最后的校验函数,下面的注释所指的flag是经过了一步sub_82B加密的，但此处是暴力破解所以不用管加密函数是啥</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_565A88C4</span><span class="params">(<span class="type">char</span> *src, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">char</span> *a1; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  dest = (<span class="type">char</span> *)<span class="built_in">calloc</span>(n + <span class="number">1</span>, <span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">strncpy</span>(dest, src, n);<span class="comment">//输入的经过正数交换的flag复制给dest</span></span><br><span class="line">  sub_565A87C2(dest, n, <span class="number">-1</span>);<span class="comment">//将dest经过一次负数交换</span></span><br><span class="line">  a1 = (<span class="type">char</span> *)<span class="built_in">calloc</span>(n + <span class="number">1</span>, <span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">strncpy</span>(a1, aZNh, n);<span class="comment">//复制校验的字符串给a1</span></span><br><span class="line">  sub_565A87C2(a1, n, <span class="number">-1</span>);<span class="comment">//将a1进行一次负数交换</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;checking solution...&quot;</span>);</span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dest[i] != a1[i] )<span class="comment">//如果不等于就直接输出Incorrect.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>所以只需要自己输入flag，然后能够通过dest[i] !&#x3D; a1[i]的判断就代表flag是对的</p><p>此处对dest[i] !&#x3D; a1[i]的判断就是cmp dl,al这个汇编代码,只需要dl等于al就可以确定当前的字符是正确的。</p><p>下面的peda.set_breakpoint()里面的参数就是cmp dl,al这个代码在程序中的虚拟地址，如果不运行程序是不知道的</p><p>注意此处还有个地址换算的问题</p><p>在gdb中我的fgets函数调用位置在</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202308012128657.png"                      alt="image-20230801212846593"                ></p><p>在ida中反编译的调用地址在</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202308012129690.png"                      alt="image-20230801212920593"                ></p><p>可以通过换算来获得cmp的函数地址位置来打相应的断点</p><p>0x56555a0b-0xa0b+0x098E&#x3D;0x5655598e</p><p>此为cmp指令在gdb内的地址，ida实际运行地址可能不一样，因为反编译模式不一样</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="built_in">list</span>(<span class="string">&quot;picoCTF&#123;BBBBBBBBBBBBBBBBBBBBB&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">peda.execute(<span class="string">&#x27;file brute&#x27;</span>)<span class="comment">#加载brute程序</span></span><br><span class="line">peda.set_breakpoint(<span class="string">&#x27;0x5655598e&#x27;</span>)<span class="comment">#在cmp dl,al处上断点</span></span><br><span class="line">peda.execute(<span class="string">&quot;run &lt; &quot;</span> + <span class="string">&quot;&lt;(python3 -c &#x27;print(\&quot;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(flag) + <span class="string">&quot;\&quot;)&#x27;)&quot;</span>) <span class="comment">#将flag传给程序,就相当于我们的输入操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">1</span>):</span><br><span class="line">    al = peda.getreg(<span class="string">&quot;eax&quot;</span>)<span class="comment">#获取al的值,32位程序eax是4字节,al是1字节,此处没多大区别，因为前面赋值的时候是对eax赋值</span></span><br><span class="line">    dl = peda.getreg(<span class="string">&quot;edx&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (al == dl):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pass : &quot;</span> + <span class="built_in">str</span>(y+<span class="number">1</span>))</span><br><span class="line">        peda.execute(<span class="string">&quot;c&quot;</span>)<span class="comment">#继续运行直到下一个断点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">123</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= <span class="number">57</span> <span class="keyword">or</span> (x &gt;= <span class="number">64</span> <span class="keyword">and</span> x &lt;= <span class="number">90</span>) <span class="keyword">or</span> (x == <span class="number">95</span>) <span class="keyword">or</span> (x &gt;= <span class="number">97</span> <span class="keyword">and</span> x &lt;= <span class="number">122</span>) ): <span class="comment">#遍历字符</span></span><br><span class="line">                character = <span class="built_in">chr</span>(x)</span><br><span class="line">                flag[y] = character<span class="comment">#给flag赋值</span></span><br><span class="line">                peda.execute(<span class="string">&quot;run &lt; &quot;</span> + <span class="string">&quot;&lt;(python3 -c &#x27;print(\&quot;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(flag) + <span class="string">&quot;\&quot;)&#x27;)&quot;</span>)<span class="comment">#重新运行程序将flag传给程序,就相当于我们的输入操作</span></span><br><span class="line">                <span class="keyword">for</span> continueTill <span class="keyword">in</span> <span class="built_in">range</span>(y):<span class="comment">#此处c命令是继续运行，直到程序有断点,此处的循环就是跳过之前已经正确字符的判断</span></span><br><span class="line">                    peda.execute(<span class="string">&quot;c&quot;</span>)</span><br><span class="line"></span><br><span class="line">                al = peda.getreg(<span class="string">&quot;eax&quot;</span>)</span><br><span class="line">                dl = peda.getreg(<span class="string">&quot;edx&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> (al == dl):<span class="comment">#如果当前al=dl则字符串符合要求</span></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;found character &quot;</span> + character + <span class="string">&quot; for position &quot;</span> + <span class="built_in">str</span>(y))</span><br><span class="line">                    peda.execute(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要的函数&lt;/p&gt;
&lt;p&gt;这个函数相当于main函数，有个输入比较重要&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;C&quot;&gt;&lt;figure class=&quot;iseeu highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>鹏城杯 2022简单取证</title>
    <link href="http://example.com/2023/07/28/CTF%20WP/Misc/%E9%B9%8F%E5%9F%8E%E6%9D%AF%202022%E7%AE%80%E5%8D%95%E5%8F%96%E8%AF%81/"/>
    <id>http://example.com/2023/07/28/CTF%20WP/Misc/%E9%B9%8F%E5%9F%8E%E6%9D%AF%202022%E7%AE%80%E5%8D%95%E5%8F%96%E8%AF%81/</id>
    <published>2023-07-28T11:43:06.000Z</published>
    <updated>2023-07-28T12:03:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[<a class="link"   href="https://www.nssctf.cn/problem/2411" >鹏城杯 2022]简单取证 | NSSCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>附件是一个raw文件,一般是内存镜像用vol3看一下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vol -f file.raw windows.info</span></span><br><span class="line">Volatility 3 Framework 2.4.1</span><br><span class="line">Progress:  100.00               PDB scanning finished</span><br><span class="line">Variable        Value</span><br><span class="line"></span><br><span class="line">Kernel Base     0x804d8000</span><br><span class="line">DTB     0xb37000</span><br><span class="line">Symbols file:///home/wrwrw/.local/lib/python3.11/site-packages/volatility3/symbols/windows/ntkrnlpa.pdb/30B5FB31AE7E4ACAABA750AA241FF331-1.json.xz</span><br><span class="line">Is64Bit False</span><br><span class="line">IsPAE   True</span><br><span class="line">layer_name      0 WindowsIntelPAE</span><br><span class="line">memory_layer    1 FileLayer</span><br><span class="line">KdDebuggerDataBlock     0x80546ae0</span><br><span class="line">NTBuildLab      2600.xpsp.080413-2111</span><br><span class="line">CSDVersion      3</span><br><span class="line">KdVersionBlock  0x80546ab8</span><br><span class="line">Major/Minor     15.2600</span><br><span class="line">MachineType     332</span><br><span class="line">KeNumberProcessors      1</span><br><span class="line">SystemTime      2022-06-20 13:00:12</span><br><span class="line">NtSystemRoot    C:\WINDOWS</span><br><span class="line">NtProductType   NtProductWinNt</span><br><span class="line">NtMajorVersion  5</span><br><span class="line">NtMinorVersion  1</span><br><span class="line">PE MajorOperatingSystemVersion  5</span><br><span class="line">PE MinorOperatingSystemVersion  1</span><br><span class="line">PE Machine      332</span><br><span class="line">PE TimeDateStamp        Sun Apr 13 18:31:06 2008</span><br></pre></td></tr></table></figure></div><p>是windows xp系统的，中文版的桌面叫做“桌面”而不是“Desktop”,直接搜索对应的文件</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vol -f file.raw windows.filescan |grep 桌面</span></span><br><span class="line">0x2072ea0  100.0\Documents and Settings\Administrator\桌面\51763-4FE71AEA7-20220620-130010.raw  112</span><br><span class="line">0x20dd608       \Documents and Settings\Administrator\桌面\DumpIt.exe   112</span><br><span class="line">0x2162df8       \Documents and Settings\Administrator\桌面      112</span><br><span class="line">0x224e028       \Documents and Settings\Administrator\桌面      112</span><br><span class="line">0x2325028       \Documents and Settings\Administrator\桌面\secret.jpg   112</span><br><span class="line">0x23ac178       \Documents and Settings\Administrator\桌面      112</span><br><span class="line">0x23d5960       \Documents and Settings\Administrator\桌面\DumpIt.exe   112</span><br><span class="line">0x240d8d8       \Documents and Settings\All Users\桌面  112</span><br></pre></td></tr></table></figure></div><p>有个secret.jpg，dump下来</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vol -f file.raw windows.dump --physaddr 0x2325028</span></span><br></pre></td></tr></table></figure></div><p>发现该文件其实是base64文本的文本文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307281952101.png"                      alt="image-20230728195235912"                ></p><p>解码后发现PK字样，猜测是压缩包直接用脚本解压后发现无法解压，用010editor打开，发现50 4b 03 04在最后面而且是反过来的，更改脚本进行反序输出</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;file.0x2325028.0x81fc6610.DataSectionObject.secret.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    arr=f.read()</span><br><span class="line">    arr=b64decode(arr)[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;a.zip&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> g:</span><br><span class="line">        g.write(arr)</span><br></pre></td></tr></table></figure></div><p>成功输出zip，但发现有密码</p><p>对raw文件用strings搜索相应字符串,发现一个疑似密码的字段</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">strings file.raw |grep  password</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以上省略</span></span><br><span class="line">echo password = 62b041223bb9a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下省略</span></span><br></pre></td></tr></table></figure></div><p>解压后是一个文本,都是以数对形式存在，猜测是坐标，用于打印像素,且该文本的末尾是349 349 猜测是350*350的图片</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307281957439.png"                      alt="image-20230728195731372"                ></p><p>脚本如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;a~\flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pixels=f.read().splitlines()</span><br><span class="line">width = <span class="number">350</span></span><br><span class="line">height = <span class="number">350</span></span><br><span class="line">result=[]</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pixels:</span><br><span class="line">    tmp=i.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    img.putpixel((<span class="built_in">int</span>(tmp[<span class="number">0</span>]),<span class="built_in">int</span>(tmp[<span class="number">1</span>])),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))<span class="comment">#以白色打印对应像素,因为默认背景为黑色</span></span><br><span class="line"><span class="comment"># 保存图片到本地</span></span><br><span class="line">img.save(<span class="string">r&#x27;a~\output.png&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>成功输出png，是一个二维码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307282003576.png"                      alt="image-20230728200300506"                ></p><p>扫描后得到了flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a class=&quot;link&quot;   href=&quot;https://www.nssctf.cn/problem/2411&quot; &gt;鹏城杯 2022]简单取证 | NSSCTF &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square f</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Misc" scheme="http://example.com/categories/CTF-WP/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>kali John破解密码</title>
    <link href="http://example.com/2023/07/28/Misc/kali%20John%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/"/>
    <id>http://example.com/2023/07/28/Misc/kali%20John%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/</id>
    <published>2023-07-28T08:49:20.000Z</published>
    <updated>2023-07-28T09:10:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><h2 id="使用相应的john获取对应文件的密码hash"><a href="#使用相应的john获取对应文件的密码hash" class="headerlink" title="使用相应的john获取对应文件的密码hash"></a>使用相应的john获取对应文件的密码hash</h2><p>此处以破解office的密码为例</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">office2john 从渗透看取证.pptx<span class="comment">#其会输出对应的密码hash</span></span></span><br><span class="line"></span><br><span class="line">从渗透看取证证.pptx:$office$*2007*20*128*16*ae5cec7759d56eba49f6e923a4657c6c*5c91c78a0990d6c1791b3d6577056ada*a1b73a76fb87442b4ecc8f9b3702784312f8a7e2 </span><br></pre></td></tr></table></figure></div><p>john破解一般读取的是文本文件内的hash，所以用管道符号输出至文件</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">office2john 从渗透看取证.pptx<span class="comment">#其会输出对应的密码hash &gt; a</span></span></span><br></pre></td></tr></table></figure></div><h2 id="使用john来破解对应的密码hash"><a href="#使用john来破解对应的密码hash" class="headerlink" title="使用john来破解对应的密码hash"></a>使用john来破解对应的密码hash</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">john a --wordlist=pass.txt a</span></span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password hash (Office, 2007/2010/2013 [SHA1 256/256 AVX2 8x / SHA512 256/256 AVX2 4x AES])</span><br><span class="line">Cost 1 (MS Office version) is 2007 for all loaded hashes</span><br><span class="line">Cost 2 (iteration count) is 50000 for all loaded hashes</span><br><span class="line">Will run 12 OpenMP threads</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">287fuweiuhfiute  (从渗透看取证.pptx)</span><br><span class="line">1g 0:00:00:00 DONE (2023-07-28 16:32) 16.66g/s 4566p/s 4566c/s 4566C/s !@#59560955..quanzhshfnsdgsdf</span><br><span class="line">Warning: passwords printed above might not be all those cracked</span><br><span class="line">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class="line">Session completed.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上面的<span class="string">&quot;287fuweiuhfiute&quot;</span>即为密码</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本流程&quot;&gt;&lt;a href=&quot;#基本流程&quot; class=&quot;headerlink&quot; title=&quot;基本流程&quot;&gt;&lt;/a&gt;基本流程&lt;/h1&gt;&lt;h2 id=&quot;使用相应的john获取对应文件的密码hash&quot;&gt;&lt;a href=&quot;#使用相应的john获取对应文件的密码hash&quot;</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>pythonz3</title>
    <link href="http://example.com/2023/07/27/Re/pythonz3/pythonz3/"/>
    <id>http://example.com/2023/07/27/Re/pythonz3/pythonz3/</id>
    <published>2023-07-27T15:48:30.000Z</published>
    <updated>2023-07-27T15:51:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档<a class="link"   href="https://z3prover.github.io/api/html/namespacez3py.html?spm=a2c6h.12873639.article-detail.7.5e5c2666btxxry" >Z3: z3py Namespace Reference (z3prover.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h1><p>其分为整型(Int)，实型(Real)和向量(BitVec)</p><p>下面的类构造器中的ctx&#x3D;None(默认的上下文)表示该变量在python全局都起作用，可以直接传给Solver类用于求解,所以一般也不用标明ctx&#x3D;xxx这种的直接调用Int(name)构造器即可</p><p>ctx&#x3D;一个context对象,即可创建独立的上下文，这个不太重要，具体可见<a class="link"   href="https://www.cnblogs.com/aomi/p/7353869.html" >python的上下文管理（context）（1） - 很大很老实 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="整形-int"><a href="#整形-int" class="headerlink" title="整形(int)"></a>整形(int)</h2><p>不是c中具有上下限的整形而是数学意义上的整数</p><p>创建方式</p><ol><li>Int(name, ctx&#x3D;None)，创建一个整数变量，name是名字</li><li>Ints (names, ctx&#x3D;None)，创建多个整数变量，names是空格分隔名字</li><li>IntVal (val, ctx&#x3D;None)，创建一个整数常量，有初始值，没名字。</li></ol><h2 id="实形-real"><a href="#实形-real" class="headerlink" title="实形(real)"></a>实形(real)</h2><p>是数学意义上的实数</p><p>创建方式</p><ol><li>real(name, ctx&#x3D;None)，创建一个实变量，name是名字</li><li>reals (names, ctx&#x3D;None)，创建多个实变量，names是空格分隔名字</li><li>realVal (val, ctx&#x3D;None)，创建一个实常量，有初始值，没名字。</li></ol><h2 id="向量-BitVec"><a href="#向量-BitVec" class="headerlink" title="向量(BitVec)"></a>向量(BitVec)</h2><p>数学意义上的向量</p><p>创建方式</p><p>Bitvec(name,bv,ctx&#x3D;None)，创建一个位向量，name是他的名字，bv表示大小<br>BitVecs(name,bv,ctx&#x3D;None)，创建一个有多变量的位向量，name是名字，bv表示大小<br>BitVecVal(val,bv,ctx&#x3D;None)，创建一个位向量，有初始值，没名字。</p><h1 id="具体指令"><a href="#具体指令" class="headerlink" title="具体指令"></a>具体指令</h1><ol><li>s&#x3D;solver()，创建一个解的对象。</li><li>s.add(条件)，为解增加一个限制条件</li><li>s.check()，检查解是否存在，如果存在，会返回”sat”</li><li>model()，输出解得结果</li></ol><p>5.<code>solver.assertions()</code>查看求解器已经添加的约束和约束的个数</p><p>在计算时需给变量约束，没有约束是计算不出结果的，同时给了约束才能进行计算。</p><h1 id="解决一般方程组"><a href="#解决一般方程组" class="headerlink" title="解决一般方程组"></a>解决一般方程组</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line">x=z3.Real(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y=z3.Real(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">z3.solve(x&gt;<span class="number">2</span>,y&lt;<span class="number">10</span>,x+<span class="number">2</span>*y==<span class="number">7</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">[y = <span class="number">0</span>, x = <span class="number">7</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span>*<span class="comment">#直接导入所有类，不用带.访问符</span></span><br><span class="line">x=Real(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y=Real(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">z3.solve(x&gt;<span class="number">2</span>,y&lt;<span class="number">10</span>,x+<span class="number">2</span>*y==<span class="number">7</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">[y = <span class="number">0</span>, x = <span class="number">7</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><h1 id="ctf基本用法"><a href="#ctf基本用法" class="headerlink" title="ctf基本用法"></a>ctf基本用法</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span>*</span><br><span class="line">flag=[BitVec(<span class="string">f&quot;flag[<span class="subst">&#123;i&#125;</span>]&quot;</span>,<span class="number">8</span>)<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(flaglen)]<span class="comment">#flaglen一般为flag的长度,此处使用BitVec位向量方便还原字符的位运算操作， c语言一个字符长度为8bit</span></span><br><span class="line"><span class="comment">#flag=[Int(f&quot;flag[&#123;i&#125;]&quot;)for i in range(flaglen)]</span></span><br><span class="line"><span class="comment">#flag=[Real(f&quot;flag[&#123;i&#125;]&quot;)for i in range(flaglen)]</span></span><br><span class="line">f=Solver()<span class="comment">#创建求解器实例,相当于告诉python你要计算了</span></span><br><span class="line">out=flag<span class="comment">#将对象传给out,用于计算，可能会有某些计算会打乱初始flag的顺序，为了防止更改这种顺序，用out来代替计算</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">添加需要的条件</span></span><br><span class="line"><span class="string">模仿c语言内对flag的操作即可</span></span><br><span class="line"><span class="string">f.add(out[xxx]==xxx)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> f.check()==sat:<span class="comment">#f.check()用于检查是否有解,sat表示有解，此处用循环表现存在多解的情况</span></span><br><span class="line">    condition = []<span class="comment">#用于存放当前的条件</span></span><br><span class="line">    m = f.model()<span class="comment">#存放解的字典,用m[flag[xxx]]来访问，这种字典跟python字典是一个意思,只不过键对应的值是intNumRef类型</span></span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))<span class="comment">#m[flag[i]]获取的是intNumRef类型的值可以通过转化为字符串再转化为数值传给chr转化为字符,也可通过intNumRef的as_long()方法转化为数值 p+=chr(m[flag[i]].as_long())</span></span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))<span class="comment">#存放当前的字符的条件用于寻找多解可改为condition.append(flag[i]!=m[flag[i]].as_long())</span></span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))<span class="comment">#Or用于表现或等效于增加了(flag[0]!=当前的flag[0])的值or(flag[1]!=当前的flag[1]的值),以此类推,要让该条件为真，则下一个求出来的flag值跟上一个flag值至少有一个不同</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方文档&lt;a class=&quot;link&quot;   href=&quot;https://z3prover.github.io/api/html/namespacez3py.html?spm=a2c6h.12873639.article-detail.7.5e5c2666btxxry&quot; &gt;Z</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/Re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>长安杯 2021fantasy</title>
    <link href="http://example.com/2023/07/27/CTF%20WP/Re/%E5%AE%89%E5%8D%93/%E9%95%BF%E5%AE%89%E6%9D%AF%202021fantasy/"/>
    <id>http://example.com/2023/07/27/CTF%20WP/Re/%E5%AE%89%E5%8D%93/%E9%95%BF%E5%AE%89%E6%9D%AF%202021fantasy/</id>
    <published>2023-07-27T13:32:37.000Z</published>
    <updated>2023-07-27T13:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[<a class="link"   href="https://www.nssctf.cn/problem/330" >长安杯 2021]fantasy | NSSCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>只有一个主类</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span> <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">android:compileSdkVersion</span>=<span class="string">&quot;28&quot;</span> <span class="attr">android:compileSdkVersionCodename</span>=<span class="string">&quot;9&quot;</span> <span class="attr">package</span>=<span class="string">&quot;com.example.myapplication&quot;</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">&quot;28&quot;</span> <span class="attr">platformBuildVersionName</span>=<span class="string">&quot;9&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;15&quot;</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">&quot;28&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span> <span class="attr">android:debuggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span> <span class="attr">android:appComponentFactory</span>=<span class="string">&quot;android.support.v4.app.CoreComponentFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.myapplication.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>mainactivity</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String to_check)</span> &#123;&#125;;<span class="comment">//一坨二维数组</span></span><br><span class="line">    <span class="type">int</span>[][] ahhhhh = &#123;&#125;;<span class="comment">//一坨数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ohh</span> <span class="operator">=</span> <span class="number">0</span>; ohh &lt; <span class="number">32</span>; ohh++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">thats</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gooood</span> <span class="operator">=</span> <span class="number">0</span>; gooood &lt; <span class="number">32</span>; gooood++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">its</span> <span class="operator">=</span> to_check.charAt(gooood) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">so</span> <span class="operator">=</span> <span class="number">0</span>; so &lt; wow[ohh][gooood]; so++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">awesome</span> <span class="operator">=</span> <span class="number">0</span>; awesome &lt; its; awesome++) &#123;</span><br><span class="line">                    thats++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ehhh</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ehh</span> <span class="operator">=</span> <span class="number">0</span>; ehh &lt; <span class="number">114514</span>; ehh++) &#123;</span><br><span class="line">            ehhh += <span class="number">114514</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">deep</span> <span class="operator">=</span> <span class="number">1919810</span> - ahhhhh[ohh][<span class="number">0</span>];</span><br><span class="line">        <span class="type">double</span> <span class="variable">dark</span> <span class="operator">=</span> <span class="number">1919810</span> - thats;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> ehhh;</span><br><span class="line">        Double.isNaN(deep);</span><br><span class="line">        Double.isNaN(d);</span><br><span class="line">        <span class="type">double</span> <span class="variable">fantasy</span> <span class="operator">=</span> (<span class="number">114514.0d</span> - Math.sqrt(d - (<span class="number">4.0d</span> * deep))) / <span class="number">2.0d</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> ehhh;</span><br><span class="line">        Double.isNaN(dark);</span><br><span class="line">        Double.isNaN(d2);</span><br><span class="line">        <span class="type">double</span> <span class="variable">ah</span> <span class="operator">=</span> (Math.sqrt(d2 - (<span class="number">4.0d</span> * dark)) + <span class="number">114514.0d</span>) / <span class="number">2.0d</span>;</span><br><span class="line">        <span class="keyword">if</span> (fantasy + ah != <span class="number">114514.0d</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>此处条件可以化简</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ohh</span> <span class="operator">=</span> <span class="number">0</span>; ohh &lt; <span class="number">32</span>; ohh++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">thats</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gooood</span> <span class="operator">=</span> <span class="number">0</span>; gooood &lt; <span class="number">32</span>; gooood++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">its</span> <span class="operator">=</span> to_check.charAt(gooood) &amp; <span class="number">255</span>;</span><br><span class="line">        thats+=wow[ohh][gooood]*its</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ehhh</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ehh</span> <span class="operator">=</span> <span class="number">0</span>; ehh &lt; <span class="number">114514</span>; ehh++) &#123;</span><br><span class="line">        ehhh += <span class="number">114514</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="variable">deep</span> <span class="operator">=</span> <span class="number">1919810</span> - ahhhhh[ohh][<span class="number">0</span>];</span><br><span class="line">    <span class="type">double</span> <span class="variable">dark</span> <span class="operator">=</span> <span class="number">1919810</span> - thats;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> ehhh;</span><br><span class="line">    Double.isNaN(deep);</span><br><span class="line">    Double.isNaN(d);</span><br><span class="line">    <span class="type">double</span> <span class="variable">fantasy</span> <span class="operator">=</span> (<span class="number">114514.0d</span> - Math.sqrt(d - (<span class="number">4.0d</span> * deep))) / <span class="number">2.0d</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> ehhh;</span><br><span class="line">    Double.isNaN(dark);</span><br><span class="line">    Double.isNaN(d2);</span><br><span class="line">    <span class="type">double</span> <span class="variable">ah</span> <span class="operator">=</span> (Math.sqrt(d2 - (<span class="number">4.0d</span> * dark)) + <span class="number">114514.0d</span>) / <span class="number">2.0d</span>;</span><br><span class="line">    <span class="keyword">if</span> (fantasy + ah != <span class="number">114514.0d</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>根据结果可以推导</p><pre><code>       ah+fantasy=114514       ((Math.sqrt(d2 - (4.0d * dark)) + 114514.0d)+(114514.0d - Math.sqrt(d - (4.0d * deep))))/2=114514       (Math.sqrt(d2 - (4.0d * dark))-Math.sqrt(d - (4.0d * deep))=0       d2 - (4.0d * dark)=d - (4.0d * deep)       ∵d2=d       ∴dark=deep       ∴1919810 - ahhhhh[ohh][0]=1919810 - thats       ∴thats=ahhhhh[ohh][0]</code></pre><p>直接将数组之类的导入z3求解</p><p>exp:</p><p>此处有个问题就是当我将flag设置为位向量时计算量极大,跑半天跑不出来,在没有位运算且flag有唯一解的时候可以用Int型跑</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span>*</span><br><span class="line">flag=[Int(<span class="string">f&#x27;flag[<span class="subst">&#123;i&#125;</span>]&#x27;</span>)<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">wow =[[<span class="number">89</span>, <span class="number">88</span>, <span class="number">60</span>, <span class="number">91</span>, <span class="number">74</span>, <span class="number">111</span>, <span class="number">84</span>, <span class="number">96</span>, <span class="number">111</span>, <span class="number">124</span>, <span class="number">102</span>, <span class="number">95</span>, <span class="number">106</span>, <span class="number">126</span>, <span class="number">80</span>, <span class="number">122</span>, <span class="number">55</span>, <span class="number">125</span>, <span class="number">57</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">96</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">36</span>, <span class="number">113</span>, <span class="number">79</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">71</span>, <span class="number">91</span>, <span class="number">117</span>],</span><br><span class="line">[<span class="number">100</span>, <span class="number">113</span>, <span class="number">38</span>, <span class="number">112</span>, <span class="number">78</span>, <span class="number">74</span>, <span class="number">44</span>, <span class="number">64</span>, <span class="number">37</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">35</span>, <span class="number">78</span>, <span class="number">41</span>, <span class="number">46</span>, <span class="number">54</span>, <span class="number">82</span>, <span class="number">92</span>, <span class="number">46</span>, <span class="number">64</span>, <span class="number">73</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">120</span>, <span class="number">58</span>, <span class="number">127</span>, <span class="number">123</span>, <span class="number">53</span>, <span class="number">58</span>, <span class="number">112</span>, <span class="number">37</span>, <span class="number">119</span>],</span><br><span class="line">[<span class="number">96</span>, <span class="number">53</span>, <span class="number">32</span>, <span class="number">75</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">37</span>, <span class="number">65</span>, <span class="number">69</span>, <span class="number">76</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">33</span>, <span class="number">121</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">78</span>, <span class="number">113</span>, <span class="number">103</span>, <span class="number">88</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">92</span>, <span class="number">53</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">45</span>, <span class="number">121</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">84</span>, <span class="number">122</span>],</span><br><span class="line">[<span class="number">82</span>, <span class="number">125</span>, <span class="number">67</span>, <span class="number">38</span>, <span class="number">112</span>, <span class="number">121</span>, <span class="number">118</span>, <span class="number">74</span>, <span class="number">48</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">42</span>, <span class="number">59</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">41</span>, <span class="number">103</span>, <span class="number">75</span>, <span class="number">34</span>, <span class="number">89</span>, <span class="number">37</span>, <span class="number">74</span>, <span class="number">124</span>, <span class="number">40</span>, <span class="number">62</span>, <span class="number">36</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">91</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">63</span>],</span><br><span class="line">[<span class="number">99</span>, <span class="number">35</span>, <span class="number">49</span>, <span class="number">36</span>, <span class="number">108</span>, <span class="number">56</span>, <span class="number">36</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">78</span>, <span class="number">114</span>, <span class="number">76</span>, <span class="number">73</span>, <span class="number">78</span>, <span class="number">104</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">62</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">39</span>, <span class="number">90</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">114</span>, <span class="number">90</span>, <span class="number">47</span>, <span class="number">111</span>],</span><br><span class="line">[<span class="number">117</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">32</span>, <span class="number">110</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">127</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">117</span>, <span class="number">71</span>, <span class="number">59</span>, <span class="number">90</span>, <span class="number">55</span>, <span class="number">72</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">63</span>, <span class="number">66</span>, <span class="number">110</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">35</span>, <span class="number">43</span>, <span class="number">113</span>, <span class="number">124</span>, <span class="number">91</span>, <span class="number">45</span>, <span class="number">81</span>, <span class="number">64</span>, <span class="number">67</span>],</span><br><span class="line">[<span class="number">64</span>, <span class="number">114</span>, <span class="number">50</span>, <span class="number">54</span>, <span class="number">94</span>, <span class="number">60</span>, <span class="number">127</span>, <span class="number">81</span>, <span class="number">92</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">91</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">95</span>, <span class="number">92</span>, <span class="number">48</span>, <span class="number">91</span>, <span class="number">34</span>, <span class="number">37</span>, <span class="number">77</span>, <span class="number">62</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">75</span>, <span class="number">37</span>, <span class="number">127</span>, <span class="number">66</span>, <span class="number">90</span>, <span class="number">86</span>, <span class="number">67</span>, <span class="number">115</span>],</span><br><span class="line">[<span class="number">77</span>, <span class="number">80</span>, <span class="number">71</span>, <span class="number">61</span>, <span class="number">124</span>, <span class="number">79</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">121</span>, <span class="number">119</span>, <span class="number">52</span>, <span class="number">82</span>, <span class="number">100</span>, <span class="number">109</span>, <span class="number">57</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">61</span>, <span class="number">37</span>, <span class="number">94</span>, <span class="number">113</span>, <span class="number">49</span>, <span class="number">72</span>, <span class="number">84</span>, <span class="number">96</span>, <span class="number">88</span>, <span class="number">106</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">63</span>, <span class="number">57</span>],</span><br><span class="line">[<span class="number">90</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">44</span>, <span class="number">104</span>, <span class="number">111</span>, <span class="number">78</span>, <span class="number">53</span>, <span class="number">82</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">33</span>, <span class="number">92</span>, <span class="number">73</span>, <span class="number">113</span>, <span class="number">124</span>, <span class="number">101</span>, <span class="number">57</span>, <span class="number">94</span>, <span class="number">34</span>, <span class="number">76</span>, <span class="number">103</span>, <span class="number">48</span>, <span class="number">79</span>, <span class="number">74</span>, <span class="number">58</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">81</span>],</span><br><span class="line">[<span class="number">78</span>, <span class="number">100</span>, <span class="number">109</span>, <span class="number">36</span>, <span class="number">83</span>, <span class="number">98</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">39</span>, <span class="number">73</span>, <span class="number">61</span>, <span class="number">94</span>, <span class="number">32</span>, <span class="number">107</span>, <span class="number">59</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">86</span>, <span class="number">95</span>, <span class="number">43</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">70</span>, <span class="number">73</span>, <span class="number">85</span>, <span class="number">99</span>, <span class="number">121</span>, <span class="number">91</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">78</span>, <span class="number">64</span>],</span><br><span class="line">[<span class="number">110</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">40</span>, <span class="number">77</span>, <span class="number">57</span>, <span class="number">105</span>, <span class="number">75</span>, <span class="number">111</span>, <span class="number">51</span>, <span class="number">49</span>, <span class="number">36</span>, <span class="number">82</span>, <span class="number">42</span>, <span class="number">38</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">81</span>, <span class="number">47</span>, <span class="number">93</span>, <span class="number">100</span>, <span class="number">52</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">110</span>, <span class="number">90</span>, <span class="number">46</span>, <span class="number">73</span>, <span class="number">113</span>, <span class="number">36</span>, <span class="number">98</span>],</span><br><span class="line">[<span class="number">77</span>, <span class="number">77</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">107</span>, <span class="number">63</span>, <span class="number">108</span>, <span class="number">38</span>, <span class="number">103</span>, <span class="number">86</span>, <span class="number">79</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">41</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">61</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">93</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">87</span>, <span class="number">96</span>, <span class="number">125</span>, <span class="number">82</span>, <span class="number">88</span>, <span class="number">84</span>, <span class="number">68</span>, <span class="number">100</span>],</span><br><span class="line">[<span class="number">57</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">127</span>, <span class="number">48</span>, <span class="number">115</span>, <span class="number">99</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">92</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">39</span>, <span class="number">125</span>, <span class="number">60</span>, <span class="number">127</span>, <span class="number">45</span>, <span class="number">76</span>, <span class="number">66</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">71</span>, <span class="number">114</span>, <span class="number">104</span>, <span class="number">61</span>, <span class="number">33</span>, <span class="number">95</span>, <span class="number">123</span>, <span class="number">75</span>, <span class="number">75</span>],</span><br><span class="line">[<span class="number">44</span>, <span class="number">120</span>, <span class="number">39</span>, <span class="number">117</span>, <span class="number">58</span>, <span class="number">65</span>, <span class="number">52</span>, <span class="number">91</span>, <span class="number">62</span>, <span class="number">57</span>, <span class="number">89</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">42</span>, <span class="number">88</span>, <span class="number">92</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">88</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">97</span>, <span class="number">38</span>, <span class="number">67</span>, <span class="number">109</span>, <span class="number">40</span>, <span class="number">92</span>, <span class="number">101</span>, <span class="number">33</span>, <span class="number">100</span>],</span><br><span class="line">[<span class="number">51</span>, <span class="number">86</span>, <span class="number">114</span>, <span class="number">62</span>, <span class="number">44</span>, <span class="number">42</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">73</span>, <span class="number">113</span>, <span class="number">99</span>, <span class="number">39</span>, <span class="number">112</span>, <span class="number">92</span>, <span class="number">34</span>, <span class="number">120</span>, <span class="number">58</span>, <span class="number">110</span>, <span class="number">56</span>, <span class="number">81</span>, <span class="number">75</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">126</span>, <span class="number">112</span>, <span class="number">40</span>, <span class="number">72</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">52</span>],</span><br><span class="line">[<span class="number">110</span>, <span class="number">34</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">35</span>, <span class="number">56</span>, <span class="number">38</span>, <span class="number">84</span>, <span class="number">124</span>, <span class="number">103</span>, <span class="number">49</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">122</span>, <span class="number">125</span>, <span class="number">38</span>, <span class="number">97</span>, <span class="number">71</span>, <span class="number">49</span>, <span class="number">122</span>, <span class="number">104</span>, <span class="number">126</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">74</span>, <span class="number">123</span>, <span class="number">46</span>],</span><br><span class="line">[<span class="number">87</span>, <span class="number">58</span>, <span class="number">49</span>, <span class="number">63</span>, <span class="number">86</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">85</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">117</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">92</span>, <span class="number">118</span>, <span class="number">76</span>, <span class="number">68</span>, <span class="number">40</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">81</span>, <span class="number">117</span>, <span class="number">55</span>, <span class="number">34</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">84</span>, <span class="number">64</span>],</span><br><span class="line">[<span class="number">40</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">72</span>, <span class="number">55</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">52</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">34</span>, <span class="number">49</span>, <span class="number">125</span>, <span class="number">65</span>, <span class="number">33</span>, <span class="number">106</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">116</span>, <span class="number">119</span>, <span class="number">36</span>, <span class="number">116</span>, <span class="number">66</span>, <span class="number">36</span>, <span class="number">72</span>, <span class="number">96</span>, <span class="number">82</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">115</span>],</span><br><span class="line">[<span class="number">34</span>, <span class="number">43</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">88</span>, <span class="number">116</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">110</span>, <span class="number">89</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">103</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">42</span>, <span class="number">84</span>, <span class="number">116</span>, <span class="number">40</span>, <span class="number">115</span>, <span class="number">84</span>, <span class="number">68</span>, <span class="number">125</span>, <span class="number">92</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">110</span>, <span class="number">40</span>, <span class="number">124</span>, <span class="number">38</span>],</span><br><span class="line">[<span class="number">33</span>, <span class="number">93</span>, <span class="number">39</span>, <span class="number">44</span>, <span class="number">69</span>, <span class="number">54</span>, <span class="number">86</span>, <span class="number">59</span>, <span class="number">80</span>, <span class="number">92</span>, <span class="number">35</span>, <span class="number">45</span>, <span class="number">103</span>, <span class="number">96</span>, <span class="number">51</span>, <span class="number">111</span>, <span class="number">58</span>, <span class="number">79</span>, <span class="number">51</span>, <span class="number">124</span>, <span class="number">45</span>, <span class="number">59</span>, <span class="number">121</span>, <span class="number">36</span>, <span class="number">46</span>, <span class="number">114</span>, <span class="number">41</span>, <span class="number">34</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">65</span>, <span class="number">41</span>],</span><br><span class="line">[<span class="number">71</span>, <span class="number">70</span>, <span class="number">106</span>, <span class="number">46</span>, <span class="number">51</span>, <span class="number">66</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">55</span>, <span class="number">42</span>, <span class="number">88</span>, <span class="number">113</span>, <span class="number">33</span>, <span class="number">51</span>, <span class="number">65</span>, <span class="number">73</span>, <span class="number">127</span>, <span class="number">117</span>, <span class="number">108</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">101</span>, <span class="number">40</span>, <span class="number">57</span>, <span class="number">63</span>, <span class="number">113</span>, <span class="number">90</span>, <span class="number">100</span>],</span><br><span class="line">[<span class="number">72</span>, <span class="number">86</span>, <span class="number">41</span>, <span class="number">125</span>, <span class="number">49</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">52</span>, <span class="number">106</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">63</span>, <span class="number">70</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">99</span>, <span class="number">63</span>, <span class="number">39</span>, <span class="number">122</span>, <span class="number">105</span>, <span class="number">62</span>, <span class="number">46</span>, <span class="number">123</span>, <span class="number">108</span>, <span class="number">127</span>, <span class="number">40</span>, <span class="number">89</span>, <span class="number">83</span>, <span class="number">79</span>, <span class="number">48</span>, <span class="number">62</span>],</span><br><span class="line">[<span class="number">49</span>, <span class="number">83</span>, <span class="number">46</span>, <span class="number">113</span>, <span class="number">119</span>, <span class="number">39</span>, <span class="number">109</span>, <span class="number">96</span>, <span class="number">101</span>, <span class="number">73</span>, <span class="number">82</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">93</span>, <span class="number">48</span>, <span class="number">82</span>, <span class="number">96</span>, <span class="number">126</span>, <span class="number">105</span>, <span class="number">37</span>, <span class="number">90</span>, <span class="number">86</span>, <span class="number">116</span>, <span class="number">115</span>, <span class="number">53</span>, <span class="number">32</span>, <span class="number">106</span>, <span class="number">92</span>, <span class="number">33</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">68</span>],</span><br><span class="line">[<span class="number">67</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">65</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">33</span>, <span class="number">119</span>, <span class="number">116</span>, <span class="number">35</span>, <span class="number">61</span>, <span class="number">55</span>, <span class="number">70</span>, <span class="number">117</span>, <span class="number">120</span>, <span class="number">105</span>, <span class="number">98</span>, <span class="number">37</span>, <span class="number">83</span>, <span class="number">64</span>, <span class="number">88</span>, <span class="number">119</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">84</span>, <span class="number">86</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">93</span>],</span><br><span class="line">[<span class="number">34</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">33</span>, <span class="number">71</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">93</span>, <span class="number">104</span>, <span class="number">39</span>, <span class="number">70</span>, <span class="number">53</span>, <span class="number">96</span>, <span class="number">109</span>, <span class="number">119</span>, <span class="number">73</span>, <span class="number">58</span>, <span class="number">111</span>, <span class="number">122</span>, <span class="number">125</span>, <span class="number">91</span>, <span class="number">66</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">48</span>, <span class="number">85</span>, <span class="number">62</span>, <span class="number">97</span>, <span class="number">94</span>, <span class="number">97</span>],</span><br><span class="line">[<span class="number">119</span>, <span class="number">96</span>, <span class="number">75</span>, <span class="number">59</span>, <span class="number">115</span>, <span class="number">33</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">84</span>, <span class="number">45</span>, <span class="number">112</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">117</span>, <span class="number">66</span>, <span class="number">106</span>, <span class="number">113</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">40</span>, <span class="number">94</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">64</span>, <span class="number">52</span>, <span class="number">39</span>, <span class="number">109</span>, <span class="number">93</span>, <span class="number">120</span>, <span class="number">33</span>],</span><br><span class="line">[<span class="number">115</span>, <span class="number">113</span>, <span class="number">50</span>, <span class="number">95</span>, <span class="number">42</span>, <span class="number">88</span>, <span class="number">119</span>, <span class="number">59</span>, <span class="number">86</span>, <span class="number">127</span>, <span class="number">79</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">45</span>, <span class="number">64</span>, <span class="number">112</span>, <span class="number">68</span>, <span class="number">102</span>, <span class="number">45</span>, <span class="number">39</span>, <span class="number">63</span>, <span class="number">95</span>, <span class="number">35</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">110</span>, <span class="number">43</span>, <span class="number">56</span>, <span class="number">67</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">125</span>],</span><br><span class="line">[<span class="number">78</span>, <span class="number">83</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">50</span>, <span class="number">68</span>, <span class="number">73</span>, <span class="number">52</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">60</span>, <span class="number">84</span>, <span class="number">54</span>, <span class="number">118</span>, <span class="number">91</span>, <span class="number">100</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">97</span>, <span class="number">96</span>, <span class="number">127</span>, <span class="number">79</span>, <span class="number">94</span>, <span class="number">77</span>, <span class="number">76</span>, <span class="number">118</span>, <span class="number">49</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">125</span>, <span class="number">73</span>, <span class="number">77</span>],</span><br><span class="line">[<span class="number">103</span>, <span class="number">45</span>, <span class="number">119</span>, <span class="number">36</span>, <span class="number">94</span>, <span class="number">99</span>, <span class="number">81</span>, <span class="number">35</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">107</span>, <span class="number">110</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">64</span>, <span class="number">88</span>, <span class="number">83</span>, <span class="number">33</span>, <span class="number">120</span>, <span class="number">89</span>, <span class="number">114</span>, <span class="number">36</span>, <span class="number">110</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">105</span>, <span class="number">37</span>, <span class="number">66</span>, <span class="number">73</span>, <span class="number">91</span>, <span class="number">59</span>],</span><br><span class="line">[<span class="number">122</span>, <span class="number">56</span>, <span class="number">111</span>, <span class="number">52</span>, <span class="number">33</span>, <span class="number">118</span>, <span class="number">89</span>, <span class="number">105</span>, <span class="number">61</span>, <span class="number">117</span>, <span class="number">60</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">52</span>, <span class="number">63</span>, <span class="number">57</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">64</span>, <span class="number">47</span>, <span class="number">52</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">60</span>, <span class="number">86</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">86</span>, <span class="number">123</span>, <span class="number">70</span>, <span class="number">104</span>, <span class="number">110</span>],</span><br><span class="line">[<span class="number">51</span>, <span class="number">127</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">44</span>, <span class="number">118</span>, <span class="number">89</span>, <span class="number">78</span>, <span class="number">95</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">102</span>, <span class="number">100</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">115</span>, <span class="number">81</span>, <span class="number">68</span>, <span class="number">123</span>, <span class="number">69</span>, <span class="number">48</span>, <span class="number">66</span>, <span class="number">74</span>, <span class="number">83</span>, <span class="number">119</span>],</span><br><span class="line">[<span class="number">79</span>, <span class="number">55</span>, <span class="number">88</span>, <span class="number">105</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">68</span>, <span class="number">36</span>, <span class="number">74</span>, <span class="number">48</span>, <span class="number">70</span>, <span class="number">57</span>, <span class="number">39</span>, <span class="number">125</span>, <span class="number">80</span>, <span class="number">102</span>, <span class="number">61</span>, <span class="number">127</span>, <span class="number">82</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">120</span>, <span class="number">35</span>, <span class="number">126</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">104</span>]]</span><br><span class="line">ahhhhh = [</span><br><span class="line">[<span class="number">195075</span>],[<span class="number">164766</span>],[<span class="number">168447</span>],[<span class="number">176014</span>],</span><br><span class="line">[<span class="number">161107</span>],[<span class="number">175809</span>],[<span class="number">178310</span>],[<span class="number">189827</span>],</span><br><span class="line">[<span class="number">181204</span>],[<span class="number">182314</span>],[<span class="number">168177</span>],[<span class="number">196996</span>],</span><br><span class="line">[<span class="number">185129</span>],[<span class="number">152876</span>],[<span class="number">171067</span>],[<span class="number">185573</span>],</span><br><span class="line">[<span class="number">166900</span>],[<span class="number">184588</span>],[<span class="number">182162</span>],[<span class="number">148593</span>],</span><br><span class="line">[<span class="number">180204</span>],[<span class="number">169933</span>],[<span class="number">182766</span>],[<span class="number">166651</span>],</span><br><span class="line">[<span class="number">178856</span>],[<span class="number">175376</span>],[<span class="number">187367</span>],[<span class="number">182885</span>],</span><br><span class="line">[<span class="number">177145</span>],[<span class="number">189716</span>],[<span class="number">169531</span>],[<span class="number">178924</span>]]</span><br><span class="line">f=Solver()</span><br><span class="line"><span class="keyword">for</span> ohh <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    thats=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> gooood <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        thats+=(flag[gooood])*wow[ohh][gooood]</span><br><span class="line">    f.add(thats==ahhhhh[ohh][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a class=&quot;link&quot;   href=&quot;https://www.nssctf.cn/problem/330&quot; &gt;长安杯 2021]fantasy | NSSCTF &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Re" scheme="http://example.com/categories/CTF-WP/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/CTF-WP/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>柏鹭杯 2021不重要的图形</title>
    <link href="http://example.com/2023/07/26/CTF%20WP/Re/%E5%AE%89%E5%8D%93/%E6%9F%8F%E9%B9%AD%E6%9D%AF%202021%E4%B8%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%9B%BE%E5%BD%A2/"/>
    <id>http://example.com/2023/07/26/CTF%20WP/Re/%E5%AE%89%E5%8D%93/%E6%9F%8F%E9%B9%AD%E6%9D%AF%202021%E4%B8%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%9B%BE%E5%BD%A2/</id>
    <published>2023-07-25T18:32:16.000Z</published>
    <updated>2023-07-25T19:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[<a class="link"   href="https://www.nssctf.cn/problem/1263" >柏鹭杯 2021]不重要的图形 | NSSCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span> <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">android:compileSdkVersion</span>=<span class="string">&quot;30&quot;</span> <span class="attr">android:compileSdkVersionCodename</span>=<span class="string">&quot;11&quot;</span> <span class="attr">package</span>=<span class="string">&quot;com.octobox.ctf&quot;</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">&quot;30&quot;</span> <span class="attr">platformBuildVersionName</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;21&quot;</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.MyApplication&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span> <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span> <span class="attr">android:appComponentFactory</span>=<span class="string">&quot;androidx.core.app.CoreComponentFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.octobox.ctf.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>只有一个主类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">/**********************做完后表示以上函数为障眼法***************************************/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;MainAct&quot;</span>, stringBuffer.toString());</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">open</span> <span class="operator">=</span> getAssets().open(<span class="string">&quot;classes.dex&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[open.available()];</span><br><span class="line">            open.read(bArr);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(getDir(<span class="string">&quot;data&quot;</span>, <span class="number">0</span>), <span class="string">&quot;decode.dex&quot;</span>);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            fileOutputStream.write(bArr);</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            open.close();</span><br><span class="line">            <span class="keyword">if</span> (checkPassword(stringBuffer.toString().toUpperCase(), file)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlockView.setVisibility(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.handler.sendEmptyMessageDelayed(<span class="number">0</span>, <span class="number">2000L</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="comment">//将asset的classes.dex复制到data路径中的&quot;decode.dex&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String password, File loadDex)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">declaredMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(loadDex.getAbsolutePath(), getDir(<span class="string">&quot;dex&quot;</span>, <span class="number">0</span>).getAbsolutePath(), <span class="literal">null</span>, getClass().getClassLoader()).loadClass(<span class="string">&quot;C&quot;</span>).getDeclaredMethod(<span class="string">&quot;isValidate&quot;</span>, Context.class, String.class, <span class="type">int</span>[].class);</span><br><span class="line">            <span class="type">int</span>[] intArray = getResources().getIntArray(C0652R.array.A_offset);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) declaredMethod.invoke(<span class="literal">null</span>, <span class="built_in">this</span>, password, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, intArray[<span class="number">0</span>], intArray[<span class="number">1</span>]&#125;); <span class="comment">// 3,3248</span></span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, str);</span><br><span class="line">            <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.startsWith(<span class="string">&quot;Great!&quot;</span>)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.tvText.setText(str);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>上面的intArray通过getResources().getIntArray(C0652R.array.A_offset);方法从res中取出了{3,3248}</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307260245646.png"                      alt="image-20230726024308945"                ></p><p>注意此处的B_offset，以后要用</p><p>同时上面方法的通过反射机制调用了静态方法isValidate，并将最后结果传给了str</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">declaredMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(loadDex.getAbsolutePath(), getDir(<span class="string">&quot;dex&quot;</span>, <span class="number">0</span>).getAbsolutePath(), <span class="literal">null</span>, getClass().getClassLoader()).loadClass(<span class="string">&quot;C&quot;</span>).getDeclaredMethod(<span class="string">&quot;isValidate&quot;</span>, Context.class, String.class, <span class="type">int</span>[].class);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) declaredMethod.invoke(<span class="literal">null</span>, <span class="built_in">this</span>, password, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, intArray[<span class="number">0</span>], intArray[<span class="number">1</span>]&#125;); <span class="comment">// 3,3248</span></span><br></pre></td></tr></table></figure></div><p>isValidate方法(包括其调用的方法)如下</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">isValidate</span><span class="params">(Context context, String password, <span class="type">int</span>[] original)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteBuffer read;</span><br><span class="line">        File fix;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;start check password&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (original.length != <span class="number">3</span> || (read = read(context)) == <span class="literal">null</span> || (fix = fix(read, original[<span class="number">0</span>], original[<span class="number">1</span>], original[<span class="number">2</span>], context)) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> context.getClass().getClassLoader();</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;fixed&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(fix.getAbsolutePath(), dir.getAbsolutePath(), <span class="literal">null</span>, classLoader).loadClass(<span class="string">&quot;A&quot;</span>).getDeclaredMethod(<span class="string">&quot;d&quot;</span>, Context.class, String.class).invoke(<span class="literal">null</span>, context, password);</span><br><span class="line">        fix.delete();<span class="comment">//调用fix修复后的文件再删除fix的文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">File</span>(dir, fix.getName()).delete();</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File <span class="title function_">fix</span><span class="params">(ByteBuffer dexBuffer, <span class="type">int</span> classIndex, <span class="type">int</span> index, <span class="type">int</span> offset, Context context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">signInfo</span> <span class="operator">=</span> Utils.getSignInfo(context);</span><br><span class="line">        <span class="keyword">if</span> (signInfo == <span class="literal">null</span> || !signInfo.equals(<span class="string">&quot;78856d5c90624ec05bbc3d9be63d3715fd6fefce&quot;</span>)) &#123;<span class="comment">//验证自身文件的特征值</span></span><br><span class="line">            Log.i(TAG, <span class="string">&quot;check signature failed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;data&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> C0003D.getClassDefData(dexBuffer, classIndex).get(<span class="string">&quot;class_data_off&quot;</span>).intValue();</span><br><span class="line">        HashMap&lt;String, <span class="type">int</span>[][]&gt; classData = C0003D.getClassData(dexBuffer, intValue);</span><br><span class="line">        classData.get(<span class="string">&quot;direct_methods&quot;</span>)[index][<span class="number">2</span>] = offset;</span><br><span class="line">        <span class="type">byte</span>[] encodeClassData = C0003D.encodeClassData(classData);</span><br><span class="line">        dexBuffer.position(intValue);</span><br><span class="line">        dexBuffer.put(encodeClassData);</span><br><span class="line">        dexBuffer.position(<span class="number">32</span>);</span><br><span class="line">        <span class="type">byte</span>[] bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[dexBuffer.capacity() - <span class="number">32</span>];</span><br><span class="line">        dexBuffer.get(bArr);</span><br><span class="line">        <span class="type">byte</span>[] sha1 = Utils.getSha1(bArr);</span><br><span class="line">        dexBuffer.position(<span class="number">12</span>);</span><br><span class="line">        dexBuffer.put(sha1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">checksum</span> <span class="operator">=</span> Utils.checksum(dexBuffer);</span><br><span class="line">        dexBuffer.position(<span class="number">8</span>);</span><br><span class="line">        dexBuffer.putInt(Integer.reverseBytes(checksum));</span><br><span class="line">        <span class="type">byte</span>[] array = dexBuffer.array();</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, <span class="string">&quot;1.dex&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fileOutputStream.write(array);</span><br><span class="line">        fileOutputStream.close();<span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">read</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(context.getDir(<span class="string">&quot;data&quot;</span>, <span class="number">0</span>), <span class="string">&quot;decode.dex&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">byte</span>[] bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[fileInputStream.available()];</span><br><span class="line">                fileInputStream.read(bArr);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">wrap</span> <span class="operator">=</span> ByteBuffer.wrap(bArr);</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">                <span class="keyword">return</span> wrap;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>A类的d方法是通过加密了的，fix方法将decode.dex中A类的d方法解密后再交给反射机制调用，最后再删除掉调用的dex(所以在运行中看不见这个文件，或者只出现一瞬间)</p><p>解密exp:</p><p>直接通过java模拟解密过程，将最后的dex解密出来</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">nssctf</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">read</span><span class="params">(String dir)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">byte</span>[] bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[fileInputStream.available()];</span><br><span class="line">                fileInputStream.read(bArr);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">wrap</span> <span class="operator">=</span> ByteBuffer.wrap(bArr);</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">                <span class="keyword">return</span> wrap;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; <span class="title function_">getClassDefData</span><span class="params">(ByteBuffer buffer, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        buffer.position(<span class="number">100</span>);</span><br><span class="line">        buffer.position(Integer.reverseBytes(buffer.getInt()) + (index * <span class="number">32</span>));</span><br><span class="line">        HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes2</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes3</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes4</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes5</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes6</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes7</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        <span class="type">int</span> <span class="variable">reverseBytes8</span> <span class="operator">=</span> Integer.reverseBytes(buffer.getInt());</span><br><span class="line">        hashMap.put(<span class="string">&quot;class_idx&quot;</span>, Integer.valueOf(reverseBytes));</span><br><span class="line">        hashMap.put(<span class="string">&quot;access_flag&quot;</span>, Integer.valueOf(reverseBytes2));</span><br><span class="line">        hashMap.put(<span class="string">&quot;superclass_idx&quot;</span>, Integer.valueOf(reverseBytes3));</span><br><span class="line">        hashMap.put(<span class="string">&quot;interfaces_off&quot;</span>, Integer.valueOf(reverseBytes4));</span><br><span class="line">        hashMap.put(<span class="string">&quot;source_file_idx&quot;</span>, Integer.valueOf(reverseBytes5));</span><br><span class="line">        hashMap.put(<span class="string">&quot;annotation_off&quot;</span>, Integer.valueOf(reverseBytes6));</span><br><span class="line">        hashMap.put(<span class="string">&quot;class_data_off&quot;</span>, Integer.valueOf(reverseBytes7));</span><br><span class="line">        hashMap.put(<span class="string">&quot;static_values_off&quot;</span>, Integer.valueOf(reverseBytes8));</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, <span class="type">int</span>[][]&gt; getClassData(ByteBuffer buffer, <span class="type">int</span> offset) &#123;</span><br><span class="line">        buffer.position(offset);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> fromULEB128(buffer)[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> fromULEB128(buffer)[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> fromULEB128(buffer)[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> fromULEB128(buffer)[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span>[][] iArr = (<span class="type">int</span>[][]) Array.newInstance(<span class="type">int</span>.class, i, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">0</span>; i6 &lt; i; i6++) &#123;</span><br><span class="line">                <span class="type">int</span>[] encode_field = encode_field(buffer);</span><br><span class="line">                <span class="keyword">if</span> (i6 == <span class="number">0</span>) &#123;</span><br><span class="line">                    i5 = encode_field[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i5 += encode_field[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span>[] iArr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">                iArr2[<span class="number">0</span>] = i5;</span><br><span class="line">                iArr2[<span class="number">1</span>] = encode_field[<span class="number">1</span>];</span><br><span class="line">                iArr[i6] = iArr2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] iArr3 = (<span class="type">int</span>[][]) Array.newInstance(<span class="type">int</span>.class, i2, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (i2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i7</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="number">0</span>; i8 &lt; i2; i8++) &#123;</span><br><span class="line">                <span class="type">int</span>[] encode_field2 = encode_field(buffer);</span><br><span class="line">                <span class="keyword">if</span> (i8 == <span class="number">0</span>) &#123;</span><br><span class="line">                    i7 = encode_field2[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i7 += encode_field2[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span>[] iArr4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">                iArr4[<span class="number">0</span>] = i7;</span><br><span class="line">                iArr4[<span class="number">1</span>] = encode_field2[<span class="number">1</span>];</span><br><span class="line">                iArr3[i8] = iArr4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] iArr5 = (<span class="type">int</span>[][]) Array.newInstance(<span class="type">int</span>.class, i3, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (i3 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i9</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i10</span> <span class="operator">=</span> <span class="number">0</span>; i10 &lt; i3; i10++) &#123;</span><br><span class="line">                <span class="type">int</span>[] encode_method = encode_method(buffer);</span><br><span class="line">                <span class="keyword">if</span> (i10 == <span class="number">0</span>) &#123;</span><br><span class="line">                    i9 = encode_method[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i9 += encode_method[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span>[] iArr6 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">                iArr6[<span class="number">0</span>] = i9;</span><br><span class="line">                iArr6[<span class="number">1</span>] = encode_method[<span class="number">1</span>];</span><br><span class="line">                iArr6[<span class="number">2</span>] = encode_method[<span class="number">2</span>];</span><br><span class="line">                iArr5[i10] = iArr6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] iArr7 = (<span class="type">int</span>[][]) Array.newInstance(<span class="type">int</span>.class, i4, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (i4 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i11</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i12</span> <span class="operator">=</span> <span class="number">0</span>; i12 &lt; i2; i12++) &#123;</span><br><span class="line">                <span class="type">int</span>[] encode_method2 = encode_method(buffer);</span><br><span class="line">                <span class="keyword">if</span> (i12 == <span class="number">0</span>) &#123;</span><br><span class="line">                    i11 = encode_method2[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i11 += encode_method2[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span>[] iArr8 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">                iArr8[<span class="number">0</span>] = i11;</span><br><span class="line">                iArr8[<span class="number">1</span>] = encode_method2[<span class="number">1</span>];</span><br><span class="line">                iArr8[<span class="number">2</span>] = encode_method2[<span class="number">2</span>];</span><br><span class="line">                iArr7[i12] = iArr8;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HashMap&lt;String, <span class="type">int</span>[][]&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;static_fields&quot;</span>, iArr);</span><br><span class="line">        hashMap.put(<span class="string">&quot;instance_fields&quot;</span>, iArr3);</span><br><span class="line">        hashMap.put(<span class="string">&quot;direct_methods&quot;</span>, iArr5);</span><br><span class="line">        hashMap.put(<span class="string">&quot;virtual_methods&quot;</span>, iArr7);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] fromULEB128(ByteBuffer buffer) &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> buffer.get() &amp; <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (i2 &gt; <span class="number">127</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> buffer.get() &amp; <span class="number">255</span>;</span><br><span class="line">            i2 = (i2 &amp; <span class="number">127</span>) | ((i3 &amp; <span class="number">127</span>) &lt;&lt; <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span> (i3 &gt; <span class="number">127</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> buffer.get() &amp; <span class="number">255</span>;</span><br><span class="line">                i2 |= (i4 &amp; <span class="number">127</span>) &lt;&lt; <span class="number">14</span>;</span><br><span class="line">                i = <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span> (i4 &gt; <span class="number">127</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> buffer.get() &amp; <span class="number">255</span>;</span><br><span class="line">                    i2 |= (i5 &amp; <span class="number">127</span>) &lt;&lt; <span class="number">21</span>;</span><br><span class="line">                    i = <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i5 &gt; <span class="number">127</span>) &#123;</span><br><span class="line">                        i2 |= (buffer.get() &amp; <span class="number">255</span>) &lt;&lt; <span class="number">28</span>;</span><br><span class="line">                        i = <span class="number">5</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i2, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] encode_method(ByteBuffer buffer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;fromULEB128(buffer)[<span class="number">0</span>], fromULEB128(buffer)[<span class="number">0</span>], fromULEB128(buffer)[<span class="number">0</span>]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] encode_field(ByteBuffer buffer, <span class="type">int</span> offset) &#123;</span><br><span class="line">        buffer.position(offset);</span><br><span class="line">        <span class="keyword">return</span> encode_field(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] encode_field(ByteBuffer buffer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;fromULEB128(buffer)[<span class="number">0</span>], fromULEB128(buffer)[<span class="number">0</span>]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encodeClassData(HashMap&lt;String, <span class="type">int</span>[][]&gt; data) &#123;</span><br><span class="line">        <span class="type">int</span>[][] iArr = data.get(<span class="string">&quot;static_fields&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] iArr2 = data.get(<span class="string">&quot;instance_fields&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] iArr3 = data.get(<span class="string">&quot;direct_methods&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] iArr4 = data.get(<span class="string">&quot;virtual_methods&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] merge = merge(toULEB128(iArr.length), toULEB128(iArr2.length), toULEB128(iArr3.length), toULEB128(iArr4.length));</span><br><span class="line">        <span class="keyword">if</span> (iArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] iArr5 : iArr) &#123;</span><br><span class="line">                merge = merge(merge, decode_field(iArr5, i));</span><br><span class="line">                i = iArr5[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iArr2.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] iArr6 : iArr2) &#123;</span><br><span class="line">                merge = merge(merge, decode_field(iArr6, i2));</span><br><span class="line">                i2 = iArr6[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iArr3.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] iArr7 : iArr3) &#123;</span><br><span class="line">                merge = merge(merge, decode_method(iArr7, i3));</span><br><span class="line">                i3 = iArr7[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iArr4.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] iArr8 : iArr4) &#123;</span><br><span class="line">                merge = merge(merge, decode_method(iArr8, i4));</span><br><span class="line">                i4 = iArr8[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toULEB128(<span class="type">int</span> data) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> data &gt;&gt; <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) ((data &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (((data &gt;&gt; <span class="number">7</span>) &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (((data &gt;&gt; <span class="number">14</span>) &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (((data &gt;&gt; <span class="number">21</span>) &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (i &amp; <span class="number">15</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> data &gt;&gt; <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">if</span> (i2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) ((data &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (((data &gt;&gt; <span class="number">7</span>) &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (((data &gt;&gt; <span class="number">14</span>) &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (i2 &amp; <span class="number">127</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> data &gt;&gt; <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">if</span> (i3 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) ((data &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (((data &gt;&gt; <span class="number">7</span>) &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (i3 &amp; <span class="number">127</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> data &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> i4 &gt; <span class="number">0</span> ? <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) ((data &amp; <span class="number">127</span>) | <span class="number">128</span>), (<span class="type">byte</span>) (i4 &amp; <span class="number">127</span>)&#125; : <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) (data &amp; <span class="number">127</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] merge(<span class="type">byte</span>[]... data) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">byte</span>[] bArr : data) &#123;</span><br><span class="line">        i += bArr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">allocate</span> <span class="operator">=</span> ByteBuffer.allocate(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">byte</span>[] bArr2 : data) &#123;</span><br><span class="line">        allocate.put(bArr2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">byte</span>[] bArr3 = <span class="keyword">new</span> <span class="title class_">byte</span>[allocate.position()];</span><br><span class="line">    allocate.position(<span class="number">0</span>);</span><br><span class="line">    allocate.get(bArr3);</span><br><span class="line">    <span class="keyword">return</span> bArr3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] decode_field(<span class="type">int</span>[] data, <span class="type">int</span> diff_idx) &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(toULEB128(data[<span class="number">0</span>] - diff_idx), toULEB128(data[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] decode_method(<span class="type">int</span>[] data, <span class="type">int</span> diff_idx) &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(toULEB128(data[<span class="number">0</span>] - diff_idx), toULEB128(data[<span class="number">1</span>]), toULEB128(data[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getSha1(<span class="type">byte</span>[] data) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageDigest.getInstance(<span class="string">&quot;SHA&quot;</span>).digest(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">checksum</span><span class="params">(ByteBuffer dexBuffer)</span> &#123;</span><br><span class="line">    dexBuffer.position(<span class="number">12</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> dexBuffer.capacity();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">z</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (dexBuffer.position() &lt; capacity) &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i3 &gt;= <span class="number">1024</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arrayList.add(Integer.valueOf(dexBuffer.get() &amp; <span class="number">255</span>));</span><br><span class="line">            <span class="keyword">if</span> (dexBuffer.position() == dexBuffer.limit()) &#123;</span><br><span class="line">                z = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] calculateVar = calculateVar(arrayList, i, i2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> calculateVar[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> calculateVar[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (z) &#123;</span><br><span class="line">            <span class="keyword">return</span> (i5 &lt;&lt; <span class="number">16</span>) + i4;</span><br><span class="line">        &#125;</span><br><span class="line">        i2 = i5;</span><br><span class="line">        i = i4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] calculateVar(ArrayList&lt;Integer&gt; srcBytes, <span class="type">int</span> vara, <span class="type">int</span> varb) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; srcBytes.size(); i++) &#123;</span><br><span class="line">        vara = (vara + srcBytes.get(i).intValue()) % <span class="number">65521</span>;</span><br><span class="line">        varb = (varb + vara) % <span class="number">65521</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;vara, varb&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>).digest(data)).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span> - bigInteger.length(); i++) &#123;</span><br><span class="line">            bigInteger = <span class="string">&quot;0&quot;</span> + bigInteger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bigInteger;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException unused) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;ops!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        ByteBuffer dexBuffer=read(<span class="string">&quot;classes.dex&quot;</span>);<span class="comment">//修改为assets中的dex地址</span></span><br><span class="line">        <span class="type">int</span> classIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> offset=<span class="number">3248</span>;</span><br><span class="line">        System.out.println(getClassDefData(dexBuffer, classIndex).get(<span class="string">&quot;class_data_off&quot;</span>).intValue());   </span><br><span class="line">        <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> getClassDefData(dexBuffer, classIndex).get(<span class="string">&quot;class_data_off&quot;</span>).intValue();</span><br><span class="line">        <span class="comment">// intValue=11388;</span></span><br><span class="line">        HashMap&lt;String, <span class="type">int</span>[][]&gt; classData = getClassData(dexBuffer, intValue);</span><br><span class="line">        classData.get(<span class="string">&quot;direct_methods&quot;</span>)[index][<span class="number">2</span>] = offset;</span><br><span class="line">        <span class="type">byte</span>[] encodeClassData = encodeClassData(classData);</span><br><span class="line">        dexBuffer.position(intValue);</span><br><span class="line">        dexBuffer.put(encodeClassData);</span><br><span class="line">        dexBuffer.position(<span class="number">32</span>);</span><br><span class="line">        <span class="type">byte</span>[] bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[dexBuffer.capacity() - <span class="number">32</span>];</span><br><span class="line">        dexBuffer.get(bArr);</span><br><span class="line">        <span class="type">byte</span>[] sha1 = getSha1(bArr);</span><br><span class="line">        dexBuffer.position(<span class="number">12</span>);</span><br><span class="line">        dexBuffer.put(sha1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">checksum</span> <span class="operator">=</span> checksum(dexBuffer);</span><br><span class="line">        dexBuffer.position(<span class="number">8</span>);</span><br><span class="line">        dexBuffer.putInt(Integer.reverseBytes(checksum));</span><br><span class="line">        <span class="type">byte</span>[] array = dexBuffer.array();</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\EDGE下载\\misc4\\assets\\1.dex&quot;</span>);<span class="comment">//你想存解密后的dex地址</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fileOutputStream.write(array);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>发现解密后的dex只有A类的d方法且其相关的B类的d方法也是通过加密了的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307260255342.png"                      alt="image-20230726025559183"                ></p><p>猜测<a href="#%E9%87%8D%E7%82%B9">摁住ctrl点击 跳转</a>中的B_offset也用于解密,所以将解密exp中的main方法中三个变量变为B类的变量，方法如下</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> classIndex=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> index=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> offset=<span class="number">3248</span>;</span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line"><span class="type">int</span> classIndex=<span class="number">1</span>;<span class="comment">//不改的话会解密成A类的b方法，虽然结果可能没多大区别</span></span><br><span class="line"><span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> offset=<span class="number">3420</span>;</span><br></pre></td></tr></table></figure></div><p>两个解密后的方法如下</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//A类的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">d</span><span class="params">(Context context, String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">signInfo</span> <span class="operator">=</span> Utils.getSignInfo(context);</span><br><span class="line">        <span class="keyword">if</span> (signInfo != <span class="literal">null</span> &amp;&amp; signInfo.equals(<span class="string">&quot;78856d5c90624ec05bbc3d9be63d3715fd6fefce&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> Utils.md5(password.getBytes());</span><br><span class="line">            <span class="keyword">if</span> (md5.equals(<span class="string">&quot;4155606cedd928c3bb0b93343c81f3f5&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Great! please call B.d(\&quot;&quot;</span> + Utils.md5(md5.getBytes()) + <span class="string">&quot;\&quot;) to get flag&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//B类的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">d</span><span class="params">(String src)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;flag&#123;ISEC-&quot;</span> + Utils.md5(Utils.getSha1(src.getBytes())) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>最终flag的exp:</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;<span class="comment">//运行需要将左边这个类名改为跟文件名一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getSha1(<span class="type">byte</span>[] data) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MessageDigest.getInstance(<span class="string">&quot;SHA&quot;</span>).digest(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>).digest(data)).toString(<span class="number">16</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span> - bigInteger.length(); i++) &#123;</span><br><span class="line">                bigInteger = <span class="string">&quot;0&quot;</span> + bigInteger;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bigInteger;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException unused) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;ops!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">        &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag&#123;ISEC-&quot;</span>+md5(getSha1(md5(<span class="string">&quot;4155606cedd928c3bb0b93343c81f3f5&quot;</span>.getBytes()).getBytes()))+<span class="string">&quot;&#125;&quot;</span>);<span class="comment">//通过网上工具sha1的时候结果有问题可能是大小写原因</span></span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a class=&quot;link&quot;   href=&quot;https://www.nssctf.cn/problem/1263&quot; &gt;柏鹭杯 2021]不重要的图形 | NSSCTF &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Re" scheme="http://example.com/categories/CTF-WP/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/CTF-WP/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>巅峰极客 2022easy_Forensic</title>
    <link href="http://example.com/2023/07/23/CTF%20WP/Misc/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%202022easy_Forensic/"/>
    <id>http://example.com/2023/07/23/CTF%20WP/Misc/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%202022easy_Forensic/</id>
    <published>2023-07-23T08:14:10.000Z</published>
    <updated>2023-07-23T16:55:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>[<a class="link"   href="https://www.nssctf.cn/problem/2506" >巅峰极客 2022]easy_Forensic | NSSCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><del>只是个初学vol3的小草稿</del></p><p>附件是个raw文件(不是图片，相当于一个内存镜像)</p><p>使用volatility3进行分析</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vol -f secret.raw windows.info</span><br><span class="line">Volatility 3 Framework 2.4.1</span><br><span class="line">Progress:  100.00               PDB scanning finished</span><br><span class="line">Variable        Value</span><br><span class="line"></span><br><span class="line">Kernel Base     0xf80003e06000</span><br><span class="line">DTB     0x187000</span><br><span class="line">Symbols file:///home/wrwrw/.local/lib/python3.11/site-packages/volatility3/symbols/windows/ntkrnlmp.pdb/F8E2A8B5C9B74BF4A6E4A48F18009994-2.json.xz</span><br><span class="line">Is64Bit True</span><br><span class="line">IsPAE   False</span><br><span class="line">layer_name      0 WindowsIntel32e</span><br><span class="line">memory_layer    1 FileLayer</span><br><span class="line">KdDebuggerDataBlock     0xf80003fef070</span><br><span class="line">NTBuildLab      7600.16385.amd64fre.win7_rtm.090</span><br><span class="line">CSDVersion      0</span><br><span class="line">KdVersionBlock  0xf80003fef030</span><br><span class="line">Major/Minor     15.7600</span><br><span class="line">MachineType     34404</span><br><span class="line">KeNumberProcessors      1</span><br><span class="line">SystemTime      2022-08-13 11:48:11</span><br><span class="line">NtSystemRoot    C:\Windows</span><br><span class="line">NtProductType   NtProductWinNt</span><br><span class="line">NtMajorVersion  6</span><br><span class="line">NtMinorVersion  1</span><br><span class="line">PE MajorOperatingSystemVersion  6</span><br><span class="line">PE MinorOperatingSystemVersion  1</span><br><span class="line">PE Machine      34404</span><br><span class="line">PE TimeDateStamp        Mon Jul 13 23:40:48 2009</span><br></pre></td></tr></table></figure></div><p>查看进程</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vol -f secret.raw windows.pslist</span><br><span class="line">Volatility 3 Framework 2.4.1</span><br><span class="line">Progress:  100.00               PDB scanning finished</span><br><span class="line">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime</span><br><span class="line"> ExitTime       File output</span><br><span class="line"></span><br><span class="line">4       0       System  0xfa8018d4b9e0  68      442     N/A     False   2022-08-13 11:46:15.000000</span><br><span class="line"> N/A    Disabled</span><br><span class="line">224     4       smss.exe        0xfa80265f99f0  2       29      N/A     False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">300     288     csrss.exe       0xfa801ab36b30  8       342     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">348     288     wininit.exe     0xfa8024e80340  3       76      0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">356     340     csrss.exe       0xfa8018e127c0  7       219     1       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">396     340     winlogon.exe    0xfa8019fa5060  6       118     1       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">440     348     services.exe    0xfa801ab2ab30  10      174     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">448     348     lsass.exe       0xfa801abc7060  6       511     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">456     348     lsm.exe 0xfa801a482910  10      138     0       False   2022-08-13 11:46:15.000000</span><br><span class="line"> N/A    Disabled</span><br><span class="line">560     440     svchost.exe     0xfa801ac4c7c0  11      352     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">624     440     svchost.exe     0xfa8020ba1790  7       231     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">676     440     svchost.exe     0xfa801ac8eb30  20      379     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">768     440     svchost.exe     0xfa801acbb290  22      450     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">844     440     svchost.exe     0xfa801acccb30  48      838     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">912     676     audiodg.exe     0xfa801ad22b30  7       129     0       False   2022-08-13 11:46:15.000000     N/A     Disabled</span><br><span class="line">1000    440     svchost.exe     0xfa801ad512f0  13      266     0       False   2022-08-13 11:46:16.000000     N/A     Disabled</span><br><span class="line">304     440     svchost.exe     0xfa801ad66b30  17      369     0       False   2022-08-13 11:46:16.000000     N/A     Disabled</span><br><span class="line">360     440     spoolsv.exe     0xfa801adfe780  13      265     0       False   2022-08-13 11:46:16.000000     N/A     Disabled</span><br><span class="line">1064    440     svchost.exe     0xfa801ae54b30  22      305     0       False   2022-08-13 11:46:16.000000     N/A     Disabled</span><br><span class="line">1236    440     taskhost.exe    0xfa801aeae140  11      204     1       False   2022-08-13 11:46:16.000000     N/A     Disabled</span><br><span class="line">1324    768     dwm.exe 0xfa801af42670  5       71      1       False   2022-08-13 11:46:16.000000</span><br><span class="line"> N/A    Disabled</span><br><span class="line">1336    1312    explorer.exe    0xfa801af46b30  31      724     1       False   2022-08-13 11:46:16.000000     N/A     Disabled#此处有个文件资源管理器的进程</span><br><span class="line">1392    440     QQProtect.exe   0xfa801af79060  15      196     0       True    2022-08-13 11:46:16.000000     N/A     Disabled</span><br><span class="line">1108    440     SearchIndexer.  0xfa801ae22b30  13      639     0       False   2022-08-13 11:46:22.000000     N/A     Disabled</span><br><span class="line">1452    1108    SearchProtocol  0xfa801af01b30  7       310     0       False   2022-08-13 11:46:22.000000     N/A     Disabled</span><br><span class="line">1616    1108    SearchFilterHo  0xfa801aefab30  6       93      0       False   2022-08-13 11:46:22.000000     N/A     Disabled</span><br><span class="line">828     1336    MRCv120.exe     0xfa801abf8060  14      282     1       True    2022-08-13 11:48:02.000000     N/A     Disabled</span><br></pre></td></tr></table></figure></div><p>搜索桌面文件</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vol -f secret.raw windows.filescan |grep Desktop</span><br><span class="line">0x6c9c6290 100.0\Users\Admin\Links\Desktop.lnk  216</span><br><span class="line">0x6d526f20      \Users\Admin\Desktop\MRCv120.exe        216</span><br><span class="line">0x72e8bf20      \Users\Admin\Desktop\EULAaccepted.dat   216</span><br><span class="line">0x7d80a7d0      \Users\Admin\Desktop\gift.jpg   216#这三个文件比较重要</span><br><span class="line">0x7d84af20      \Users\Admin\Desktop\hint.txt   216#</span><br><span class="line">0x7d84e350      \Users\Admin\Desktop\secret.zip 216#</span><br><span class="line">0x7da64360      \ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Desktop.ini      216</span><br><span class="line">0x7da66c70      \Users\Public\Desktop\desktop.ini       216</span><br><span class="line">0x7da66dc0      \Users\Admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Accessories\Desktop.ini      216</span><br><span class="line">0x7da68070      \Users\Admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Maintenance\Desktop.ini      216</span><br><span class="line">0x7da68c00      \Users\Admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Accessories\Accessibility\Desktop.ini                                                                                          216</span><br><span class="line">0x7da6af20      \Users\Admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Accessories\System Tools\Desktop.ini                                                                                           216</span><br><span class="line">0x7da6dab0      \ProgramData\Microsoft\Windows\Start Menu\Programs\Maintenance\Desktop.ini      216</span><br><span class="line">0x7da6fab0      \ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Accessibility\Desktop.ini        216</span><br><span class="line">0x7da6fc00      \ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\System Tools\Desktop.ini 216</span><br><span class="line">0x7da704a0      \ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Tablet PC\Desktop.ini    216</span><br><span class="line">0x7da7f310      \Users\Admin\Desktop    216</span><br><span class="line">0x7da7f4e0      \Users\Admin\Desktop    216</span><br><span class="line">0x7da80740      \Users\Public\Desktop\Glary Tracks Eraser.lnk   216</span><br><span class="line">0x7da81670      \Users\Public\Desktop   216</span><br><span class="line">0x7da81b70      \Users\Public\Desktop   216</span><br><span class="line">0x7dae0420      \Users\Admin\Desktop\wechat.txt 216</span><br><span class="line">0x7dc47bc0      \ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Remote Desktop Connection.lnk    216</span><br><span class="line">0x7de7c070      \Users\Admin\Desktop\MRCv120.exe        216</span><br><span class="line">0x7dfa9150      \Users\Admin\Desktop\MRCC206.tmp        216</span><br><span class="line">0x7e144d20      \Users\Admin\Desktop\desktop.ini        216</span><br><span class="line">0x7e614420      \Users\Admin\Desktop    216</span><br><span class="line">0x7ee47230      \Users\Public\Desktop\Firefox.lnk       216</span><br><span class="line">0x7f1e6ad0      \Users\Admin\Desktop\111.raw    216</span><br></pre></td></tr></table></figure></div><p>dump三个文件,发现hint.txt无法dump</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vol -f secret.raw windows.dump --physaddr 0x7d80a7d0</span><br><span class="line">vol -f secret.raw windows.dump --physaddr 0x7d84af20</span><br><span class="line">vol -f secret.raw windows.dump --physaddr 0x7d84e350</span><br></pre></td></tr></table></figure></div><p>通过diskgenius打开该镜像获取文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307231630764.png"                      alt="image-20230723163030671"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307231630255.png"                      alt="image-20230723163054165"                ></p><p>成功找到桌面文件</p><p>hint.txt为is _ not （此处有个空格16进制数为0x20）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307231631911.png"                      alt="image-20230723163146810"                ></p><p>其余两个文件为一个压缩包和一个jpg</p><p>jpg明显左下角有字，更改长宽</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230723163840020.png"                      alt="image-20230723163840020"                ></p><p>显示Nothing is more important than your life!是Passwd</p><p>输入压缩包后错误，根据hint文件中的提示，将空格转化为_</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="string">&quot;Nothing is more important than your life!&quot;</span>.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;Nothing_is_more_important_than_your_life!&#x27;</span></span><br></pre></td></tr></table></figure></div><p>解压后文件显示</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A gift for You:  wHeMscYvTluyRvjf5d7AEX5K4VlZeU2IiGpKLFzek1Q=</span><br></pre></td></tr></table></figure></div><p>通过搜索wp发现是wechat数据库加密的key</p><p>wechat.txt就是被加密的数据库,直接通过diskgenius无法正常提取，通过Volatility dump下来(需要将.dat文件改成.db文件)</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vol -f secret.raw windows.filescan |grep wechat</span></span><br><span class="line">0x7dae0420 100.0\Users\Admin\Desktop\wechat.txt 216</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vol -f secret.raw windows.dump --physaddr 0x7dae0420</span></span><br><span class="line">Volatility 3 Framework 2.4.1</span><br><span class="line">Progress:  100.00               PDB scanning finished</span><br><span class="line">Cache   FileObject      FileName        Result</span><br><span class="line"></span><br><span class="line">DataSectionObject       0x7dae0420      wechat.txt      file.0x7dae0420.0xfa8019afc6c0.DataSectionObject.wechat.txt.dat</span><br></pre></td></tr></table></figure></div><p>然后通过搜索wechat解密脚本<a class="link"   href="https://www.cnblogs.com/zysgmzb/p/16599501.html" >2022巅峰极客初赛 Misc wp - zysgmzb - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib, hmac, ctypes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">SQLITE_FILE_HEADER = <span class="built_in">bytes</span>(<span class="string">&quot;SQLite format 3&quot;</span>,encoding=<span class="string">&#x27;ASCII&#x27;</span>) + <span class="built_in">bytes</span>(<span class="number">1</span>)<span class="comment">#文件头</span></span><br><span class="line">IV_SIZE = <span class="number">16</span></span><br><span class="line">HMAC_SHA1_SIZE = <span class="number">20</span></span><br><span class="line">KEY_SIZE = <span class="number">32</span></span><br><span class="line">DEFAULT_PAGESIZE = <span class="number">4096</span> <span class="comment">#4048数据 + 16IV + 20 HMAC + 12</span></span><br><span class="line">DEFAULT_ITER = <span class="number">64000</span></span><br><span class="line"><span class="comment">#yourkey</span></span><br><span class="line">password = b64decode(<span class="string">b&quot;wHeMscYvTluyRvjf5d7AEX5K4VlZeU2IiGpKLFzek1Q=&quot;</span>)<span class="comment">#获取的key</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;dump下来的db文件地址&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    blist = f.read()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(blist))</span><br><span class="line"></span><br><span class="line">salt = blist[:<span class="number">16</span>]<span class="comment">#微信将文件头换成了盐</span></span><br><span class="line">key = hashlib.pbkdf2_hmac(<span class="string">&#x27;sha1&#x27;</span>, password, salt, DEFAULT_ITER, KEY_SIZE)<span class="comment">#获得Key</span></span><br><span class="line"></span><br><span class="line">first = blist[<span class="number">16</span>:DEFAULT_PAGESIZE]<span class="comment">#丢掉salt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import struct</span></span><br><span class="line">mac_salt = <span class="built_in">bytes</span>([x^<span class="number">0x3a</span> <span class="keyword">for</span> x <span class="keyword">in</span> salt])</span><br><span class="line">mac_key = hashlib.pbkdf2_hmac(<span class="string">&#x27;sha1&#x27;</span>, key, mac_salt, <span class="number">2</span>, KEY_SIZE)</span><br><span class="line"></span><br><span class="line">hash_mac = hmac.new(mac_key ,digestmod = <span class="string">&#x27;sha1&#x27;</span>)<span class="comment">#用第一页的Hash测试一下</span></span><br><span class="line">hash_mac.update(first[:-<span class="number">32</span>])</span><br><span class="line">hash_mac.update(<span class="built_in">bytes</span>(ctypes.c_int(<span class="number">1</span>)))</span><br><span class="line"><span class="comment"># hash_mac.update(struct.pack(&#x27;=I&#x27;,1))</span></span><br><span class="line"><span class="keyword">if</span> (hash_mac.digest() == first[-<span class="number">32</span>:-<span class="number">12</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Correct Password&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Wrong Password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">blist = [blist[i:i+DEFAULT_PAGESIZE] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(DEFAULT_PAGESIZE,<span class="built_in">len</span>(blist),DEFAULT_PAGESIZE)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;输出的db文件地址&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(SQLITE_FILE_HEADER)<span class="comment">#写入文件头</span></span><br><span class="line">    t = AES.new(key ,AES.MODE_CBC ,first[-<span class="number">48</span>:-<span class="number">32</span>])</span><br><span class="line">    f.write(t.decrypt(first[:-<span class="number">48</span>]))</span><br><span class="line">    f.write(first[-<span class="number">48</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blist:</span><br><span class="line">            t = AES.new(key ,AES.MODE_CBC ,i[-<span class="number">48</span>:-<span class="number">32</span>])</span><br><span class="line">            f.write(t.decrypt(i[:-<span class="number">48</span>]))</span><br><span class="line">            f.write(i[-<span class="number">48</span>:])</span><br></pre></td></tr></table></figure></div><p>成功输出</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230724005411976.png"                      alt="image-20230724005411976"                ></p><p>直接搜一下flag</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings a.db |grep flag</span><br><span class="line">klllflag&#123;The_Is_Y0ur_prize&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a class=&quot;link&quot;   href=&quot;https://www.nssctf.cn/problem/2506&quot; &gt;巅峰极客 2022]easy_Forensic | NSSCTF &lt;i class=&quot;fa-regular fa-arrow-up-right-fro</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Misc" scheme="http://example.com/categories/CTF-WP/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>内存取证</title>
    <link href="http://example.com/2023/07/22/Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    <id>http://example.com/2023/07/22/Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</id>
    <published>2023-07-22T14:13:27.000Z</published>
    <updated>2023-07-23T16:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="只是一些草稿"><a href="#只是一些草稿" class="headerlink" title="只是一些草稿"></a>只是一些草稿</h2><p>取证工具地址<a class="link"   href="https://github.com/volatilityfoundation/volatility3" >volatility3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>参考<a class="link"   href="https://blog.csdn.net/m0_68012373/article/details/127419463" >(42条消息) 内存取证-volatility工具的使用 （史上更全教程，更全命令）_路baby的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>可以在插件后面跟-h获取该插件的帮助</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vol -f &quot;windows内存转储地址&quot;  windows.info #分析该内存转储的操作系统等其余信息</span><br><span class="line">vol -f &quot;windows内存转储地址&quot;  windows.pslist #会分析该内存的运行进程</span><br><span class="line">vol -f &quot;windows内存转储地址&quot; windows.filescan #分析有什么文件,其中地址是physaddr</span><br><span class="line">vol -f &quot;windows内存转储地址&quot; windows.dump -h</span><br><span class="line">usage: volatility windows.dumpfiles.DumpFiles [-h] [--pid PID] [--virtaddr VIRTADDR] [--physaddr PHYSADDR]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --help           show this help message and exit</span><br><span class="line">  --pid PID            Process ID to include (all other processes are excluded)</span><br><span class="line">  --virtaddr VIRTADDR  Dump a single _FILE_OBJECT at this virtual address</span><br><span class="line">  --physaddr PHYSADDR  Dump a single _FILE_OBJECT at this physical address</span><br><span class="line">  vol -f &quot;windows内存转储地址&quot; windows.dump --physaddr &quot;具体文件地址，详情可见windows.filescan插件的结果&quot; #可以将内存文件输出出来</span><br></pre></td></tr></table></figure></div><p>如果无法输出也可以通过diskgenius挂载该转储文件(作为虚拟硬盘),具体方法如下</p><p>1.将其作为虚拟硬盘打开</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307231459232.png"                      alt="image-20230723145957046"                ></p><p>2.右下角查看文件类型改为所有文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307231501287.png"                      alt="image-20230723150121254"                ></p><p>3.右键新出现的虚拟硬盘,选择已删除或格式化后的文件恢复</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307231507155.png"                      alt="image-20230723150714113"                ></p><p>即可打开对应的镜像获取文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230723150407151.png"                      alt="image-20230723150407151"                ></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[巅峰极客 2022easy_Forensic - Runwu2204](<a class="link"   href="https://runwu2204.github.io/2023/07/23/CTF" >https://runwu2204.github.io/2023/07/23/CTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> WP&#x2F;Misc&#x2F;巅峰极客 2022easy_Forensic&#x2F;)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;只是一些草稿&quot;&gt;&lt;a href=&quot;#只是一些草稿&quot; class=&quot;headerlink&quot; title=&quot;只是一些草稿&quot;&gt;&lt;/a&gt;只是一些草稿&lt;/h2&gt;&lt;p&gt;取证工具地址&lt;a class=&quot;link&quot;   href=&quot;https://github.com/volat</summary>
      
    
    
    
    <category term="Misc" scheme="http://example.com/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>ret2libc</title>
    <link href="http://example.com/2023/07/21/Pwn/ret2libc/"/>
    <id>http://example.com/2023/07/21/Pwn/ret2libc/</id>
    <published>2023-07-20T16:30:25.000Z</published>
    <updated>2023-07-20T17:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>ret2libc基于没有system或没有&#x2F;bin&#x2F;sh($0可以代替,因为在linux环境变量$0就是当前终端)的情况，构造出一条ret调用链来</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ROPgadget</span><br></pre></td></tr></table></figure></div><p>ROPgadget可以用于获取需要的字符串，汇编指令，最后可以通过栈溢出跳往对应的汇编指令中</p><h3 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install LibcSearcher</span><br></pre></td></tr></table></figure></div><p>该工具可以根据你所给的指令名称对应的指令地址获取对应的外部got表地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307210035601.png"                      alt="image-20230721003509555"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc=LibcSearcher(<span class="string">&#x27;指令名称&#x27;</span>,指令地址)<span class="comment">#可以获取内部got表对应地址所对应的glibc</span></span><br><span class="line">libc.dump(<span class="string">&quot;需要的指令&quot;</span>)<span class="comment">#可以获取需要指令的外部got表地址</span></span><br></pre></td></tr></table></figure></div><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><table><thead><tr><th align="left">section</th><th align="left">所在 segment</th><th align="left">section 属性</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">.plt</td><td align="left">代码段</td><td align="left">RE（可读，可执行）</td><td align="left">.plt section 实际就是通常所说的过程链接表（Procedure Linkage Table, PLT）</td></tr><tr><td align="left">.plt.got</td><td align="left">代码段</td><td align="left">RE</td><td align="left">.plt.got section 用于存放 __cxa_finalize 函数对应的 PLT 条目</td></tr><tr><td align="left">.got</td><td align="left">数据段</td><td align="left">RW（可读，可写）</td><td align="left">.got section 中可以用于存放全局变量的地址；.got section 中也可以用于存放不需要延迟绑定的函数的地址。</td></tr><tr><td align="left">.got.plt</td><td align="left">数据段</td><td align="left">RW</td><td align="left">.got.plt section 用于存放需要延迟绑定的函数的地址</td></tr></tbody></table><h4 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h4><p>当puts elfgot表内函数地址时，会puts出真正的表内的函数地址</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]<span class="comment">#获取的实际上是got.plt地址</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">inputs=<span class="number">0x40066B</span></span><br><span class="line">pop_rdi_retn=<span class="number">0x400743</span><span class="comment">#ROPgadget --binary babyof --only &#x27;pop|ret&#x27; |grep rdi</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;Do&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*o+p64(pop_rdi_retn)+p64(puts_got)+p64(puts_plt)+p64(inputs)+<span class="string">b&#x27;\n&#x27;</span>)<span class="comment">#当收到Do就输出后面的字符串</span></span><br></pre></td></tr></table></figure></div><p>pop_rdi_retn 将当前栈顶值(puts_got)传给rdi,然后将栈顶的指针向下移动到(puts_plt),并在之后跳转到栈顶值(puts_plt)</p><p>rdi(puts_got)将作为参数被puts_plt(puts函数)输出</p><p>因此可以泄露出puts的实际got表地址,不是elf中的got.plt</p><h4 id="system函数"><a href="#system函数" class="headerlink" title="system函数"></a>system函数</h4><p>详情可见[StormQ’s Blog (csstormq.github.io)](<a class="link"   href="https://csstormq.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B%E9%93%BE%E6%8E%A5%EF%BC%8814%EF%BC%89%EF%BC%9A.plt%E3%80%81.plt.got%E3%80%81.got" >https://csstormq.github.io/blog/计算机系统篇之链接（14）：.plt、.plt.got、.got <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和 .got.plt section 之间的区别)</p><p>因为system函数地址未知，但我们可以通过外部got表的地址，计算内部got表地址，获取got表内的函数(当加载libc的时候，函数都会在got表内),got表内函数的相对地址不会变</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts)</span><br><span class="line">base=puts-libc.dump(<span class="string">&#x27;puts&#x27;</span>)<span class="comment">#此处是与泄露的got地址相减，就可以获取got表的基址了</span></span><br><span class="line">system=base+libc.dump(<span class="string">&#x27;system&#x27;</span>)<span class="comment">#因为函数相对地址不变,就可以找到内部got表内的system函数地址</span></span><br></pre></td></tr></table></figure></div><h4 id="shell字符串"><a href="#shell字符串" class="headerlink" title="shell字符串"></a>shell字符串</h4><p>题目中可能没有提供字符串，在libc中会含有该字符串，当泄露了got表后可以获得</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system=base+libc.dump(&#x27;system&#x27;)#因为函数相对地址不变,就可以找到内部got表内的system函数地址</span><br></pre></td></tr></table></figure></div><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>x64常用rdi作为传递的第一个参数，所以我们需要一个将shell地址传给rdi的汇编指令(可以将shell字符串的地址存在栈中，通过pop edi调用)，同时又得让命令走向按照我们的意愿来，所以还得有个retn</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop rdi</span><br><span class="line"></span><br><span class="line">retn</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary &quot;二进制文件&quot; --only &#x27;pop|ret&#x27; |grep rdi #可以获取pop rdi retn的地址</span><br></pre></td></tr></table></figure></div><h3 id="栈对齐"><a href="#栈对齐" class="headerlink" title="栈对齐"></a>栈对齐</h3><p>system函数需要栈为16字节的倍数，因为此处只用了24字节(传参地址,shell字符串地址,system地址)</p><p>还需要一个地址作为占位,可以选择只有retn指令的地址</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary &quot;二进制文件&quot; --only &#x27;ret&#x27; #获取只有retn命令的地址</span><br></pre></td></tr></table></figure></div><h3 id="ROP链"><a href="#ROP链" class="headerlink" title="ROP链"></a>ROP链</h3><p>需要有个具体的栈的顺序</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(retn地址,传参地址,shell字符串地址,system地址)</span><br></pre></td></tr></table></figure></div><p>这样随着逐渐retn就可以获取shell了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ret2libc基于没有system或没有&amp;#x2F;bin&amp;#x2F;sh($0可以代替,因为在linux环境变量$0就是当前终端)的情况，构造出一条ret调用链来&lt;/p&gt;
&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Pwn" scheme="http://example.com/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>通过wsl实时pwn</title>
    <link href="http://example.com/2023/07/21/Pwn/%E9%80%9A%E8%BF%87wsl%E5%AE%9E%E6%97%B6pwn/"/>
    <id>http://example.com/2023/07/21/Pwn/%E9%80%9A%E8%BF%87wsl%E5%AE%9E%E6%97%B6pwn/</id>
    <published>2023-07-20T16:22:13.000Z</published>
    <updated>2023-07-20T16:29:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>vscode可装wsl插件与wsl远程连接</p><p>因为windows的环境跟linux不同获取了shell也无法正常执行命令所以需要使用wsl终端</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vscode可装wsl插件与wsl远程连接&lt;/p&gt;
&lt;p&gt;因为windows的环境跟linux不同获取了shell也无法正常执行命令所以需要使用wsl终端&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Pwn" scheme="http://example.com/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>dp泄露</title>
    <link href="http://example.com/2023/07/19/Crypto/dp%E6%B3%84%E9%9C%B2/"/>
    <id>http://example.com/2023/07/19/Crypto/dp%E6%B3%84%E9%9C%B2/</id>
    <published>2023-07-19T08:08:26.000Z</published>
    <updated>2023-07-19T09:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>dp &#x3D; d%(p-1)</p><p>∴dp*e&#x3D;d*e mod(p-1)</p><p>∴d*e&#x3D;dp*e+k1*(p-1)  ①</p><p>又有e*d &#x3D; 1mod((p-1)*(q-1))</p><p>∴e*d&#x3D;k2*(p-1)*(q-1)+1 ②</p><p>①带入②得</p><p>dp*e+k1*(p-1)&#x3D;k2*(p-1)*(q-1)+1k1,k2∈Z</p><p>dp*e &#x3D;k2*(p-1)*(q-1)+k3*(p-1)+1k2,k3∈Z</p><p>e*dp&#x3D;(k2*(q-1)+k3)*(p-1)+1</p><p>∵dp&lt;q-1</p><p>∴(k2*(q-1)+k3)&lt;e</p><p>设(k2*(q-1)+k3)&#x3D;i</p><p>可以通过遍历求出i的值</p><p>根据已知条件n&#x3D;p*q,i*(p-1)+1&#x3D;dp*e</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line"><span class="keyword">if</span> (dp*e-<span class="number">1</span>)%i==<span class="number">0</span>:</span><br><span class="line">p=((dp*e-<span class="number">1</span>)//i)+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line">q=n//p</span><br><span class="line"><span class="keyword">if</span> e*dp==i*(p-<span class="number">1</span>)+<span class="number">1</span>:</span><br><span class="line">d=<span class="built_in">__import__</span>(<span class="string">&#x27;gmpy2&#x27;</span>).invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>例题[<a class="link"   href="https://www.nssctf.cn/problem/3973" >LitCTF 2023]P_Leak | NSSCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>给了dp,n,c可以直接求</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="number">65537</span></span><br><span class="line"><span class="comment"># m=bytes_to_long(b&#x27;xxxx&#x27;)</span></span><br><span class="line"><span class="comment"># p=getPrime(512)</span></span><br><span class="line"><span class="comment"># q=getPrime(512)</span></span><br><span class="line"><span class="comment"># n=p*q</span></span><br><span class="line"><span class="comment"># phi=(p-1)*(q-1)</span></span><br><span class="line"><span class="comment"># d=inverse(e,phi)</span></span><br><span class="line"><span class="comment"># dp=d%(p-1)</span></span><br><span class="line"><span class="comment"># c=pow(m,e,n)</span></span><br><span class="line"><span class="comment"># print(&quot;dp=&quot;,dp)</span></span><br><span class="line"><span class="comment"># print(&quot;n=&quot;,n)</span></span><br><span class="line"><span class="comment"># print(&quot;c=&quot;,c)</span></span><br><span class="line">dp= <span class="number">5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line">n= <span class="number">50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line">c= <span class="number">39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line"><span class="keyword">if</span> (dp*e-<span class="number">1</span>)%i==<span class="number">0</span>:</span><br><span class="line">p=((dp*e-<span class="number">1</span>)//i)+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line">q=n//p</span><br><span class="line"><span class="keyword">if</span> e*dp==i*(p-<span class="number">1</span>)+<span class="number">1</span>:</span><br><span class="line">d=<span class="built_in">__import__</span>(<span class="string">&#x27;gmpy2&#x27;</span>).invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;Crypto.Util.number&#x27;</span>, fromlist=[<span class="string">&#x27;*&#x27;</span>]).long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;dp &amp;#x3D; d%(p-1)&lt;/p&gt;
&lt;p&gt;∴dp*e&amp;#x3D;d*e mod(p-1)&lt;/p&gt;
&lt;p&gt;∴d*e&amp;#x3D;dp*e+k1*(p-1)  ①&lt;/p&gt;
&lt;p&gt;又有e*d &amp;#x3D; 1mod((p-1)*(q-1))&lt;/p&gt;
&lt;p&gt;∴e*d&amp;#x3D</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>Sagemath</title>
    <link href="http://example.com/2023/07/18/Crypto/Sagemath/"/>
    <id>http://example.com/2023/07/18/Crypto/Sagemath/</id>
    <published>2023-07-18T13:30:06.000Z</published>
    <updated>2023-07-18T14:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>可以通过wsl apt包管理器安装sagemath</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sagemath</span><br></pre></td></tr></table></figure></div><p>再在windows中vscode安装wsl插件连接wsl，再在扩展中安装python插件</p><p>将python路径设置为sage-python的路径 即可在windows中即时编译运行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307182231531.png"                      alt="image-20230718223137438"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307182231043.png"                      alt="image-20230718223114951"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可以通过wsl apt包管理器安装sagemath&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Shell&quot;&gt;&lt;figure class=&quot;iseeu highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>hashcat</title>
    <link href="http://example.com/2023/07/18/Crypto/hashcat/"/>
    <id>http://example.com/2023/07/18/Crypto/hashcat/</id>
    <published>2023-07-18T08:38:51.000Z</published>
    <updated>2023-07-18T08:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://hashcat.net/hashcat/" >hashcat - advanced password recovery <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>也可以通过</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install hashcat</span><br></pre></td></tr></table></figure></div><p>nvidia需要cuda kit支持</p><h2 id="常用hash模式标识符"><a href="#常用hash模式标识符" class="headerlink" title="常用hash模式标识符"></a>常用hash模式标识符</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-m 0 #MD5</span><br><span class="line">-m 100 #SHA1</span><br><span class="line">-m 1400 #SHA256</span><br><span class="line">-m 1700#SHA512</span><br><span class="line">-m 3200#bcrypt</span><br><span class="line">-m 1000 #NTLm</span><br><span class="line">-m 400#WordPress</span><br><span class="line">-m 300#MySQL</span><br></pre></td></tr></table></figure></div><h2 id="常用攻击模式"><a href="#常用攻击模式" class="headerlink" title="常用攻击模式"></a>常用攻击模式</h2><h3 id="字典攻击"><a href="#字典攻击" class="headerlink" title="字典攻击"></a>字典攻击</h3><p>根据字典内值进行暴力搜索</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a 0 -m hash模式标识符 待破解hash 字典</span><br></pre></td></tr></table></figure></div><h3 id="组合攻击"><a href="#组合攻击" class="headerlink" title="组合攻击"></a>组合攻击</h3><p>组合多个字典值进行猜测</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a 1 -m hash模式标识符 待破解hash 后可跟多个字典</span><br></pre></td></tr></table></figure></div><h3 id="掩码攻击"><a href="#掩码攻击" class="headerlink" title="掩码攻击"></a>掩码攻击</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a 3 -m hash模式标识符 待破解hash 带掩码字符串</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?a任意字符</span><br><span class="line">?H大写16进制字符</span><br><span class="line">?h小写16进制字符</span><br><span class="line">?d数字字符</span><br><span class="line">?u大写字母</span><br><span class="line">?l小写字符</span><br><span class="line">?s特殊字符</span><br><span class="line">?b一字节内所有字符</span><br></pre></td></tr></table></figure></div><p>可以使用-w 线程数来使用多线程</p><p>其余用法可见hashcat -help</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[<a class="link"   href="https://www.nssctf.cn/problem/3971" >LitCTF 2023]md5的破解 | NSSCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag全是由小写字母及数字组成</span></span><br><span class="line">m=md5(flag).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag[:<span class="number">13</span>]+flag[<span class="number">15</span>:<span class="number">18</span>]+flag[<span class="number">19</span>:<span class="number">34</span>]+flag[<span class="number">35</span>:<span class="number">38</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;md5can3derypt213thoughcrsh&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 496603d6953a15846cd7cc476f146771</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>给了一部分字符和字符串的hash值可以通过hashcat掩码进行求值</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 -m 0 496603d6953a15846cd7cc476f146771 LitCTF&#123;md5can?a?a3de?arypt213thoughcr?ash&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 -m 0 496603d6953a15846cd7cc476f146771 LitCTF&#123;md5can?a?a3de?arypt213thoughcr?ash&#125;</span><br><span class="line">hashcat (v6.2.5) starting</span><br><span class="line"></span><br><span class="line">* Device #1: WARNING! Kernel exec timeout is not disabled.</span><br><span class="line">             This may cause &quot;CL_OUT_OF_RESOURCES&quot; or related errors.</span><br><span class="line">             To disable the timeout, see: https://hashcat.net/q/timeoutpatch</span><br><span class="line">* Device #2: WARNING! Kernel exec timeout is not disabled.</span><br><span class="line">             This may cause &quot;CL_OUT_OF_RESOURCES&quot; or related errors.</span><br><span class="line">             To disable the timeout, see: https://hashcat.net/q/timeoutpatch</span><br><span class="line">nvmlDeviceGetFanSpeed(): Not Supported</span><br><span class="line"></span><br><span class="line">CUDA API (CUDA 12.2)</span><br><span class="line">====================</span><br><span class="line">* Device #1: NVIDIA GeForce RTX 3060 Laptop GPU, 5135/6143 MB, 30MCU</span><br><span class="line"></span><br><span class="line">OpenCL API (OpenCL 3.0 CUDA 12.2.79) - Platform #1 [NVIDIA Corporation]</span><br><span class="line">=======================================================================</span><br><span class="line">* Device #2: NVIDIA GeForce RTX 3060 Laptop GPU, skipped</span><br><span class="line"></span><br><span class="line">Minimum password length supported by kernel: 0</span><br><span class="line">Maximum password length supported by kernel: 256</span><br><span class="line"></span><br><span class="line">Hashes: 1 digests; 1 unique digests, 1 unique salts</span><br><span class="line">Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates</span><br><span class="line"></span><br><span class="line">Optimizers applied:</span><br><span class="line">* Zero-Byte</span><br><span class="line">* Early-Skip</span><br><span class="line">* Not-Salted</span><br><span class="line">* Not-Iterated</span><br><span class="line">* Single-Hash</span><br><span class="line">* Single-Salt</span><br><span class="line">* Brute-Force</span><br><span class="line">* Raw-Hash</span><br><span class="line"></span><br><span class="line">ATTENTION! Pure (unoptimized) backend kernels selected.</span><br><span class="line">Pure kernels can crack longer passwords, but drastically reduce performance.</span><br><span class="line">If you want to switch to optimized kernels, append -O to your commandline.</span><br><span class="line">See the above message to find out about the exact limits.</span><br><span class="line"></span><br><span class="line">Watchdog: Temperature abort trigger set to 90c</span><br><span class="line"></span><br><span class="line">Host memory required for this attack: 1473 MB</span><br><span class="line"></span><br><span class="line">496603d6953a15846cd7cc476f146771:LitCTF&#123;md5can123dexrypt213thoughcrpsh&#125;</span><br></pre></td></tr></table></figure></div><p>在最后hash值冒号后就是破解出的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://hashcat.net/hashcat/&quot; &gt;hashcat - advanced password recovery &lt;i class=&quot;fa-regular fa-arrow-up-right-from-s</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>HNCTF 2022 WEEK3mazes</title>
    <link href="http://example.com/2023/07/18/CTF%20WP/Re/HNCTF%202022%20WEEK3mazes/"/>
    <id>http://example.com/2023/07/18/CTF%20WP/Re/HNCTF%202022%20WEEK3mazes/</id>
    <published>2023-07-18T02:10:12.000Z</published>
    <updated>2023-07-18T03:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>脚本参考<a class="link"   href="https://panda0s.top/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-100mazes/" >美团CTF: 100mazes - Pandaos’s blog (panda0s.top) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>主要函数</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307181026204.png"                      alt="image-20230718102654109"                ></p><p>此处的地址offset是物理地址，也就是文件内数据的地址，不是ida反编译中的地址</p><p>用010editor查看其物理地址为0x810</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307181036326.png"                      alt="image-20230718103649242"                ></p><p>通过第一个迷宫函数sub_140001460的地址(0x140001460)与入口点的虚拟地址(0x140001410)相减获取与0x810的相对地址</p><p>再将相对地址与实际的入口地址相加获取第一个迷宫函数物理地址</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [2]: hex(0x140001460-0x140001410+0x810)</span><br><span class="line">Out[2]: &#x27;0x860&#x27;#物理地址</span><br></pre></td></tr></table></figure></div><p>可以通过capstone反汇编器读取文件进行依次读取迷宫map1，读取的反汇编代码是带制表符\t的所以也需要带上</p><p>通过调试发现：</p><p>\tmov\tdword ptr [rsp是对map1，和起点的值进行赋值,每次读取rsp后面的值即可</p><p>\tmov\teax, dword ptr [rip 是对方向(wdsa对应的方向字母如第一个函数中是3tkA)进行赋值</p><p>\tlea\trcx, [rip是对map2进行赋值,直接读取后面跟的地址中625个字符即可</p><p>此处相对地址有点难以换算，我直接用的是他们之间的地址规律</p><p>每个迷宫函数相差</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307181051178.png"                      alt="image-20230718105137152"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [3]: 0x140003F20-0x140001460</span><br><span class="line">Out[3]: 10944</span><br></pre></td></tr></table></figure></div><p>每个map2相差</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307181052138.png"                      alt="image-20230718105224111"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307181052145.png"                      alt="image-20230718105231120"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [4]: 0x140A859E0-0x140A85010</span><br><span class="line">Out[4]: 2512</span><br></pre></td></tr></table></figure></div><p>搜索第一个迷宫函数中map2的物理地址，之后再每个函数+2512即可</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202307181054673.png"                      alt="image-20230718105402620"                ></p><p>exp:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> Cs</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">offset,tmp</span>):</span><br><span class="line">    data_bin = <span class="built_in">open</span>(<span class="string">r&#x27;E:\QQsavefile\MobileFile\mazes.exe&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()<span class="comment">#exe路径</span></span><br><span class="line">    data = data_bin[offset: offset+<span class="number">10921</span>]<span class="comment">#每个函数长度为10921</span></span><br><span class="line">    md = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">    inscnt = <span class="number">0</span></span><br><span class="line">    inscnt2 = <span class="number">0</span></span><br><span class="line">    map1 = []</span><br><span class="line">    map2 = []</span><br><span class="line">    map3 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> md.disasm(data, offset):</span><br><span class="line">        ins = <span class="string">&quot;0x%x:\t%s\t%s&quot;</span> % (i.address, i.mnemonic, i.op_str)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;\tmov\tdword ptr [rsp&#x27;</span> <span class="keyword">in</span> ins <span class="keyword">or</span> <span class="string">&#x27;\tmov\teax, dword ptr [rip&#x27;</span> <span class="keyword">in</span> ins:</span><br><span class="line">            <span class="keyword">if</span> inscnt &lt; <span class="number">625</span>:<span class="comment">#先读625个迷宫字符，作为map1</span></span><br><span class="line">                map1.append(<span class="built_in">int</span>(i.op_str.split(<span class="string">&#x27;, &#x27;</span>)[<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line">                inscnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> inscnt2 &lt; <span class="number">2</span>:<span class="comment">#625个字符读满后再遇到&#x27;\tmov\tdword ptr [rsp&#x27;就是赋值迷宫起始点的地址</span></span><br><span class="line">                map3.append(<span class="built_in">int</span>(i.op_str.split(<span class="string">&#x27;, &#x27;</span>)[<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line">                inscnt2 += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">elif</span> inscnt&lt;<span class="number">629</span>:<span class="comment">#最后遇到&#x27;\tmov\teax, dword ptr [rip&#x27;，就对方向赋值</span></span><br><span class="line">                off1 =i.address+<span class="built_in">int</span>(i.op_str.split(<span class="string">&#x27;, &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">                map1_data = data_bin[<span class="number">0xa76098</span>+tmp*<span class="number">5</span>: <span class="number">0xa76098</span>+<span class="number">4</span>+tmp*<span class="number">5</span> ] <span class="comment">#方向数组存在规律，每个值相差5          </span></span><br><span class="line">                map1=map1+(<span class="built_in">list</span>(map1_data))</span><br><span class="line">                inscnt+=<span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;\tlea\trcx, [rip&#x27;</span> <span class="keyword">in</span> ins:<span class="comment">#遇到这个字符串对map2进行赋值</span></span><br><span class="line">            map2_data = data_bin[tmp*<span class="number">2512</span>+<span class="number">0xa82610</span>: tmp*<span class="number">2512</span>+<span class="number">0xa82610</span>+ <span class="number">4</span> * <span class="number">625</span>]<span class="comment">#map2存在规律每个相差2512</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">625</span>):</span><br><span class="line">                map2.append(struct.unpack(<span class="string">&quot;I&quot;</span>, map2_data[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>])[<span class="number">0</span>])<span class="comment">#将4字节解包为unsigned int型</span></span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">625</span>):</span><br><span class="line">        data.append(map1[i] ^ map2[i])<span class="comment">#dword_140A85010[25 * v629 + *(_DWORD *)&amp;v628[5]] ^ v630[25 * v629 + *(_DWORD *)&amp;v628[5]]) != 214原函数的map是经过异或加密的，异或回去获取原始的地图</span></span><br><span class="line">    <span class="keyword">return</span> data, <span class="built_in">bytearray</span>(map1[-<span class="number">4</span>:]), map3<span class="comment">#返回原始地图，方向数组，起点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkValid</span>(<span class="params"><span class="built_in">map</span>, x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; <span class="number">24</span> <span class="keyword">or</span> y &gt; <span class="number">24</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>[y * <span class="number">25</span> + x] == <span class="number">0xd6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params"><span class="built_in">map</span>, startX, startY, direct, path</span>):<span class="comment">#此处不用dfs搜索，因为路径都是单一的每次只要找到了下一次的路径就往路径列表内增加对应的值</span></span><br><span class="line">    <span class="built_in">map</span>[startY * <span class="number">25</span> + startX] = <span class="built_in">ord</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, path</span><br><span class="line"></span><br><span class="line">    all_dir = []</span><br><span class="line">    <span class="keyword">if</span> checkValid(<span class="built_in">map</span>, startX - <span class="number">1</span>, startY):</span><br><span class="line">        all_dir.append((startX-<span class="number">1</span>, startY, direct[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span> checkValid(<span class="built_in">map</span>, startX+ <span class="number">1</span>, startY ):</span><br><span class="line">        all_dir.append((startX+ <span class="number">1</span>, startY , direct[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">if</span> checkValid(<span class="built_in">map</span>, startX , startY- <span class="number">1</span>):</span><br><span class="line">        all_dir.append((startX , startY- <span class="number">1</span>, direct[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">if</span> checkValid(<span class="built_in">map</span>, startX, startY + <span class="number">1</span>):</span><br><span class="line">        all_dir.append((startX, startY+<span class="number">1</span>, direct[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> all_dir:</span><br><span class="line">        result = solve(<span class="built_in">map</span>, <span class="built_in">dir</span>[<span class="number">0</span>], <span class="built_in">dir</span>[<span class="number">1</span>], direct, path + <span class="built_in">dir</span>[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printMap</span>(<span class="params">map1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">            line += <span class="built_in">chr</span>(map1[i * <span class="number">25</span> + j])</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">total = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10933056</span>+<span class="number">10944</span>,<span class="number">10944</span>):<span class="comment">#每个迷宫函数的地址进行遍历</span></span><br><span class="line">    map1, dirs, target = decode(i+<span class="number">0x860</span>,tmp)</span><br><span class="line">    tmp+=<span class="number">1</span></span><br><span class="line">    total +=solve(map1, target[<span class="number">1</span>], target[<span class="number">0</span>], dirs.decode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&#x27;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">mm = hashlib.md5(total.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(total))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;nssctf&#123;%s&#125;&#x27;</span> %mm)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;脚本参考&lt;a class=&quot;link&quot;   href=&quot;https://panda0s.top/2021/05/23/%E7%BE%8E%E5%9B%A2CTF-100mazes/&quot; &gt;美团CTF: 100mazes - Pandaos’s blog (panda0s.to</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Re" scheme="http://example.com/categories/CTF-WP/Re/"/>
    
    
  </entry>
  
  <entry>
    <title>安洵杯 2020easyaes</title>
    <link href="http://example.com/2023/07/17/CTF%20WP/Crypto/%E5%AE%89%E6%B4%B5%E6%9D%AF%202020easyaes/"/>
    <id>http://example.com/2023/07/17/CTF%20WP/Crypto/%E5%AE%89%E6%B4%B5%E6%9D%AF%202020easyaes/</id>
    <published>2023-07-17T08:50:12.000Z</published>
    <updated>2023-07-17T09:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"></span><br><span class="line">iv = flag.strip(<span class="string">b&#x27;d0g3&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">LENGTH = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="keyword">assert</span> LENGTH == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">hint = os.urandom(<span class="number">4</span>) * <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(hint)^bytes_to_long(key))</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypto</span>(<span class="params">message</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(encrypto(msg))[-<span class="number">32</span>:])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">56631233292325412205528754798133970783633216936302049893130220461139160682777</span></span><br><span class="line"><span class="string">b&#x27;3c976c92aff4095a23e885b195077b66&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>这道题涉及AES的ECB加密</p><p>因为hint是4字节重复8次，共32字节，而key只有16字节，异或后只有后16字节改变了可以通过前16字节获取hint，再异或回去就可以获得key了</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hint=<span class="string">&#x27;&#123;:&lt;4X&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">56631233292325412205528754798133970783633216936302049893130220461139160682777</span>)[:<span class="number">4</span>*<span class="number">2</span>]*<span class="number">8</span></span><br><span class="line">key=long_to_bytes(a^<span class="built_in">int</span>(hint,<span class="number">16</span>))</span><br></pre></td></tr></table></figure></div><p>根据这题，我们需要获取iv，根据CBC模式和ECB模式的转化可以获取</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="string">b&#x27;xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyy&#x27;</span></span><br><span class="line">key=<span class="string">b&#x27;aEs_1s_SO0o_e4sY&#x27;</span></span><br><span class="line">iv=<span class="string">b&#x27;D0g3D0g3D0g3D0g3&#x27;</span></span><br><span class="line">aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc=aes.encrypt(m)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure></div><p>其等效于ECB模式的，第一步第一组明文异或初始向量，第二部第二组明文异或上一次的加密结果，以此类推</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line">m1=<span class="string">b&#x27;xxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">m2=<span class="string">b&#x27;yyyyyyyyyyyyyyyy&#x27;</span></span><br><span class="line">aes=AES.new(key,AES.MODE_ECB)</span><br><span class="line">enc1=aes.encrypt(strxor(m1,iv))</span><br><span class="line">enc2=aes.encrypt(strxor(m2,enc1))</span><br><span class="line">enc=enc1+enc2</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure></div><p>此处msg有64字节，所以有4组，等效于ECB模式的</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line">m1=msg[:<span class="number">16</span>]</span><br><span class="line">m2=msg[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">m3=msg[<span class="number">32</span>:<span class="number">48</span>]</span><br><span class="line">m4=msg[<span class="number">48</span>:]</span><br><span class="line">aes=AES.new(key,AES.MODE_ECB)</span><br><span class="line">enc1=aes.encrypt(strxor(m1,iv))</span><br><span class="line">enc2=aes.encrypt(strxor(m2,enc1))</span><br><span class="line">enc3=aes.encrypt(strxor(m3,enc2))</span><br><span class="line">enc4=aes.encrypt(strxor(m4,enc3))</span><br><span class="line">enc=enc1+enc2+enc3+enc4</span><br></pre></td></tr></table></figure></div><p>那我们可以直接从enc4递推回iv</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line">m1=msg[:<span class="number">16</span>]</span><br><span class="line">m2=msg[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">m3=msg[<span class="number">32</span>:<span class="number">48</span>]</span><br><span class="line">m4=msg[<span class="number">48</span>:]</span><br><span class="line">enc4=<span class="string">b&#x27;3c976c92aff4095a23e885b195077b66&#x27;</span></span><br><span class="line">enc4=long_to_bytes(<span class="built_in">int</span>(enc4,<span class="number">16</span>))<span class="comment">#从16进制字符串转化回原字符串</span></span><br><span class="line">aes=AES.new(key,AES.MODE_ECB)</span><br><span class="line">enc3=strxor(aes.decrypt(enc4),m4)</span><br><span class="line">enc2=strxor(aes.decrypt(enc3),m3)</span><br><span class="line">enc1=strxor(aes.decrypt(enc2),m2)</span><br><span class="line">iv=strxor(aes.decrypt(enc1),m1)</span><br></pre></td></tr></table></figure></div><p>exp:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line">a=<span class="number">56631233292325412205528754798133970783633216936302049893130220461139160682777</span></span><br><span class="line">enc4=<span class="string">b&#x27;3c976c92aff4095a23e885b195077b66&#x27;</span></span><br><span class="line">enc4=long_to_bytes(<span class="built_in">int</span>(enc4,<span class="number">16</span>))</span><br><span class="line">msgs=[bytes_to_long(msg[i:i+<span class="number">16</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(msg),<span class="number">16</span>)]</span><br><span class="line">hint=<span class="string">&#x27;&#123;:&lt;4X&#125;&#x27;</span>.<span class="built_in">format</span>(a)[:<span class="number">4</span>*<span class="number">2</span>]*<span class="number">8</span></span><br><span class="line">key=long_to_bytes(a^<span class="built_in">int</span>(hint,<span class="number">16</span>))</span><br><span class="line">aes=AES.new(key,AES.MODE_ECB)</span><br><span class="line">enc=[<span class="number">0</span>]*<span class="number">5</span></span><br><span class="line">enc[<span class="number">4</span>]=enc4</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">enc[i]=long_to_bytes(bytes_to_long(aes.decrypt(enc[i+<span class="number">1</span>]))^msgs[i])</span><br><span class="line"><span class="built_in">print</span>(enc[<span class="number">0</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Python&quot;&gt;&lt;figure class=&quot;iseeu highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="CTF WP" scheme="http://example.com/categories/CTF-WP/"/>
    
    <category term="Crypto" scheme="http://example.com/categories/CTF-WP/Crypto/"/>
    
    
  </entry>
  
</feed>
