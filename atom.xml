<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>runwu2204</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-19T13:01:36.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>runwu2204</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>claripy</title>
    <link href="http://example.com/2024/01/18/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/claripy/"/>
    <id>http://example.com/2024/01/18/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/claripy/</id>
    <published>2024-01-18T12:00:27.000Z</published>
    <updated>2024-01-19T13:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>类似于z3用于创建变量求解（可用于argv传参或者 寄存器传参）</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>BVS -用于创建位向量符号  </p><p><code>BVS(&#39;变量名&#39;,长度)</code></p><p>BVV -用于创建位向量值(主要用于添加条件)</p><p><code>BVV(bytes数据)</code></p></blockquote><h2 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h2><blockquote><p>stdin 标准输入现在似乎不支持添加条件 或者只对应架构下系统添加条件 比如pe文件则需要在windows环境下添加</p><p>寄存器</p><blockquote><p>example:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag=BVS(<span class="string">&#x27;flag&#x27;</span>,<span class="number">8</span>*(flag_length))<span class="comment">#BVS长度单位是bit,创建变量对象</span></span><br><span class="line">state=p.factory.entry_state()<span class="comment">#创建状态对象</span></span><br><span class="line">state.regs.eax=flag<span class="comment">#不会超过eax大小</span></span><br></pre></td></tr></table></figure></div></blockquote><p>内存</p><blockquote><p>example:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag=BVS(<span class="string">&#x27;flag&#x27;</span>,<span class="number">8</span>*(flag_length))<span class="comment">#BVS长度单位是bit,创建变量对象</span></span><br><span class="line">state=p.factory.entry_state()<span class="comment">#创建状态对象</span></span><br><span class="line">state.memory.store(addr,flag)<span class="comment">#在指定地址addr写入flag(长度为8字节)也可以自定义长度</span></span><br></pre></td></tr></table></figure></div></blockquote></blockquote><h2 id="添加条件"><a href="#添加条件" class="headerlink" title="添加条件"></a>添加条件</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.solver.add(条件语句)</span><br></pre></td></tr></table></figure></div><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.solver.<span class="built_in">eval</span>(变量对象)</span><br></pre></td></tr></table></figure></div><p>00_angr_find</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种 直接explore</span></span><br><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> claripy <span class="keyword">import</span> *</span><br><span class="line">p=Project(<span class="string">&#x27;./00_angr_find&#x27;</span>)</span><br><span class="line">state=p.factory.entry_state()<span class="comment">#</span></span><br><span class="line">sm=p.factory.simgr(state)</span><br><span class="line">sm.explore(find=<span class="number">0x08048675</span>)</span><br><span class="line">sm.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#第二种 通过栈操作实际上是内存操作</span></span><br><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> claripy <span class="keyword">import</span> *</span><br><span class="line">p=Project(<span class="string">&#x27;./00_angr_find&#x27;</span>)</span><br><span class="line">state=p.factory.entry_state(addr=<span class="number">0x0804860F</span>)<span class="comment">#地址不放在开始 是因为为了防止其他函数影响操作</span></span><br><span class="line">flag=BVS(<span class="string">&#x27;flag&#x27;</span>,<span class="number">8</span>*<span class="number">9</span>)</span><br><span class="line">state.solver.add(*[And(flag[i+<span class="number">7</span>:i]&lt;=<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>),flag[i+<span class="number">7</span>:i]&gt;=<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">72</span>,<span class="number">8</span>)])<span class="comment">#注意是大端序所以此处从倒数第二个字符开始，因为倒数第一个字符是结束符\x00</span></span><br><span class="line">state.solver.add(flag[<span class="number">7</span>:<span class="number">0</span>]==<span class="number">0</span>)<span class="comment">#结束符条件</span></span><br><span class="line">addr=state.regs.ebp-<span class="number">0x15</span></span><br><span class="line">state.memory.store(addr,flag)</span><br><span class="line">sm=p.factory.simgr(state)</span><br><span class="line">sm.explore(find=<span class="number">0x8048675</span>)</span><br><span class="line"><span class="built_in">int</span>.to_bytes(sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag),<span class="number">9</span>,<span class="string">&#x27;big&#x27;</span>)<span class="comment">#注意是大端序（低地址在高位，高地址在低位)</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;类似于z3用于创建变量求解（可用于argv传参或者 寄存器传参）&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;BVS -用于创建位向量符号  &lt;</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="angr分析框架" scheme="http://example.com/categories/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>基本使用</title>
    <link href="http://example.com/2024/01/15/Re/qiling%E6%A1%86%E6%9E%B6/qilingida/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/01/15/Re/qiling%E6%A1%86%E6%9E%B6/qilingida/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2024-01-15T08:23:03.000Z</published>
    <updated>2024-01-15T16:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a class="link"   href="https://docs.qiling.io/en/latest/ida/" >IDAPro Plugin - Qiling Framework Documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>在进行qiling框架搭建的过程中需要先进行setup</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151624593.png"                      alt="image-20240115162436570"                ></p><p>主要需要处理的就下面两处 其他可以直接为空</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151702214.png"                      alt="image-20240115170252163"                ></p><p>Rootfs path 在<a class="link"   href="https://github.com/qilingframework/qiling" >qilingframework&#x2F;qiling: A True Instrumentable Binary Emulation Framework (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这个仓库内</p><p>需要进行<code>git clone —recursive https://github.com/qilingframework/qiling</code> —recursive的原因是因为有子模块需要导出</p><p>clone的仓库位置\examples\rootfs 存有很多的运行库此处以linux_8664为例</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151722456.png"                      alt="image-20240115172208425"                ></p><p>脚本需要自己编写，现在最简单的例子如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QILING_IDA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">custom_prepare</span>(<span class="params">self, ql</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">custom_continue</span>(<span class="params">self, ql:Qiling</span>):</span><br><span class="line">        hook = []</span><br><span class="line">        <span class="keyword">return</span> hook</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">custom_step</span>(<span class="params">self, ql:Qiling</span>):</span><br><span class="line">        hook = []</span><br><span class="line">        <span class="keyword">return</span> hook</span><br></pre></td></tr></table></figure></div><p>然后将这个脚本的位置写入Custom script path内即可</p><p>start后出现下列字符串代表加载成功</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151731290.png"                      alt="image-20240115173124263"                ></p><p>然后在左下角（下面的都是在这个地方输入）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151733330.png"                      alt="image-20240115173347292"                ></p><blockquote><p>输入下面的字符串,获取当前的ida qiling插件的对象</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ida_ida</span><br><span class="line">ql_plugin = ida_ida.ql_plugin </span><br><span class="line">qlemu = ql_plugin.qlemu </span><br><span class="line">ql = qlemu.ql</span><br></pre></td></tr></table></figure></div><p>获取内存映射表</p><p><code>ql.mem.mapinfo</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151740267.png"                      alt="image-20240115174012240"                ></p><p>此处我的elf是qilinglab-x86_64(首地址是0x555555554000)</p><p>读取对应位置的内存信息</p><p><code>ql.mem.read(0x555555554000,10)</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151742247.png"                      alt="image-20240115174208225"                ></p><p>是正常的elf文件 且映射对的上文件头</p><p>因为ida插件的setpc存在问题（pc跟汇编中的eip作用一样）对自己要运行的指令进行setpc操作时地址不是对应的内存映射表的地址 也就是ra无法对应va所以需要手动更改基址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151745818.png"                      alt="image-20240115174512766"                ></p><p>输入刚刚内存映射表得到的elf首地址即可</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151745824.png"                      alt="image-20240115174555798"                ></p><p>在要运行的地方右键选择setpc即可</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151746153.png"                      alt="image-20240115174630104"                ></p><p>然后步入操作（step）直接输入ctrl+shift+f9即可</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;a class=&quot;link&quot;   href=&quot;https://docs.qiling.io/en/latest/ida/&quot; &gt;IDAPro Plugin - Qiling Framework Documentation &lt;i class=&quot;fa-regular fa-</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="qiling框架" scheme="http://example.com/categories/Re/qiling%E6%A1%86%E6%9E%B6/"/>
    
    <category term="qilingida" scheme="http://example.com/categories/Re/qiling%E6%A1%86%E6%9E%B6/qilingida/"/>
    
    
  </entry>
  
  <entry>
    <title>环境配置</title>
    <link href="http://example.com/2024/01/15/Re/qiling%E6%A1%86%E6%9E%B6/qilingida/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2024/01/15/Re/qiling%E6%A1%86%E6%9E%B6/qilingida/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2024-01-15T07:31:29.000Z</published>
    <updated>2024-01-15T08:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>先需要安装python中的 qiling插件</p><p><code>pip install qiling</code></p><p>找到qiling安装位置</p><p><code>pip show qiling</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151551166.png"                      alt="image-20240115155157099"                ></p><p>访问location所指目录下的qiling文件夹，下面用用相对地址代指位置</p><p>qiling\extensions\idaplugin下的qilingida.py通过创建链接的操作放到ida目录下的plugins</p><p><code>mklink ida的plugins路径\qilingida.py qiling\extensions\idaplugin\qilingida.py</code></p><p>效果类似下面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151620095.png"                      alt="image-20240115162015058"                ></p><p>打开ida后出现这个即可</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202401151622063.png"                      alt="image-20240115162202017"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先需要安装python中的 qiling插件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install qiling&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到qiling安装位置&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip show qiling&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img  
     </summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="qiling框架" scheme="http://example.com/categories/Re/qiling%E6%A1%86%E6%9E%B6/"/>
    
    <category term="qilingida" scheme="http://example.com/categories/Re/qiling%E6%A1%86%E6%9E%B6/qilingida/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg+ida设置</title>
    <link href="http://example.com/2024/01/03/Re/x86/windbg+ida%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2024/01/03/Re/x86/windbg+ida%E8%AE%BE%E7%BD%AE/</id>
    <published>2024-01-03T14:27:46.000Z</published>
    <updated>2024-01-03T15:49:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>进入ida目录&#x2F;cfg&#x2F;ida.cfg</p><p>如果你的ida是64位架构的则填入x64(我的ida是7.6 ida和ida64都是64位的)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/image-20240103222822214.png"                      alt="image-20240103222822214"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;进入ida目录&amp;#x2F;cfg&amp;#x2F;ida.cfg&lt;/p&gt;
&lt;p&gt;如果你的ida是64位架构的则填入x64(我的ida是7.6 ida和ida64都是64位的)&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
        </summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>state</title>
    <link href="http://example.com/2024/01/02/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/state/"/>
    <id>http://example.com/2024/01/02/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/state/</id>
    <published>2024-01-02T10:48:04.000Z</published>
    <updated>2024-01-02T14:04:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://docs.angr.io/en/latest/core-concepts/states.html" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><table><thead><tr><th>state</th><th>explain</th></tr></thead><tbody><tr><td>.blank_state</td><td>大多数数据未初始化，进入时返回没有约束的符号值</td></tr><tr><td>.entry_state</td><td>准备调用main之前的状态</td></tr><tr><td>.full_init_state</td><td>共享库和预定义内容都已经加载完毕，在enter状态之前，例如刚刚加载完共享库</td></tr><tr><td>.call_state</td><td>准备调用函数的状态</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://docs.angr.io/en/latest/core-concepts/states.html&quot; &gt;官方文档 &lt;i class=&quot;fa-regular fa-arrow-up-right-from-squar</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="angr分析框架" scheme="http://example.com/categories/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>2</title>
    <link href="http://example.com/2024/01/01/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/02/"/>
    <id>http://example.com/2024/01/01/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/02/</id>
    <published>2024-01-01T09:37:04.000Z</published>
    <updated>2024-01-01T09:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>explore的avoid参数可以用lambda确定find和avoid</p><p>find-用于寻找</p><p>avoid-用于避免</p><p>exp</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line">p=Project(<span class="string">&quot;./02_angr_find_condition&quot;</span>)</span><br><span class="line">state=p.factory.entry_state()</span><br><span class="line">sm=p.factory.simulation_manager(state)</span><br><span class="line">sm.explore(find=<span class="keyword">lambda</span> x: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> x.posix.dumps(<span class="number">1</span>),avoid= <span class="keyword">lambda</span> y: <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> y.posix.dumps(<span class="number">1</span>))<span class="comment">#限定标准输出中有&quot;Good Job.&quot;为需要寻找的，有&quot;Try again.&quot;是需要避免的，avoid用于增加查找速度</span></span><br><span class="line">sm.explore(find=<span class="keyword">lambda</span> x: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> x.posix.dumps(<span class="number">1</span>))<span class="comment">#也可以不加avoid 会慢一点</span></span><br><span class="line">sm.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;explore的avoid参数可以用lambda确定find和avoid&lt;/p&gt;
&lt;p&gt;find-用于寻找&lt;/p&gt;
&lt;p&gt;avoid-用于避免&lt;/p&gt;
&lt;p&gt;exp&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Python&quot;</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="angr分析框架" scheme="http://example.com/categories/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>1</title>
    <link href="http://example.com/2024/01/01/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/01/"/>
    <id>http://example.com/2024/01/01/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/01/</id>
    <published>2023-12-31T17:19:31.000Z</published>
    <updated>2023-12-31T17:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>avoid- 用于提升angr计算速度,避免进入内部</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/image-20240101013027355.png"                      alt="image-20240101013027355"                ></p><p>在设置explore参数时增加avoid参数并将参数设置为avoid_me的首地址</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line">p=Project(<span class="string">&quot;./01_angr_avoid&quot;</span>)</span><br><span class="line">state=p.factory.entry_state()</span><br><span class="line">sm=p.factory.simulation_manager(state)</span><br><span class="line">sm.explore(find=<span class="number">0x080492FB</span>,avoid=<span class="number">0x0080492BB</span>)</span><br><span class="line">sm.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;avoid- 用于提升angr计算速度,避免进入内部&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                   </summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="angr分析框架" scheme="http://example.com/categories/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>0</title>
    <link href="http://example.com/2023/12/31/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/00/"/>
    <id>http://example.com/2023/12/31/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/00/</id>
    <published>2023-12-31T09:10:02.000Z</published>
    <updated>2023-12-31T10:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *<span class="comment">#导入angr框架</span></span><br><span class="line">p=Project(<span class="string">&quot;二进制文件&quot;</span>)<span class="comment">#导入二进制文件,第一步一般就是这个</span></span><br><span class="line">state=p.factory.entry_state()<span class="comment">#状态，entry_state指的是程序刚进行时候的状态(包含寄存器之类的)</span></span><br><span class="line">sm=p.factory.simulation_manager(state)<span class="comment">#模拟状态管理器类似于z3的新建solver(个人理解),内部参数为状态，可以为刚刚的entry_state()</span></span><br><span class="line">sm.explore(find=地址)<span class="comment">#启动简单搜索,具体在下方</span></span><br><span class="line"><span class="comment">#也可以使用lambda添加条件 sm.explore(find=lambda x: &quot;Good&quot; in x.posix.dumps(1)) 这个条件就是Good字符串出现在标准输出中</span></span><br><span class="line">sm.found[<span class="number">0</span>].posix.dump(<span class="number">0</span>)<span class="comment">#获取标准输入</span></span><br></pre></td></tr></table></figure></div><p><a class="link"   href="https://www.jianshu.com/p/95dc43d52227" >Simulation Manager <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>简单探索(Simple Exploration)</p><p>符号执行最普遍的操作是找到能够到达某个地址的状态，同时丢弃其他不能到达这个地址的状态。SM为使用这种执行模式提供了捷径：<code>.explore()</code>方法。当使用<code>find</code>参数启动<code>.explore()</code>方法时，程序将会一直执行，直到发现了一个和<code>find</code>参数指定的条件相匹配的状态。<code>find</code>参数的内容可以是想要执行到的某个地址、或者想要执行到的地址列表、或者一个获取state作为参数并判断这个state是否满足某些条件的函数。当<code>active</code>stash中的任意状态和<code>find</code>中的条件匹配的时候，它们就会被放到<code>found</code>stash中，执行随即停止。之后你可以探索找到的状态，或者决定丢弃它，转而探索其它状态。你还可以按照和<code>find</code>相同的格式设置另一个参数——<code>avoid</code>。当一个状态和<code>avoid</code>中的条件匹配时，它就会被放进<code>avoided</code>stash中，之后继续执行。最后，<code>num_find</code>参数指定函数返回前需要找到的符合条件的状态的个数，这个参数默认是1。当然，如果<code>active</code>stash中已经没有状态可以执行，那么不论有没有找到你指定的状态个数，都会停止执行。</p></blockquote><h2 id="SimState类"><a href="#SimState类" class="headerlink" title="SimState类"></a><a class="link"   href="https://blog.csdn.net/zhuzhuzhu22/article/details/80408760" >SimState类 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><blockquote><p>p.factory.entry_state(),sm.found[0]同属于SimState类 </p><p>posix – MISNOMER: 操作系统或者环境模型的表示 (包含stdin(0),stdout(1),stderr(2))</p><p>posix.dumps()用于导出posix中的输入输出、错误，参数就是对应的数据标号</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Python&quot;&gt;&lt;figure class=&quot;iseeu highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="angr分析框架" scheme="http://example.com/categories/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>环境配置</title>
    <link href="http://example.com/2023/12/30/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/12/30/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-12-29T17:13:11.000Z</published>
    <updated>2023-12-29T17:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>pip install angr -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</code></p><p>即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;pip install angr -i https://pypi.tuna.tsinghua.edu.cn/simple some-package&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即可&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="angr分析框架" scheme="http://example.com/categories/Re/angr%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>e特别大的情况</title>
    <link href="http://example.com/2023/12/17/Crypto/e%E7%89%B9%E5%88%AB%E5%A4%A7%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <id>http://example.com/2023/12/17/Crypto/e%E7%89%B9%E5%88%AB%E5%A4%A7%E7%9A%84%E6%83%85%E5%86%B5/</id>
    <published>2023-12-17T10:18:44.000Z</published>
    <updated>2023-12-17T10:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Boneh-Durfee-攻击"><a href="#Boneh-Durfee-攻击" class="headerlink" title="Boneh Durfee 攻击"></a>Boneh Durfee 攻击</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct</span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this</span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions</span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">97814568264814384858194701955408461509880555772006698372422205341758322175891474378211599333051180365254844248340812534463000531890490435018379585036704801177155418066770861143206836558793774360498040810255823235715535487716966004194143204900564413879660115112965484824906920141847149888933004740523449213441</span></span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line">    e = <span class="number">93943500165298065499950418373429723509334252629406924973909070866091749987346174290549648466771963135864917881154270768788129489671486923171733460927672763251885052132144244633336183737015936611716827476566876619327956203686756399730968768494676888428137426449681845021696056187478027217734766494935085365973</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">0.280</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;private key found:&quot;</span>, d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example() </span><br></pre></td></tr></table></figure></div><h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">x,y</span>):       <span class="comment">#使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x//y)</span><br><span class="line">        x,y=y,x%y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continued_fraction</span>(<span class="params">sub_res</span>):</span><br><span class="line">    numerator,denominator=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:      <span class="comment">#从sublist的后面往前循环</span></span><br><span class="line">        denominator,numerator=numerator,i*numerator+denominator</span><br><span class="line">    <span class="keyword">return</span> denominator,numerator   <span class="comment">#得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#求解每个渐进分数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_fraction</span>(<span class="params">x,y</span>):</span><br><span class="line">    res=transform(x,y)</span><br><span class="line">    res=<span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction,(res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(res)))))  <span class="comment">#将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a,b,c</span>):      <span class="comment">#由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par=gmpy2.isqrt(b*b-<span class="number">4</span>*a*c)   <span class="comment">#由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1,x2=(-b+par)//(<span class="number">2</span>*a),(-b-par)//(<span class="number">2</span>*a)</span><br><span class="line">    <span class="keyword">return</span> x1,x2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e,n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d,k) <span class="keyword">in</span> sub_fraction(e,n):  <span class="comment">#用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>:                     <span class="comment">#可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e*d-<span class="number">1</span>)%k!=<span class="number">0</span>:             <span class="comment">#ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        phi=(e*d-<span class="number">1</span>)//k               <span class="comment">#这个结果就是 φ(n)</span></span><br><span class="line">        px,qy=get_pq(<span class="number">1</span>,n-phi+<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">if</span> px*qy==n:</span><br><span class="line">            p,q=<span class="built_in">abs</span>(<span class="built_in">int</span>(px)),<span class="built_in">abs</span>(<span class="built_in">int</span>(qy))     <span class="comment">#可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))     <span class="comment">#求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">e = <span class="number">14058695417015334071588010346586749790539913287499707802938898719199384604316115908373997739604466972535533733290829894940306314501336291780396644520926473</span></span><br><span class="line">n = <span class="number">33608051123287760315508423639768587307044110783252538766412788814888567164438282747809126528707329215122915093543085008547092423658991866313471837522758159</span></span><br><span class="line">d=wienerAttack(e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>,d)`</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Boneh-Durfee-攻击&quot;&gt;&lt;a href=&quot;#Boneh-Durfee-攻击&quot; class=&quot;headerlink&quot; title=&quot;Boneh Durfee 攻击&quot;&gt;&lt;/a&gt;Boneh Durfee 攻击&lt;/h1&gt;&lt;div class=&quot;highlight</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>apk签名</title>
    <link href="http://example.com/2023/11/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/apk%E7%AD%BE%E5%90%8D/"/>
    <id>http://example.com/2023/11/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/apk%E7%AD%BE%E5%90%8D/</id>
    <published>2023-11-09T15:38:32.000Z</published>
    <updated>2023-11-09T16:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>apk签名需要keystore文件 由下列命令生成</p><p><code>keytool -genkey -alias &quot;别名&quot; -keyalg RSA -keysize 2048 -validity 36500 -keystore &quot;要生成的文件名&quot;</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202311100037717.png"                      alt="image-20231110003739570"                ></p><p>选择构建apk文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202311100038707.png"                      alt="image-20231110003851655"                ></p><p>输入你keystore的密码<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202311100046908.png"                      alt="image-20231110004652859"                ></p><p>直接下一步下一步即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;apk签名需要keystore文件 由下列命令生成&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keytool -genkey -alias &amp;quot;别名&amp;quot; -keyalg RSA -keysize 2048 -validity 36500 -keystore &amp;quot;要生</summary>
      
    
    
    
    <category term="安卓开发" scheme="http://example.com/categories/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>golangAAR导入</title>
    <link href="http://example.com/2023/11/02/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/golangAAR%E5%AF%BC%E5%85%A5/"/>
    <id>http://example.com/2023/11/02/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/golangAAR%E5%AF%BC%E5%85%A5/</id>
    <published>2023-11-02T09:51:27.000Z</published>
    <updated>2023-11-02T12:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装好gomobile后</p><p>如果使用go mod模式就直接在.go文件处<code>go mod init xxx</code>即可</p><p><code>gomobile bind -target android (init出来的包名)</code></p><p>注意golang的外部可调用方法得开头大写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装好gomobile后&lt;/p&gt;
&lt;p&gt;如果使用go mod模式就直接在.go文件处&lt;code&gt;go mod init xxx&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gomobile bind -target android (init出来的包名)&lt;/code&gt;&lt;/p</summary>
      
    
    
    
    <category term="安卓开发" scheme="http://example.com/categories/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>PIE保护</title>
    <link href="http://example.com/2023/10/28/Pwn/PIE%E4%BF%9D%E6%8A%A4/"/>
    <id>http://example.com/2023/10/28/Pwn/PIE%E4%BF%9D%E6%8A%A4/</id>
    <published>2023-10-28T14:57:42.000Z</published>
    <updated>2023-10-28T14:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>PIE保护不会随机化低12bit位，如果 shell在附近 可以通过爆破低6位来获得完整的低2字节</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PIE保护不会随机化低12bit位，如果 shell在附近 可以通过爆破低6位来获得完整的低2字节&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Pwn" scheme="http://example.com/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>golang</title>
    <link href="http://example.com/2023/10/21/Re/x86/golang/"/>
    <id>http://example.com/2023/10/21/Re/x86/golang/</id>
    <published>2023-10-21T13:36:53.000Z</published>
    <updated>2023-10-21T13:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂存</p><p>rax用于存放对应对象，或者对象传递位置 rbx及其它寄存器用于传递参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;暂存&lt;/p&gt;
&lt;p&gt;rax用于存放对应对象，或者对象传递位置 rbx及其它寄存器用于传递参数&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>WSA</title>
    <link href="http://example.com/2023/10/17/Re/%E5%AE%89%E5%8D%93/WSA/"/>
    <id>http://example.com/2023/10/17/Re/%E5%AE%89%E5%8D%93/WSA/</id>
    <published>2023-10-17T13:33:06.000Z</published>
    <updated>2023-10-17T15:43:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://a-jiua.github.io/blog/2023/07/22/WSAOnWin10_-_%E5%9C%A8_Windows10_%E4%B8%8A%E4%BD%BF%E7%94%A8WSA/" >WSAOnWin10 - 在 Windows10 上使用WSA | 行雺のBlog | Hexo (a-jiua.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>具体环境配置，因为wsa api版本过新所以magisk的大部分包都用不了，但magisk自带一个busybox，路径为<code>/data/adb/magisk</code>将其加入代码搜索路径内<code>export PATH=$PATH:/data/adb/magisk</code></p><p>同时因为wsa的<code>ro.debuggable</code>参数被设置为了0所以有些代码调试的时候会跑飞用<code>magisk resetprop ro.debuggable 1</code>命令修改掉默认值(每次重启都会失效)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://a-jiua.github.io/blog/2023/07/22/WSAOnWin10_-_%E5%9C%A8_Windows10_%E4%B8%8A%E4%BD%BF%E7%94%A8WSA/&quot; &gt;WSAOn</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/Re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CRT中国剩余定理</title>
    <link href="http://example.com/2023/10/05/Crypto/CRT%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <id>http://example.com/2023/10/05/Crypto/CRT%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</id>
    <published>2023-10-05T05:17:41.000Z</published>
    <updated>2023-10-05T05:17:41.000Z</updated>
    
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>密钥交换协定</title>
    <link href="http://example.com/2023/10/04/Crypto/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E5%AE%9A/"/>
    <id>http://example.com/2023/10/04/Crypto/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E5%AE%9A/</id>
    <published>2023-10-04T11:56:26.000Z</published>
    <updated>2023-10-04T11:56:26.000Z</updated>
    
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>dll注入</title>
    <link href="http://example.com/2023/10/02/Re/x86/dll%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2023/10/02/Re/x86/dll%E6%B3%A8%E5%85%A5/</id>
    <published>2023-10-02T08:45:24.000Z</published>
    <updated>2023-10-02T08:45:24.000Z</updated>
    
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>ida界面设置</title>
    <link href="http://example.com/2023/10/02/Re/x86/ida%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2023/10/02/Re/x86/ida%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE/</id>
    <published>2023-10-02T07:53:45.000Z</published>
    <updated>2023-10-02T08:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加窗口"><a href="#添加窗口" class="headerlink" title="添加窗口"></a>添加窗口</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202310021559856.png"                      alt="image-20231002155911771"                ></p><h2 id="移动窗口"><a href="#移动窗口" class="headerlink" title="移动窗口"></a>移动窗口</h2><h3 id="选中窗口将鼠标移动到灰线处-箭头所指的地方"><a href="#选中窗口将鼠标移动到灰线处-箭头所指的地方" class="headerlink" title="选中窗口将鼠标移动到灰线处(箭头所指的地方)"></a>选中窗口将鼠标移动到灰线处(箭头所指的地方)</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202310021601936.png"                      alt="image-20231002160132898"                ></p><p>长按将其拖动到一类位置(带有标记的地方),不同位置对应的不同效果可以自己试一试</p><h3 id=""><a href="#" class="headerlink" title=""></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/runwu2204/Blog_imgs/202310021603990.png"                      alt="image-20231002160330840"                ></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;添加窗口&quot;&gt;&lt;a href=&quot;#添加窗口&quot; class=&quot;headerlink&quot; title=&quot;添加窗口&quot;&gt;&lt;/a&gt;添加窗口&lt;/h2&gt;&lt;p&gt;&lt;img  
                     lazyload
                     src=</summary>
      
    
    
    
    <category term="Re" scheme="http://example.com/categories/Re/"/>
    
    <category term="x86" scheme="http://example.com/categories/Re/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>randcrack</title>
    <link href="http://example.com/2023/09/21/Crypto/randcrack/"/>
    <id>http://example.com/2023/09/21/Crypto/randcrack/</id>
    <published>2023-09-21T14:50:11.000Z</published>
    <updated>2023-10-02T08:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用随机数漏洞预测随机数</p><p>参考[<a class="link"   href="https://blog.csdn.net/qq_42557115/article/details/128228201" >CTF&#x2F;randcrack]python随机数预测模块分析及改进方案_ctf 随机数_虚空guoql的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;利用随机数漏洞预测随机数&lt;/p&gt;
&lt;p&gt;参考[&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/qq_42557115/article/details/128228201&quot; &gt;CTF&amp;#x2F;randcrack]python随机数</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
  </entry>
  
</feed>
