<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>runwu2204</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-06T04:12:00.799Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>runwu2204</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好看的维吾尔族小姐姐</title>
    <link href="http://example.com/2023/06/06/%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%BB%B4%E5%90%BE%E5%B0%94%E6%97%8F%E5%B0%8F%E5%A7%90%E5%A7%90/"/>
    <id>http://example.com/2023/06/06/%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%BB%B4%E5%90%BE%E5%B0%94%E6%97%8F%E5%B0%8F%E5%A7%90%E5%A7%90/</id>
    <published>2023-06-06T04:12:00.760Z</published>
    <updated>2023-06-06T04:12:00.799Z</updated>
    
    <content type="html"><![CDATA[<p>观测前缀为PNG开头，为png文件直接改后缀为png即可</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230520162424364.png" alt="image-20230520162424364"></p><p>通过脚本运算其正常的长宽，其宽度被修改了，改回去即可，如下图所示</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230520162858203.png" alt="image-20230520162858203"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;E:\\EDGE下载\\attachment-1 (2)\\古力娜扎.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()    <span class="comment">#打开图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0x52084BFB</span>):    <span class="comment">#图片当前CRC</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure><p>图片变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230520163007285.png" alt="image-20230520163007285"></p><p>观察二维码形状，类似于Data Matrix码，但是经过了镜像(原本我以为是拼图一类的，卡了很久)</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230520163026034.png"></p><p>直接进行镜像即可(镜像就是题目所指的维吾尔族的说话方式,不知道为啥，应该是写字方式才对吧)</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20230520163241541.png" alt="image-20230520163241541"></p><p>扫码后的结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;521#&amp;;33#&amp;;101#&amp;;011#&amp;;111#&amp;;001#&amp;;801#&amp;;801#&amp;;101#&amp;;911#&amp;;59#&amp;;611#&amp;;501#&amp;;59#&amp;;611#&amp;;111#&amp;;301#&amp;;59#&amp;;711#&amp;;111#&amp;;121#&amp;;321#&amp;;76#&amp;;76#&amp;;38#&amp;;37#&amp;</span><br></pre></td></tr></table></figure><p>也是html字符编码的镜像，从后往前读便可如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#73;&amp;#83;&amp;#67;&amp;#67;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#95;&amp;#103;&amp;#111;&amp;#116;&amp;#95;&amp;#105;&amp;#116;&amp;#95;&amp;#119;&amp;#101;&amp;#108;&amp;#108;&amp;#100;&amp;#111;&amp;#110;&amp;#101;&amp;#33;&amp;#125;</span><br></pre></td></tr></table></figure><p>ISCC{you_got_it_welldone!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;观测前缀为PNG开头，为png文件直接改后缀为png即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;wrwrw&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20230520162424364.png&quot; alt=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>qianduan</title>
    <link href="http://example.com/2023/06/06/%E5%89%8D%E7%AB%AF/qianduan/"/>
    <id>http://example.com/2023/06/06/%E5%89%8D%E7%AB%AF/qianduan/</id>
    <published>2023-06-06T04:12:00.754Z</published>
    <updated>2023-06-06T04:12:00.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h2><p><img src="https://www.runoob.com/images/box-model.gif" alt="CSS box-model"></p><p>微信版的html，有些许修改，但基本上只是参数名上的修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于显示块类似于&lt;head&gt;,&lt;body&gt;之类的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--滚动条的效果，x轴滚动可改为&quot;scroll-x&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span>&gt;</span><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--轮播图的父项可以用来装&lt;swiper-item&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于在容器内部显示轮播图，是swiper的子项可以用来装&lt;view&gt;项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">自定义名称</span> <span class="attr">class</span>=<span class="string">&quot;自定义名称&quot;</span>&gt;</span>&lt;\自定义名称&gt;</span><br><span class="line"><span class="comment">&lt;!--用于自定义元素，可以通过wxss来定义对应class的参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;html语句&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可用于使用服务器所传递的html内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;按钮样式&quot;</span> <span class="attr">size</span>=<span class="string">&quot;按钮大小&quot;</span> <span class="attr">plain</span>=<span class="string">&quot;true&quot;</span><span class="attr">镂空</span> <span class="attr">bindtap</span>=<span class="string">&quot;被绑定的函数 类似于c语句goto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于渲染一个按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;图片地址 可以为图床的地址&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;图片比例&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于渲染图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">&quot;方法名&quot;</span>(<span class="attr">调用对应函数</span>) <span class="attr">value</span>=<span class="string">(进行绑定，也可定义显示的初始值)</span>&gt;</span>.&lt;\input&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="swiper参数"><a href="#swiper参数" class="headerlink" title="swiper参数"></a>swiper参数</h3><table><thead><tr><th>indicator-dots</th><th>显示轮播图的位置（第几张）</th></tr></thead><tbody><tr><td>indicator-color</td><td>小圆点的颜色</td></tr><tr><td>indicator-active-color</td><td>激活的小圆点颜色</td></tr><tr><td>autoplay</td><td>自动轮播</td></tr><tr><td>interval</td><td>改变轮播时间 单位ms</td></tr><tr><td>circular</td><td>衔接滑动，头尾相连</td></tr></tbody></table><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p><img src="E:\note\前端\qianduan.assets\image-20230305171346536.png" alt="image-20230305171346536"></p><p>可通过bindtap&#x3D;”对应方法名”来传递事件，该事件可用e(event)来表示可通过e.相应参数来获取对应事件的参数如上图</p><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><p>通过对相应元素增加 data-参数名&#x3D;”参数”进行传递</p><p>注意传递的是对应事件，除了通过自身事件的e.target.dataset.”参数名”可通过外部的”e.target.dataset.参数名”来访问具体如下</p><p><img src="E:\note\前端\qianduan.assets\image-20230305203312340.png" alt="image-20230305203312340"></p><p>上面的是当前事件(currentTarget)对应的各项参数</p><p>下面是追溯到实际事件(target)获得的参数</p><p>注意：**<code>Object</code>** 是 JavaScript 的一种 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">数据类型</a> 。它用于存储各种键值集合和更复杂的实体。Objects 可以通过 <code>Object()</code> 构造函数或者使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer">对象字面量</a> 的方式创建,可类似于结构体</p><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><h4 id="wx-if-x3D-”“-当if为非0时才会进行渲染对应的元素块"><a href="#wx-if-x3D-”“-当if为非0时才会进行渲染对应的元素块" class="headerlink" title="wx:if &#x3D;”“,当if为非0时才会进行渲染对应的元素块"></a>wx:if &#x3D;”“,当if为非0时才会进行渲染对应的元素块</h4><p>wx:elif，wx:else与上列并行</p><h4 id="hidden-x3D-”“-情况为true"><a href="#hidden-x3D-”“-情况为true" class="headerlink" title="hidden&#x3D;”“,情况为true"></a>hidden&#x3D;”“,情况为true</h4><h4 id="wx-for-x3D-”“-用于循环遍历数组内元素"><a href="#wx-for-x3D-”“-用于循环遍历数组内元素" class="headerlink" title="wx:for&#x3D;”“ 用于循环遍历数组内元素"></a>wx:for&#x3D;”“ 用于循环遍历数组内元素</h4><p>用表示其索引(下标),用表示其元素(在index索引下的元素)，对wx:for-index(或item)可对两者进行改名</p><p>也可用wx:key&#x3D;”key的名字”可提高渲染效率，与数字相对应</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h2><p>微信版的css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>()<span class="comment">//用于弹出警告</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>()<span class="comment">//用于输出到控制台</span></span><br></pre></td></tr></table></figure><h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><p><img src="E:\note\前端\qianduan.assets\image-20230302213110759.png" alt="image-20230302213110759"></p><p>data用于存储数据 注意在对其赋值时应当取“:”,用等号时会白屏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.random()可以生成随机数(0~1),可在后面*10生成0到10的随机数,可添加toFixed(位数)限制生成的位数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;网址&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">method</span>:<span class="string">&quot;post&quot;</span>或<span class="string">&quot;get&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">data</span>:&#123;&#125;<span class="comment">//shu&#x27;ju</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;WXML&quot;&gt;&lt;a href=&quot;#WXML&quot; class=&quot;headerlink&quot; title=&quot;WXML&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>前后端协议</title>
    <link href="http://example.com/2023/06/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2023/06/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-06-06T04:12:00.738Z</published>
    <updated>2023-06-06T04:12:00.799Z</updated>
    
    <content type="html"><![CDATA[<p>前后端协议<br>1.前端需要哪些数据，及存储方式<br>2.登录系统(也许)<br>3.地图<br>JSON数据(长度不确定)<br>4。商铺信息<br>商品图片，简介，评分，店铺大图，logo，详细地址，<br>排队信息（拥堵情况）(后端需要检测，前端要显示)<br>5.商铺推荐<br>商铺信息<br>6.会员系统<br>会员等级，会员id，积分，优惠券，播报系统（大概）<br>7.商铺管理接口<br>8.排队系统<br>自助排号（计算机后端视觉），线上预定<br>9.后端大数据<br>推荐商户</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前后端协议&lt;br&gt;1.前端需要哪些数据，及存储方式&lt;br&gt;2.登录系统(也许)&lt;br&gt;3.地图&lt;br&gt;JSON数据(长度不确定)&lt;br&gt;4。商铺信息&lt;br&gt;商品图片，简介，评分，店铺大图，logo，详细地址，&lt;br&gt;排队信息（拥堵情况）(后端需要检测，前端要显示)&lt;br&gt;5</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="http://example.com/2023/06/06/Web/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2023/06/06/Web/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-06-06T04:12:00.734Z</published>
    <updated>2023-06-06T04:12:00.845Z</updated>
    
    <content type="html"><![CDATA[<p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;你要读取的文件名（带后缀）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;?file&amp;#x3D;php:&amp;#x2F;&amp;#x2F;filter&amp;#x2F;convert.base64-encode&amp;#x2F;resource&amp;#x3D;你要读取的文件名（带后缀）&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>php</title>
    <link href="http://example.com/2023/06/06/Web/php/"/>
    <id>http://example.com/2023/06/06/Web/php/</id>
    <published>2023-06-06T04:12:00.730Z</published>
    <updated>2023-06-06T04:12:00.845Z</updated>
    
    <content type="html"><![CDATA[<p>php中变量以$变量名来命令变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure><p>利用变量来调用函数</p><p>[<a href="https://www.nssctf.cn/problem/2604">HUBUCTF 2022 新生赛]HowToGetShell | NSSCTF</a></p><p>在 PHP 中，<code>$</code> 符号通常用于表示变量名称。PHP 中的变量名必须由 <code>$</code> 符号开头，其后是一个合法的变量名字符串。</p><p>例如，以下代码声明了一个名为 <code>$name</code> 的变量，并将其赋值为字符串 “John”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php复制代码$name = &quot;John&quot;;</span><br></pre></td></tr></table></figure><p><code>$</code> 符号在其他编程语言中也有类似的作用，如在 Shell 中 <code>$</code> 用于替换环境变量，而在 JavaScript 中 <code>$</code> 符号则没有特殊的含义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php中变量以$变量名来命令变量&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>花指令</title>
    <link href="http://example.com/2023/06/06/re/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2023/06/06/re/%E8%8A%B1%E6%8C%87%E4%BB%A4/</id>
    <published>2023-06-06T04:12:00.724Z</published>
    <updated>2023-06-06T04:12:00.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="g-内联-x64"><a href="#g-内联-x64" class="headerlink" title="g++内联(x64)"></a>g++内联(x64)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x =<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;.globl _start\n\t&quot;</span></span><br><span class="line">        <span class="string">&quot;_start:&quot;</span></span><br><span class="line">        <span class="string">&quot;call _sec\n\t&quot;</span>);</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;.globl _sec\n\t&quot;</span></span><br><span class="line">        <span class="string">&quot;_sec:&quot;</span></span><br><span class="line">        <span class="string">&quot;call _thr\n\t&quot;</span><span class="comment">//下方都是无意义的代码</span></span><br><span class="line">        <span class="string">&quot;call 0xef\n\t&quot;</span><span class="comment">//只增加一个call时ida无变化</span></span><br><span class="line">        <span class="string">&quot;mov 4,%%rax\n\t&quot;</span><span class="comment">//增加对rax修改时ida无变化</span></span><br><span class="line">        <span class="string">&quot;add $4,%1\n\t&quot;</span><span class="comment">//增加对参数修改时ida无变化</span></span><br><span class="line">        <span class="string">&quot;push %%rsp\n\t&quot;</span><span class="comment">//多个push只提示堆栈不平衡ida无变化</span></span><br><span class="line">        <span class="string">&quot;push %%rsp\n\t&quot;</span></span><br><span class="line">        <span class="string">&quot;push %%rsp\n\t&quot;</span></span><br><span class="line">        <span class="string">&quot;push %%rsp\n\t&quot;</span></span><br><span class="line">        <span class="string">&quot;ret&quot;</span><span class="comment">//增加无意义的ret ida无法识别</span></span><br><span class="line">        :<span class="string">&quot;+r&quot;</span>(x)</span><br><span class="line">    );    </span><br><span class="line">    <span class="keyword">asm</span>(  <span class="string">&quot;.globl _sec\n\t&quot;</span></span><br><span class="line">        <span class="string">&quot;_thr:&quot;</span></span><br><span class="line">        <span class="string">&quot;add $16,%esp\n\t&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,add1(x,y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="cl内联-x86"><a href="#cl内联-x86" class="headerlink" title="cl内联(x86)"></a>cl内联(x86)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        call c1;</span><br><span class="line">        push eax;</span><br><span class="line">        push ebx;</span><br><span class="line">    c1:</span><br><span class="line">        call c2;</span><br><span class="line">        push eax;</span><br><span class="line">        pop eax;</span><br><span class="line">    c2:</span><br><span class="line">        add esp,<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, add1(a, b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只进行无意义的push操作时ida直接无法识别</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;g-内联-x64&quot;&gt;&lt;a href=&quot;#g-内联-x64&quot; class=&quot;headerlink&quot; title=&quot;g++内联(x64)&quot;&gt;&lt;/a&gt;g++内联(x64)&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编语言调试</title>
    <link href="http://example.com/2023/06/06/re/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2023/06/06/re/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E8%B0%83%E8%AF%95/</id>
    <published>2023-06-06T04:12:00.720Z</published>
    <updated>2023-06-06T04:12:00.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>在动态调试中需知道各寄存器意义及作用</p><p>寄存器分为两类，通用寄存器和特殊寄存器。</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><ul><li>EAX（寄存器寄存器-累加器）：最常用于算术，逻辑和数据传输指令、乘法和除法运算使用此寄存器。对于Windows API函数，函数的返回值通常将存储在EAX寄存器中。</li><li>EBX（基址寄存器）：EBX寄存器可以直接访问存储器数据，它也是一个通用寄存器。</li><li>ECX（计数寄存器）：ECX是一个共享寄存器，可以用作各种命令的计数器。它还可能包含内存中的数据未对齐。使用计数器的命令是顺序，循环和LOOP &#x2F; LOOPD指令。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//LOOP/LOOPD</span><br><span class="line">//格式如下</span><br><span class="line">LOOP 标号（）</span><br><span class="line">//可以实现函数的循环，</span><br><span class="line">//具体如下</span><br><span class="line">ECX=ECX-1</span><br><span class="line">(ECX)&lt;&gt;0//就转移至所跟的标号处执行，相当于又把EIP移到标号处</span><br><span class="line">ECX=0//就将EIP移向下一个指令(跟指令正常执行一样)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224210257432.png" alt="image-20221224210257432"></p><p>具体模式如下网址</p><p>[实模式、保护模式、三种地址、分段、分页 - 克拉默与矩阵 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/kelamoyujuzhen/p/10555924.html#:~:text=%E5%AE%9E%E6%A8%A1%E5%BC%8F%EF%BC%88real">https://www.cnblogs.com/kelamoyujuzhen/p/10555924.html#:~:text=实模式（real</a> mode），也称为实地址模式（real address mode），是所有x86兼容CPU下的一种操作模式。 实模式的特点是20 bit分段内存（segmented memory）地址空间（精确到1,MB的可寻址内存）以及 对所有可寻址内存，I%2FO地址和外设硬件的无限制直接软件访问。 实模式不支持内存保护（memory protection），多任务处理（multitasking）或 代码权限级别（code privilege levels）。)</p><p>可能以后要用先在这写着</p><ul><li>EDX（数据寄存器）：是一个通用寄存器，用于包含乘法结果或除法结果的一部分。它还可以直接访问内存中的数据地址。</li><li>EDI（目标索引）：EDI通常用于处理字符串或数组的工作。该寄存器将指向目标字符串。此外它也是一个通用寄存器。</li><li>ESI（源索引）：与EDI一样，ESI也经常用于处理字符串或数组的操作。该寄存器将指向源字符串。</li><li>EBP（基本指针）：EBP指向内存位置，除了被共享外，还用作访问函数堆栈中的参数和局部变量的帧指针。</li><li>ESP（堆栈指针）：该寄存器始终指向当前堆栈顶部。根据堆栈的工作原理，该寄存器将被定向到低位地址。</li></ul><h2 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a>特殊寄存器</h2><ul><li><p>EIP（指令指针）：这是一个特殊的寄存器，它始终指向要执行的下一条指令。与其他寄存器不同，EIP不受指令直接影响。</p></li><li><p>EFLAGS（32位时，如果为64位程序，则高32保留低32位跟32时的一致）（标志寄存器），每个位都是用来反映操作的特定状态，根据计算结果启用这些标志寄存器，并根据这些标志来执行程序的执行分支。</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该寄存器第1,3,5,15,22~31位被保留(总是设定为指定的值)（可能是为以后扩展所用）</span><br></pre></td></tr></table></figure><p>标志寄存器（未保留的位）可分为三部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、状态标志(Status Flags)</span><br><span class="line">EFLAGS寄存器的状态标志(0、2、4、6、7以及11位)指示算术指令（如ADD, SUB, MUL以及DIV指令）的结果，这些状态标志的作用如下：</span><br><span class="line"></span><br><span class="line">CF(bit 0) [Carry flag]   若算术操作产生的结果在最高有效位(most-significant bit)发生进位或借位则将其置1，反之清零。这个标志指示无符号整型运算的溢出状态，这个标志同样在多倍精度运算(multiple-precision arithmetic)中使用。</span><br><span class="line">PF(bit 2) [Parity flag]   如果结果的最低有效字节(least-significant byte)包含偶数个1位则该位置1，否则清零。</span><br><span class="line">AF(bit 4) [Adjust flag]   如果算术操作在结果的第3位发生进位或借位则将该标志置1，否则清零。这个标志在BCD(binary-code decimal)算术运算中被使用。</span><br><span class="line">ZF(bit 6) [Zero flag]   若结果为0则将其置1，反之清零。</span><br><span class="line">SF(bit 7) [Sign flag]   该标志被设置为有符号整型的最高有效位。(0指示结果为正，反之则为负)</span><br><span class="line">OF(bit 11) [Overflow flag]   如果整型结果是较大的正数或较小的负数，并且无法匹配目的操作数时将该位置1，反之清零。这个标志为带符号整型运算指示溢出状态。</span><br><span class="line"></span><br><span class="line">在这些状态标志中，只有CF标志能够通过使用STC, CLC以及CMC指令被直接修改，或者通过位指令(BT, BTS, BTR以及BTC)将指定的位拷贝至CF标志中。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、DF标志(DF flag)</span><br><span class="line">这个方向标志(位于EFLAGS寄存器的第10位)控制串指令(MOVS, CMPS, SCAS, LODS以及STOS)。设置DF标志使得串指令自动递减（从高地址向低地址方向处理字符串），清除该标志则使得串指令自动递增。STD以及CLD指令分别用于设置以及清除DF标志。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3、系统标志以及IOPL域(System Flags and IOPL Field)</span><br><span class="line"></span><br><span class="line">EFLAGS寄存器中的这部分标志用于控制操作系统或是执行操作，它们不允许被应用程序所修改。这些标志的作用如下：</span><br><span class="line"></span><br><span class="line">TF(bit 8) [Trap flag]   将该位设置为1以允许单步调试模式，清零则禁用该模式。</span><br><span class="line">IF(bit 9) [Interrupt enable flag]   该标志用于控制处理器对可屏蔽中断请求(maskable interrupt requests)的响应。置1以响应可屏蔽中断，反之则禁止可屏蔽中断。</span><br><span class="line">IOPL(bits 12 and 13) [I/O privilege level field]   指示当前运行任务的I/O特权级(I/O privilege level)，正在运行任务的当前特权级(CPL)必须小于或等于I/O特权级才能允许访问I/O地址空间。这个域只能在CPL为0时才能通过POPF以及IRET指令修改。</span><br><span class="line">NT(bit 14) [Nested task flag]   这个标志控制中断链和被调用任务。若当前任务与前一个执行任务相关则置1，反之则清零。</span><br><span class="line">RF(bit 16) [Resume flag]   控制处理器对调试异常的响应。</span><br><span class="line">VM(bit 17) [Virtual-8086 mode flag]   置1以允许虚拟8086模式，清除则返回保护模式。</span><br><span class="line">AC(bit 18) [Alignment check flag]   该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。</span><br><span class="line">VIF(bit 19) [Virtual interrupt flag]   该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions)</span><br><span class="line">VIP(bit 20) [Virtual interrupt pending flag]   该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。【Software sets and clears this flag; the processor only reads it.】与VIF标志结合使用。</span><br><span class="line">ID(bit 21) [Identification flag]   程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。</span><br></pre></td></tr></table></figure><ul><li>段寄存器</li></ul><p>CS-指向用于存放指令的段,与IP（偏移量结合），得到下一次要执行的指令</p><p>SS-指向用于堆栈的段,SP指向栈顶，同时可用BP访问整个栈</p><p>DS-指向数据段，与偏移量结合可以指向对应的数据</p><p>ES-指向附加段</p><h1 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h1><p>public start-用于声明一个函数，其是公用的（可被其他函数调用），其他函数也可类似声明。</p><p>start proc near-表示函数开头,此处start表明了是函数入口,对其他的函数来说这个”start”可以换成对应的函数名。</p><p>start endp-表示函数结尾，对其他的函数来说这个”start”可以换成对应的函数名。</p><p>jmp-无条件跳转(移动eip)至后面的标号，格式为 jmp 标号</p><p>push-压栈，常用于传参，保存数据</p><p>pop-跟pop相对，将栈顶弹出</p><p>call-将call指令的下一个指令压入栈中，同时移动eip至标号处 call 标号</p><p>offset-相当于取地址</p><p>retn-与call搭配使用先将压入栈中的指令取回放入eip中，同时将esp+n 格式为retn n</p><p>inc-将后面对应的寄存器自增1，会引起SF值,ZF值的修改，具体见上面ZF,SF的作用</p><p>add-将后项加前项赋给前项，格式 add a，b</p><p>dec-将后面对应的寄存器自减1，会引起SF值,ZF值的修改，具体见上面ZF,SF的作用</p><p>rep-重复一条指令,每执行一次ECX-1,ECX&#x3D;0时停止</p><p>loop&#x2F;LOOPD-重复指令块,每执行一次ECX-1,ECX&#x3D;0时停止</p><h1 id="汇编调试"><a href="#汇编调试" class="headerlink" title="汇编调试"></a>汇编调试</h1><h2 id="HeloWorld-exe"><a href="#HeloWorld-exe" class="headerlink" title="HeloWorld.exe"></a>HeloWorld.exe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:00401005 public start</span><br><span class="line">.text:00401005 start proc near</span><br><span class="line">.text:00401005 jmp     sub_401010</span><br><span class="line">.text:00401005 start endp</span><br></pre></td></tr></table></figure><p>public start-用于声明一个函数，其是公用的（可被其他函数调用），其他函数也可类似声明。</p><p>start proc near-表示函数开头,此处start表明了是函数入口,对其他的函数来说这个”start”可以换成对应的函数名。</p><p>start endp-表示函数结尾，对其他的函数来说这个”start”可以换成对应的函数名。</p><p>jmp-jmp     sub_401010-运行结果如下</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224221201527.png" alt="image-20221224221201527"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224221142009.png" alt="image-20221224221142009"></p><p>只修改了EIP值相当于指向了第一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:00401010 sub_401010 proc near                    ; CODE XREF: start↑j</span><br><span class="line">.text:00401010 push    0                               ; uType</span><br><span class="line">.text:00401012 push    offset Caption                  ; &quot;D0g3!&quot;</span><br><span class="line">.text:00401017 push    offset Text                     ; &quot;Welcome to Re&quot;</span><br><span class="line">.text:0040101C push    0                               ; hWnd</span><br><span class="line">.text:0040101E call    MessageBoxA</span><br><span class="line">.text:00401023 push    0                               ; uExitCode</span><br><span class="line">.text:00401025 call    ExitProcess</span><br><span class="line">.text:00401025 sub_401010 endp</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224222915631.png" alt="image-20221224222915631"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224222931903.png" alt="image-20221224222931903"></p><p>当前ip指向push 0,ida常以”;”作注释，搜索后发现其应该是</p><p>MessageBox( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)的第一个参数。</p><p>push-push    0结果如下</p><p>执行此命令后</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223515193.png" alt="image-20221224223515193"></p><p>变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223545415.png" alt="image-20221224223545415"></p><p>将0压入了栈内相当于将栈顶提高了一位（4字节 32bit）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223722949.png" alt="image-20221224223722949"></p><p>剩下的push都是类似的变化</p><p>此处应该都是对MessageBox传参</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223829476.png" alt="image-20221224223829476"></p><p>定义了弹窗类型，传递了字符串的指针，也定义了按钮和图标</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223927998.png" alt="image-20221224223927998"></p><p>这几个push执行后栈内也多了两个字符串的地址和两个数字0</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224224025205.png" alt="image-20221224224025205"></p><p>栈顶也被抬高了4位，EIP也向后移动了15</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0040101E call    MessageBoxA</span><br><span class="line">.text:00401023 push    0                               ; uExitCode</span><br><span class="line">.text:00401025 call    ExitProcess</span><br><span class="line">.text:00401025 sub_401010 endp</span><br></pre></td></tr></table></figure><p>。</p><p>call-此处call函数将</p><p>call函数的下一个指令.text:00401023 push    0   的地址放入了栈中</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224232526961.png" alt="image-20221224232526961"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224232540977.png" alt="image-20221224232540977"></p><p>ESP也因此抬高了一位，EIP指向了所call的函数MessageBoxA的函数头</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224234025573.png" alt="image-20221224234025573"></p><p>dword ptr n 就是ESP + n处栈中存取的数据</p><p>同时也定义了对应参数在栈内的位置</p><p>如dword ptr 4 就是ESP + 4 &#x3D; 0019FF60 + 4 &#x3D; 0019FF64</p><p>正对应了压入栈中的参数0<img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224234349159.png" alt="image-20221224234349159"></p><p>其他参数获取原理类似。</p><p>offset-__imp_MessageBoxA dd offset user32_MessageBoxA</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225000500211.png" alt="image-20221225000500211"></p><p>offset 指令相当于把对应函数“user32_MessageBoxA”的指针（指向函数的头部）给了这个”__imp_MessageBoxA“让其有了等效的作用</p><p>所以在上文的jmp中直接jmp到了user32_MessageBoxA这个函数中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">user32.dll:772519E0 user32_MessageBoxA:</span><br><span class="line">user32.dll:772519E0 mov     edi, edi</span><br><span class="line">user32.dll:772519E2 push    ebp</span><br><span class="line">user32.dll:772519E3 mov     ebp, esp</span><br><span class="line">user32.dll:772519E5 cmp     dword_77276C94, 0</span><br><span class="line">user32.dll:772519EC jz      short loc_77251A10</span><br><span class="line">user32.dll:772519EE mov     eax, large fs:18h</span><br><span class="line">user32.dll:772519F4 mov     edx, offset unk_772771A4</span><br><span class="line">user32.dll:772519F9 mov     ecx, [eax+24h]</span><br><span class="line">user32.dll:772519FC xor     eax, eax</span><br><span class="line">user32.dll:772519FE lock cmpxchg [edx], ecx</span><br><span class="line">user32.dll:77251A02 test    eax, eax</span><br><span class="line">user32.dll:77251A04 jnz     short loc_77251A10</span><br><span class="line">user32.dll:77251A06 mov     dword_77276D00, 1</span><br></pre></td></tr></table></figure><p>mov edi, edi</p><p>mov是将后项覆盖给前项，但此处自己覆盖自己是不会改变的</p><p>此处这么做的目的在网上搜了一下：</p><p>1.为了实现hot-patching技术，即运行时修改一个函数的行为。</p><p>2.为了提高效率。执行一条MOV指令比执行两条NOP指令花费更少的时间。</p><p>其他的mov指令也是类似的覆盖 </p><p>push ebp </p><p>原来ebp如下图</p><p>将EBP的所存的</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225001444463.png" alt="image-20221225001444463"></p><p>压入了栈中，抬高了一位ESP</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225001732773.png" alt="image-20221225001732773"></p><p>同时EBP中所存的不会因push而被抛弃掉</p><p>mov ebp, esp将esp指向的栈顶位置赋给ebp</p><p>原ebp</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225002625179.png" alt="image-20221225002625179"></p><p>赋值后的ebp</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225002651473.png" alt="image-20221225002651473"></p><p>cmp     dword_77276C94, 0</p><p>将dword_77276c94(0)与0比较</p><table><thead><tr><th>CMP结果</th><th>ZF</th><th>CF</th></tr></thead><tbody><tr><td>目的操作数 &lt; 源操作数</td><td>0</td><td>1</td></tr><tr><td>目的操作数 &gt; 源操作数</td><td>0</td><td>0</td></tr><tr><td>目的操作数 &#x3D; 源操作数</td><td>1</td><td>0</td></tr></tbody></table><p>因为相等 所以ZF&#x3D;1,CF&#x3D;0但初始状态下ZF&#x3D;1,CF&#x3D;0</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225003354313.png" alt="image-20221225003354313"></p><p>所以此处ZF,CF值没有变化</p><p>jz      short loc_77251A10</p><p>根据ZF为1就跳转，ZF为0就不跳转</p><p>此处在执行cmp     dword_77276C94, 0后ZF为1</p><p>其会跳转（将EIP移向）short loc_77251A10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user32.dll:77251A10 loc_77251A10:                           ; CODE XREF: user32.dll:user32_MessageBoxA+C↑j</span><br><span class="line">user32.dll:77251A10                                         ; user32.dll:user32_MessageBoxA+24↑j</span><br><span class="line">user32.dll:77251A10 push    0FFFFFFFFh</span><br><span class="line">user32.dll:77251A12 push    0</span><br><span class="line">user32.dll:77251A14 push    dword ptr [ebp+14h]</span><br><span class="line">user32.dll:77251A17 push    dword ptr [ebp+10h]</span><br><span class="line">user32.dll:77251A1A push    dword ptr [ebp+0Ch]</span><br><span class="line">user32.dll:77251A1D push    dword ptr [ebp+8]</span><br><span class="line">user32.dll:77251A20 call    near ptr user32_MessageBoxTimeoutA</span><br><span class="line">user32.dll:77251A25 pop     ebp</span><br><span class="line">user32.dll:77251A26 retn    10h</span><br></pre></td></tr></table></figure><p>前面的push为一如既往的传参操作</p><p>call也是调用对应的弹窗函数，可见前文有相对应的。</p><p>pop ebp</p><p>将栈顶的弹出给ebp</p><p>原栈顶和ebp：</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225004823350.png" alt="image-20221225004823350"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225004829852.png" alt="image-20221225004829852"></p><p>执行后：</p><p>原栈顶的数据并不会被清除只是将栈顶下移了一位</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005011800.png" alt="image-20221225005011800"></p><p>ebp也变为了原栈顶所对应的数据</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005018288.png" alt="image-20221225005018288"></p><p>retn 10h</p><p>原ESP和EIP及原栈顶</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005136127.png" alt="image-20221225005136127"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005143222.png" alt="image-20221225005143222"></p><p>执行后</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005232923.png" alt="image-20221225005232923"></p><p>相当于将原栈顶的数据弹出给了EIP使得ESP+4h</p><p>又让ESP+10h（retn后面所跟的数值）</p><p>所以retn n&#x3D; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop eip</span><br><span class="line">add esp 0xn</span><br></pre></td></tr></table></figure><h2 id="strcmp-exe"><a href="#strcmp-exe" class="headerlink" title="strcmp.exe"></a>strcmp.exe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:00401005 public start</span><br><span class="line">.text:00401005 start proc near</span><br><span class="line">.text:00401005 jmp     sub_40101C</span><br><span class="line">.text:00401005 start endp</span><br></pre></td></tr></table></figure><p>jmp     sub_40101C</p><p>EIP 00401005(start函数头)-&gt;0040101C(sub_40101C函数头)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub_40101C proc near                    ; CODE XREF: start↑j</span><br><span class="line">.text:0040101C push    offset aAbcdabcd                ; &quot;abcdabcd&quot;</span><br><span class="line">.text:00401021 push    offset aAbcdabcd_0              ; &quot;abcdABCD&quot;</span><br><span class="line">.text:00401026 call    sub_401032</span><br><span class="line">.text:0040102B push    0                               ; uExitCode</span><br><span class="line">.text:0040102D call    ExitProcess</span><br><span class="line">.text:0040102D sub_40101C endp</span><br></pre></td></tr></table></figure><p>push    offset aAbcdabcd</p><p>ESP 0019FF74-&gt;0019FF70</p><p>EIP 0040101C(sub_40101C)-&gt;00401021</p><p>栈顶：</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225141731899.png" alt="image-20221225141731899"></p><p>变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225142145042.png" alt="image-20221225142145042"></p><p>下面的push也类似</p><p>ESP 0019FF70-&gt;0019FF6C</p><p>EIP 00401021-&gt;00401026</p><p>栈顶变为</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225142305984.png" alt="image-20221225142305984"></p><p>call    sub_401032</p><p>EIP 00401026-&gt;00401032(sub_401032的函数头部)</p><p>ESP 0019FF6C-&gt;0019FF68</p><p>栈顶变为</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225143653981.png" alt="image-20221225143653981"></p><p>存放了原call函数所在的EIP 00401026加上该call函数所占存储位5变为了0040102B</p><p>所call的函数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:00401032 sub_401032 proc near                    ; CODE XREF: .text:0040100A↑j</span><br><span class="line">.text:00401032                                         ; sub_40101C+A↑p</span><br><span class="line">.text:00401032</span><br><span class="line">.text:00401032 arg_0= dword ptr  8</span><br><span class="line">.text:00401032 arg_4= dword ptr  0Ch</span><br><span class="line">.text:00401032</span><br><span class="line">.text:00401032 push    ebp</span><br><span class="line">.text:00401033 mov     ebp, esp</span><br><span class="line">.text:00401035 push    eax</span><br><span class="line">.text:00401036 push    edx</span><br><span class="line">.text:00401037 push    esi</span><br><span class="line">.text:00401038 push    edi</span><br><span class="line">.text:00401039 mov     esi, [ebp+arg_0]</span><br><span class="line">.text:0040103C mov     edi, [ebp+arg_4]</span><br><span class="line">.text:0040103F</span><br></pre></td></tr></table></figure><p>arg_0&#x3D; dword ptr  8&#x3D;ESP+8<br>arg_4&#x3D; dword ptr  0Ch&#x3D;ESP+12</p><p>push ebp</p><p>ESP 0019FF68-&gt;0019FF64</p><p>EIP 00401032-&gt;00401033</p><p>将EBP中所存的压入了栈中</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225150217063.png" alt="image-20221225150217063"></p><p>mov     ebp, esp</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225150501034.png" alt="image-20221225150501034"></p><p>将esp中存放的移给ebp（不改变栈顶）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225150540065.png" alt="image-20221225150540065"></p><p>push    eax</p><p>push    edx</p><p>push    esi</p><p>push    edi</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225151006067.png" alt="image-20221225151006067"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225151012367.png" alt="image-20221225151012367"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225151019532.png" alt="image-20221225151019532"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225151026351.png" alt="image-20221225151026351"></p><p>将其都压入了栈中</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225151057476.png" alt="image-20221225151057476"></p><p>mov     esi, [ebp+arg_0]</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225151019532.png" alt="image-20221225151019532"></p><p>ESI变为了</p><p>EBP+8（arg_0&#x3D; dword ptr  8此处定义了arg_0的偏移量）所指向的数据</p><p>EBP为 0019FF64</p><p>其加8就对应了</p><p>0019FF6C  00404000  .data:aAbcdabcd_0</p><p>下面的</p><p>mov     edi, [ebp+arg_4]</p><p>也是同理将edi变为了</p><p>0019FF70  00404009  .data:aAbcdabcd</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225152236920.png" alt="image-20221225152236920"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:0040103F loc_40103F:                             ; CODE XREF: sub_401032+22↓j</span><br><span class="line">.text:0040103F mov     al, [esi]</span><br><span class="line">.text:00401041 mov     dl, [edi]</span><br><span class="line">.text:00401043 cmp     al, 0</span><br><span class="line">.text:00401045 jnz     short loc_40104E</span><br><span class="line">.text:00401047 cmp     dl, 0</span><br><span class="line">.text:0040104A jnz     short loc_40104E</span><br><span class="line">.text:0040104C jmp     short loc_401056</span><br></pre></td></tr></table></figure><p>mov     al, [esi]</p><p>al是ax的低八位,EAX又在ax的基础上扩展了16位</p><p>相当于修改了eax的低八位</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225154057893.png" alt="image-20221225154057893"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225154109739.png" alt="image-20221225154109739"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225154208364.png" alt="image-20221225154208364"></p><p>此处方括号相当于将esi所指向的解引用后传给al，因为esi指向的是”abcdABCD”解引用后是a其ascii码为61所以</p><p>EAX的低八位变为了61</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225155113585.png" alt="image-20221225155113585"></p><p>mov     dl, [edi]</p><p>edi指向的是”abcdabcd”</p><p>也是同理</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225155201148.png" alt="image-20221225155201148"></p><p>edx变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225155213193.png" alt="image-20221225155213193"></p><p>cmp     al, 0</p><p>al目前值为61</p><table><thead><tr><th>CMP结果</th><th>ZF</th><th>CF</th></tr></thead><tbody><tr><td>目的操作数 &lt; 源操作数</td><td>0</td><td>1</td></tr><tr><td>目的操作数 &gt; 源操作数</td><td>0</td><td>0</td></tr><tr><td>目的操作数 &#x3D; 源操作数</td><td>1</td><td>0</td></tr></tbody></table><p>所以原ZF&#x3D;1,CF&#x3D;0</p><p>变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225155525194.png" alt="image-20221225155525194"></p><p>jnz     short loc_40104E</p><p>条件跳转指令在ZF&#x3D;0情况下跳转 其他类似jmp，只是将eip移向了后面的标号处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:0040104E loc_40104E:                             ; CODE XREF: sub_401032+13↑j</span><br><span class="line">.text:0040104E                                         ; sub_401032+18↑j</span><br><span class="line">.text:0040104E cmp     al, dl</span><br><span class="line">.text:00401050 pushf</span><br><span class="line">.text:00401051 inc     esi</span><br><span class="line">.text:00401052 inc     edi</span><br><span class="line">.text:00401053 popf</span><br><span class="line">.text:00401054 jz      short loc_40103F</span><br></pre></td></tr></table></figure><p>cmp道理同上</p><p>al&#x3D;dl</p><p>zf&#x3D;1</p><p>pushf</p><p>将EFLAGS中的放入了栈中（保护其不受改变）</p><p>其16进制表达如下</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225161040239.png" alt="image-20221225161040239"></p><p>inc     esi</p><p>inc     edi</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225161125997.png" alt="image-20221225161125997"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225161135824.png" alt="image-20221225161135824"></p><p>相当于将ESI,EDI都向后移动一位</p><p>popf</p><p>因为算数时也会影响到EFLAGS数据所以将在栈中的EFLAGS数据又覆盖回EFLAGS寄存器起到备份作用</p><p>jz      short loc_40103F</p><p>此处相当于如果al&#x3D;dl就返回原函数继续比较相当于该字符串的该字符相等就继续比较下一个字符</p><p>然后cmp al， 0 的操作是验证是否到了字符串末尾，</p><p>直到不相等（ZF&#x3D;0）或到达末尾(ZF&#x3D;1,因比较的函数如果不跳转回去其下一个函数就是用来退出的函数loc_401056)时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00401056 loc_401056:                             ; CODE XREF: sub_401032+1A↑j</span><br><span class="line">.text:00401056 pop     edi</span><br><span class="line">.text:00401057 pop     esi</span><br><span class="line">.text:00401058 pop     edx</span><br><span class="line">.text:00401059 pop     eax</span><br><span class="line">.text:0040105A leave</span><br><span class="line">.text:0040105B retn    8</span><br><span class="line">.text:0040105B sub_401032 endp</span><br></pre></td></tr></table></figure><p>这几个pop都类似</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225162850053.png" alt="image-20221225162850053"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225162901007.png" alt="image-20221225162901007"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225162907372.png" alt="image-20221225162907372"></p><p>变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225162926939.png" alt="image-20221225162926939"></p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225162934661.png" alt="image-20221225162934661"  /><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225162950621.png" alt="image-20221225162950621"></p><p>leave</p><p>观察得出EBP,ESP和栈顶发生了变化</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225163417850.png" alt="image-20221225163417850"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225163434471.png" alt="image-20221225163434471"></p><p>执行指令后</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225163501075.png" alt="image-20221225163501075"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225163511164.png" alt="image-20221225163511164"></p><p>所以leave相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp, ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure><p>retn    8</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225164933264.png" alt="image-20221225164933264"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225164949756.png" alt="image-20221225164949756"></p><p>执行后eip变为了原栈顶所指向的函数</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225165012100.png" alt="image-20221225165012100"></p><p>ESP也增加了8+4</p><p>所以retn 8&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop eip</span><br><span class="line">add esp, 8</span><br></pre></td></tr></table></figure><p>retn后eip指向的位置是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text:0040102B push    0                               ; uExitCode</span><br><span class="line">.text:0040102D call    ExitProcess</span><br></pre></td></tr></table></figure><p>push 0相当于传参数给了要call的ExitProcess函数</p><p>此处ExitProcess是退出的函数相当于直接退出程序</p><h2 id="strcpy-exe"><a href="#strcpy-exe" class="headerlink" title="strcpy.exe"></a>strcpy.exe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:00401032 sub_401032 proc near                    ; CODE XREF: .text:0040100A↑j</span><br><span class="line">.text:00401032                                         ; sub_40101C+A↑p</span><br><span class="line">.text:00401032</span><br><span class="line">.text:00401032 arg_0= dword ptr  8</span><br><span class="line">.text:00401032 arg_4= dword ptr  0Ch</span><br><span class="line">.text:00401032</span><br><span class="line">.text:00401032 push    ebp</span><br><span class="line">.text:00401033 mov     ebp, esp</span><br><span class="line">.text:00401035 push    eax</span><br><span class="line">.text:00401036 push    ecx</span><br><span class="line">.text:00401037 push    esi</span><br><span class="line">.text:00401038 push    edi</span><br><span class="line">.text:00401039 mov     ecx, 4</span><br><span class="line">.text:0040103E mov     esi, [ebp+arg_0]</span><br><span class="line">.text:00401041 mov     edi, [ebp+arg_4]</span><br><span class="line">.text:00401044 cld</span><br><span class="line">.text:00401045 rep movsb</span><br><span class="line">.text:00401047 pop     edi</span><br><span class="line">.text:00401048 pop     esi</span><br><span class="line">.text:00401049 pop     ecx</span><br><span class="line">.text:0040104A pop     eax</span><br><span class="line">.text:0040104B leave</span><br><span class="line">.text:0040104C retn    8</span><br><span class="line">.text:0040104C sub_401032 endp</span><br></pre></td></tr></table></figure><p>cld指令</p><p>通过搜索发现，其会更改DF为0值</p><p>因为原本DF就为0，所以我在运行时并未发现变化，此指令应该是用来访问字符串的</p><p>注：DF决定了内存访问的方向（DF&#x3D;0，向高地址增加）（DF&#x3D;1，向地地址减小）</p><p>rep movsb</p><p>其更改了ecx,esi和edi的值</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225171012597.png" alt="image-20221225171012597"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225171026472.png" alt="image-20221225171026472"></p><p>ECX 4-&gt;0</p><p>通过搜索发现</p><p>movsb是移动一字节从ESI往EDI（不更改原数据，同时使ESI+1 EDI+1）</p><p>rep movsb</p><p>rep就是重复的意思上面的指令就是重复移动，通过对ECX赋值来确定移动的次数</p><h2 id="strlen-exe"><a href="#strlen-exe" class="headerlink" title="strlen.exe"></a>strlen.exe</h2><p>字符串长度的主要代码部分</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225175311965.png" alt="image-20221225175311965"></p><p>将字符串每个字符与\0比较，不为0就让edi，eax（用于存储长度）自增1，直到为0时就停止</p><h2 id="递归求和-exe"><a href="#递归求和-exe" class="headerlink" title="递归求和.exe"></a>递归求和.exe</h2><p>dec ecx</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225173710614.png" alt="image-20221225173710614"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225173721298.png" alt="image-20221225173721298"></p><p>使ecx自减了1</p><p>递归求和的主要代码部分：</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225175016173.png" alt="image-20221225175016173"></p><p>相当于从ECX的值一直加到0，从大到小，用EAX作为累加器，直到ECX&#x3D;0时停止</p><h2 id="字符串大写-exe"><a href="#字符串大写-exe" class="headerlink" title="字符串大写.exe"></a>字符串大写.exe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loc_401035:                             ; CODE XREF: sub_40102D+1A↓j</span><br><span class="line">.text:00401035                 mov     al, [esi]</span><br><span class="line">.text:00401037                 cmp     al, 0</span><br><span class="line">.text:00401039                 jz      short loc_401049</span><br><span class="line">.text:0040103B                 cmp     al, 61h ; &#x27;a&#x27;</span><br><span class="line">.text:0040103D                 jb      short loc_401046</span><br><span class="line">.text:0040103F                 cmp     al, 7Ah ; &#x27;z&#x27;</span><br><span class="line">.text:00401041                 ja      short loc_401046</span><br><span class="line">.text:00401043                 and     byte ptr [esi], 0DFh</span><br></pre></td></tr></table></figure><p>jz相等就跳转，jb小于就跳转，ja大于就跳转</p><p>等于0就代表字符串结束就不用更改大小写直接可以进入程序的结尾</p><p>而符合a~z则就需要更改大小写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;寄存器&quot;&gt;&lt;a href=&quot;#寄存器&quot; class=&quot;headerlink&quot; title=&quot;寄存器&quot;&gt;&lt;/a&gt;寄存器&lt;/h1&gt;&lt;p&gt;在动态调试中需知道各寄存器意义及作用&lt;/p&gt;
&lt;p&gt;寄存器分为两类，通用寄存器和特殊寄存器。&lt;/p&gt;
&lt;h2 id=&quot;通用寄存器&quot;&gt;</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>学习报告（三到四周）</title>
    <link href="http://example.com/2023/06/06/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%EF%BC%88%E4%B8%89%E5%88%B0%E5%9B%9B%E5%91%A8%EF%BC%89/"/>
    <id>http://example.com/2023/06/06/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%EF%BC%88%E4%B8%89%E5%88%B0%E5%9B%9B%E5%91%A8%EF%BC%89/</id>
    <published>2023-06-06T04:12:00.716Z</published>
    <updated>2023-06-06T04:12:00.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习报告（三到四周）"><a href="#学习报告（三到四周）" class="headerlink" title="学习报告（三到四周）"></a>学习报告（三到四周）</h1><h2 id="base16"><a href="#base16" class="headerlink" title="base16"></a>base16</h2><p>可通过位运算（高效率）进行加密</p><p>基本已经知道其加密模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> table[] = &#123; <span class="string">&quot;0123456789ABCDEF&quot;</span> &#125;;<span class="comment">//字典</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">r</span><span class="params">( <span class="type">char</span> m)</span><span class="comment">//一个字符将被加密为两个字符可分为左右</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">    a=m&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> a &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">l</span><span class="params">(<span class="type">char</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">    a = n;</span><br><span class="line">    <span class="keyword">return</span> (a&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">check</span><span class="params">( <span class="type">char</span> a, <span class="type">char</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c;<span class="comment">//将char转为无符号的</span></span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">15</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == *(b + c))<span class="comment">//检索字典寻找其四位对应值</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag, a, b, c, f;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;选择模式加密0/解密1:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;flag);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="type">char</span> yuan[<span class="number">100</span>], jia[<span class="number">200</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入待加密的字符:&quot;</span>);</span><br><span class="line">            fgets(yuan,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">for</span> (a = <span class="number">0</span>; <span class="number">1</span>; a++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (yuan[a] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (b = <span class="number">0</span>, f = <span class="number">0</span>; b &lt; (<span class="number">2</span> * a); b += <span class="number">2</span>, f++)</span><br><span class="line">            &#123;</span><br><span class="line">                jia[b] = table[l(yuan[f])];</span><br><span class="line">                jia[b + <span class="number">1</span>] = table[r(yuan[f])];</span><br><span class="line">            &#125;</span><br><span class="line">            jia[<span class="number">2</span> * a] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="built_in">puts</span>(jia);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> jiami[<span class="number">100</span>], jiemi[<span class="number">50</span>], e;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入待解密的字符:&quot;</span>);</span><br><span class="line">        fgets(jiami,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">for</span> (a = <span class="number">0</span>; <span class="number">1</span>; a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (jiami[a] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                jiami[a] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>, c = <span class="number">0</span>; b &lt; a; b += <span class="number">2</span>, c++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            jiemi[c] = ((check(jiami[b], table) &lt;&lt; <span class="number">4</span>) + check(jiami[b + <span class="number">1</span>], table));</span><br><span class="line">        &#125;</span><br><span class="line">        jiemi[(a) / <span class="number">2</span> <span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(jiemi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>与base16类似都可以通过位运算进行加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> zidian[]=&#123;<span class="string">&quot;ABCDEFGHIJKMLNOPQRSTUVWXYZabcdefghijkmlnopqrstuvwxyz0123456789+/&quot;</span>&#125;;<span class="comment">//字典</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">base64</span><span class="params">(<span class="type">char</span> *jiami,<span class="type">int</span> n,<span class="type">char</span> *jiemi)</span><span class="comment">//加密操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a;<span class="comment">//vsc中char有符号</span></span><br><span class="line"><span class="type">int</span> b,c;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>)<span class="comment">//每三个字符生成四个字符的密文，此处判断是否满足能被三整除以判断是否需要补位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>,c=<span class="number">0</span>;b&lt;(n-(n%<span class="number">3</span>));c+=<span class="number">4</span>,b+=<span class="number">3</span>)<span class="comment">//这几处位运算分开是因为位运算特性:运算结束后补0</span></span><br><span class="line">&#123;</span><br><span class="line">    a=jiami[b]&gt;&gt;<span class="number">2</span>;<span class="comment">//取char型的高6位</span></span><br><span class="line">    jiemi[c]=zidian[a];</span><br><span class="line">    a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];<span class="comment">//取前一个char的低2位和后一个的高4位</span></span><br><span class="line">    a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    jiemi[c+<span class="number">2</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)];<span class="comment">//取前一个char的低4位和后一个的高二位</span></span><br><span class="line">    a=jiami[b+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c+<span class="number">3</span>]=zidian[a&gt;&gt;<span class="number">2</span>];<span class="comment">//取最后一个的低6位 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>,c=<span class="number">0</span>;b&lt;(n-(n%<span class="number">3</span>));c+=<span class="number">4</span>,b+=<span class="number">3</span>)<span class="comment">//这几处位运算分开是因为位运算特性:运算结束后补0</span></span><br><span class="line">&#123;</span><br><span class="line">    a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c]=zidian[a];</span><br><span class="line">    a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    jiemi[c+<span class="number">2</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c+<span class="number">3</span>]=zidian[a&gt;&gt;<span class="number">2</span>]; </span><br><span class="line">&#125;<span class="comment">//因为余一，所以取最后的字符的高六位，作为一个字符，剩下的二位与四个0组成下个字符，剩下的两个密文字符全由0补齐</span></span><br><span class="line">a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">jiemi[c]=zidian[a];</span><br><span class="line">a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">jiemi[c+<span class="number">1</span>]=zidian[a&gt;&gt;<span class="number">2</span>];</span><br><span class="line">jiemi[c+<span class="number">2</span>]=zidian[<span class="number">0</span>];</span><br><span class="line">jiemi[c+<span class="number">3</span>]=zidian[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>,c=<span class="number">0</span>;b&lt;(n-(n%<span class="number">3</span>));c+=<span class="number">4</span>,b+=<span class="number">3</span>)<span class="comment">//这几处位运算分开是因为位运算特性:运算结束后补0</span></span><br><span class="line">&#123;</span><br><span class="line">    a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c]=zidian[a];</span><br><span class="line">    a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    jiemi[c+<span class="number">2</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c+<span class="number">3</span>]=zidian[a&gt;&gt;<span class="number">2</span>]; </span><br><span class="line">&#125;<span class="comment">//因为余二，所以取最后的字符的高六位，作为一个字符，剩下的二位与下个字符的高四位组成下个字符，剩下的两位与四位0补齐，最后的剩下的一个密文字符全由0补齐</span></span><br><span class="line">a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">jiemi[c]=zidian[a];</span><br><span class="line">a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];</span><br><span class="line">a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">jiemi[c+<span class="number">2</span>]=zidian[a&gt;&gt;<span class="number">2</span>];</span><br><span class="line">jiemi[c+<span class="number">3</span>]=zidian[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">a=((n-n%<span class="number">3</span>)/<span class="number">3</span>)+<span class="number">1</span>;</span><br><span class="line">jiemi[<span class="number">4</span>*a]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">found</span><span class="params">(<span class="type">char</span> jiami)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;<span class="comment">//char具有符号会出现复数等离奇情况 unsigned char无符号则无此情况</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">64</span>;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(jiami==zidian[a])<span class="comment">//与字典对应寻找密文对应的6位二进制数</span></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">base64jiemi</span><span class="params">(<span class="type">char</span> *jiami,<span class="type">int</span> n,<span class="type">char</span> *jiemi)</span><span class="comment">//解密操作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c;<span class="comment">//char具有符号会出现复数等离奇情况 unsigned char无符号则无此情况</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>,b=<span class="number">0</span>;a&lt;n;a+=<span class="number">4</span>,b+=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        jiemi[b]=(found(jiami[a])&lt;&lt;<span class="number">2</span>)+(found(jiami[a+<span class="number">1</span>])&gt;&gt;<span class="number">4</span>);<span class="comment">//8bit数需要6位和2位拼接此处都为拼接操作</span></span><br><span class="line">        c=found(jiami[a+<span class="number">1</span>])&lt;&lt;<span class="number">4</span>;</span><br><span class="line">        jiemi[b+<span class="number">1</span>]=c+(found(jiami[a+<span class="number">2</span>])&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        c=found(jiami[a+<span class="number">2</span>])&lt;&lt;<span class="number">6</span>;</span><br><span class="line">        jiemi[b+<span class="number">2</span>]=c+found(jiami[a+<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,m,flag;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择加密/解密 0/1&quot;</span>);<span class="comment">//加密解密二合一</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;flag);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入加密长度&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//吸掉回车</span></span><br><span class="line"><span class="type">char</span> *jiami=(<span class="type">char</span>*)<span class="built_in">calloc</span>(n,<span class="keyword">sizeof</span>(<span class="type">char</span>));<span class="comment">//申请连续的内存作为数组使用</span></span><br><span class="line">fgets(jiami,n,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;n;m++)</span><br><span class="line"><span class="keyword">if</span>(jiami[m]==<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    jiami[m]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *jiemi=(<span class="type">char</span>*)<span class="built_in">calloc</span>(<span class="number">4</span>*(((n-n%<span class="number">3</span>)/<span class="number">3</span>)+<span class="number">1</span>)<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">base64(jiami,m,jiemi);</span><br><span class="line"><span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入解密长度&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//吸掉回车</span></span><br><span class="line"><span class="type">char</span> *jiami=(<span class="type">char</span>*)<span class="built_in">calloc</span>(n,<span class="keyword">sizeof</span>(<span class="type">char</span>));<span class="comment">//申请连续的内存作为数组使用</span></span><br><span class="line">fgets(jiami,n,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;n;m++)</span><br><span class="line"><span class="keyword">if</span>(jiami[m]==<span class="string">&#x27;\n&#x27;</span>)<span class="comment">//fgets会吸掉回车，可以以回车来作为结束符</span></span><br><span class="line">&#123;</span><br><span class="line">    jiami[m]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *jiemi=(<span class="type">char</span>*)<span class="built_in">calloc</span>(m,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">base64jiemi(jiami,m,jiemi);</span><br><span class="line"><span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="base58"><a href="#base58" class="headerlink" title="base58"></a>base58</h2><p>进行大数运算将256进制转化为58进制，但longlongint有长度限制，此代码无法完全计算出超过7个字符的加密结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> zidian[] = <span class="string">&quot;123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> e=<span class="number">98</span>;</span><br><span class="line"><span class="comment">//下面为加密所用函数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">cifang</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n)</span><span class="comment">//计算a的n次方方便进行每次都取到两位来与字典一一对应</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)a * cifang(a, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">zhuanhua10</span><span class="params">(<span class="type">char</span>* a, <span class="type">int</span> n)</span><span class="comment">//转化为十进制数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>) * a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)((*(a + n - <span class="number">1</span>)) + (zhuanhua10(a, n - <span class="number">1</span>) * <span class="number">256</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">zhuanhua58</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n, <span class="type">int</span>* p, <span class="type">int</span>* flag)</span><span class="comment">//转化为58进制数同时每两位表示一个58进制方便对字典进行比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*flag == <span class="number">0</span>)<span class="comment">//*p用来计算所存在的字符串长度方便从高位到低位输出，同时方便创造存放加密后密文的数组</span></span><br><span class="line">&#123;</span><br><span class="line">*p = *p + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">58</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*p = *p - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> n % <span class="number">58</span> + zhuanhua58((<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)(n - n % <span class="number">58</span>) / <span class="number">58</span>, p, flag) * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">base58</span><span class="params">(<span class="type">char</span>* jiami, <span class="type">int</span> n, <span class="type">int</span>* p, <span class="type">char</span>* jiemi, <span class="type">int</span>* flag)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> c;</span><br><span class="line">c = zhuanhua58(zhuanhua10(jiami, n), p, flag);</span><br><span class="line"><span class="keyword">for</span> (a = *p, b = <span class="number">0</span>; a &gt; <span class="number">0</span>; a--, b++)</span><br><span class="line">&#123;</span><br><span class="line">jiemi[b] = zidian[(c / cifang(<span class="number">100</span>, a)) - (c / cifang(<span class="number">100</span>, a + <span class="number">1</span>)) * <span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">jiemi[b + <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面为解密所用函数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">jiaoyan</span><span class="params">(<span class="type">char</span> a)</span><span class="comment">//与字典进行比较找到对应的58进制值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>;<span class="number">1</span>;b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a==zidian[b])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">huifu10</span><span class="params">(<span class="type">char</span> *jiami,<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span><span class="comment">//将58进制值转化为10进制值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jiaoyan(jiami[n])+huifu10(jiami,n<span class="number">-1</span>)*<span class="number">58</span>;<span class="comment">//从n开始是因为输入的数组第0位为高位，后位为低位，从最低位开始方便进行进制转化,且因为58进制数每位都要占两位所以乘了100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">huifu256</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n%<span class="number">256</span>+huifu256((n-n%<span class="number">256</span>)/<span class="number">256</span>)*<span class="number">1000</span>;<span class="comment">//将10进制数转化为256进制（与ascii码对应）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">base58jiemi</span><span class="params">(<span class="type">char</span> *jiemi,<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">1000</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e++;<span class="comment">//因为要输入所以前移一位但此时以经没有输入了就让数组指向最高位字符</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">jiemi[e]=n%<span class="number">1000</span>;<span class="comment">//取低三位获取低位值</span></span><br><span class="line">e--;<span class="comment">//将数组前移一位</span></span><br><span class="line">base58jiemi(jiemi,n/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择加密/解密：0/1&quot;</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符数&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="type">char</span>* jiami = (<span class="type">char</span>*)<span class="built_in">calloc</span>(n+<span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">fgets(jiami, n+<span class="number">2</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="type">int</span> jishu = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> fla = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>* flag = &amp;fla;</span><br><span class="line"><span class="type">int</span>* pjishu = &amp;jishu;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; <span class="number">1</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (jiami[n] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">jiami[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">zhuanhua58(zhuanhua10(jiami, n), pjishu, flag);</span><br><span class="line">*flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span>* jiemi = (<span class="type">char</span>*)<span class="built_in">calloc</span>(*pjishu + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">base58(jiami, n, pjishu, jiemi, flag);</span><br><span class="line"><span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符数&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="type">char</span>* jiami = (<span class="type">char</span>*)<span class="built_in">calloc</span>(n+<span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">fgets(jiami, n+<span class="number">2</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; <span class="number">1</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (jiami[n] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">jiami[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> jiemi[<span class="number">100</span>]=<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">jiemi[<span class="number">99</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">base58jiemi(jiemi,huifu256(huifu10(jiami,n<span class="number">-1</span>)));</span><br><span class="line"><span class="built_in">puts</span>(jiemi+e);</span><br><span class="line">&#125;;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>通过特定规律（不同key不同规律）打乱数组，因所用的char为signedchar有128种，所以此处进行128字节加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int panduanweishu(int a)//判断key数位数，方便填充T表</span><br><span class="line">&#123;</span><br><span class="line">    int b,c;</span><br><span class="line">    for(b=1,c=10;1;b++,c*=10)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a/c==0)</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void anweitianchongKbiao(int *T,int b,int weishu)//对T表进行填充</span><br><span class="line">&#123;</span><br><span class="line">int a,c;</span><br><span class="line">for(a=weishu-1,c=10;a&gt;=0;a--,c*=10)</span><br><span class="line">&#123;</span><br><span class="line">    T[a]=b%c-b%(c/10);</span><br><span class="line">&#125;</span><br><span class="line">for(a=weishu;a&lt;128;a++)</span><br><span class="line">&#123;</span><br><span class="line">    T[a]=T[a%weishu];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void swap(int *a,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">   a[x]=a[x]^a[y];</span><br><span class="line">   a[y]=a[x]^a[y];</span><br><span class="line">   a[x]=a[x]^a[y];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int S[128],T[128],a,b,c,d,key;</span><br><span class="line">    char jiami[100],jiemi[100];</span><br><span class="line">    printf(&quot;请选择加密或解密 0/1:&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">    getchar();</span><br><span class="line">    switch(a)</span><br><span class="line">    &#123;</span><br><span class="line">    case 0:&#123;</span><br><span class="line">    printf(&quot;请输入待加密字符&quot;);</span><br><span class="line">    gets(jiami);</span><br><span class="line">    printf(&quot;请输入初始KEY&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;key);</span><br><span class="line">    getchar();</span><br><span class="line">    for(a=0;a&lt;128;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[a]=a;//初始化S表</span><br><span class="line">    &#125;</span><br><span class="line">    anweitianchongKbiao(T,key,panduanweishu(key));</span><br><span class="line">    for(a=0,b=0;a&lt;128;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+S[a]+T[a])%128;//通过T表提供顺序进行打乱S表</span><br><span class="line">        swap(S,a,b);//打乱操作</span><br><span class="line">    &#125;</span><br><span class="line">    //取得密钥,同时加密 </span><br><span class="line">    for(a=0,b=0,c=0;a&lt;strlen(jiami);a++)//此处都为取得密码流操作对字符进行异或</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+1)%128;</span><br><span class="line">        c=(c+S[b])%128;</span><br><span class="line">        swap(S,b,c);</span><br><span class="line">        d=(S[b]+S[c])%128;</span><br><span class="line">        key=S[d];</span><br><span class="line">        jiami[a]=jiami[a]^key;</span><br><span class="line">    &#125;</span><br><span class="line">    puts(jiami);</span><br><span class="line">    &#125;break;</span><br><span class="line">    case 1:&#123;</span><br><span class="line">     printf(&quot;请输入待解密字符&quot;);//解密过程是通过相同的异或操作恢复原来的数据</span><br><span class="line">    gets(jiami);</span><br><span class="line">    printf(&quot;请输入初始KEY&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;key);</span><br><span class="line">    getchar();</span><br><span class="line">    for(a=0;a&lt;128;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[a]=a;</span><br><span class="line">    &#125;</span><br><span class="line">    anweitianchongKbiao(T,key,panduanweishu(key));</span><br><span class="line">    for(a=0,b=0;a&lt;128;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+S[a]+T[a])%128;//通过T表提供顺序进行打乱S表</span><br><span class="line">        swap(S,a,b);//打乱操作</span><br><span class="line">    &#125;</span><br><span class="line">    for(a=0,b=0,c=0;a&lt;strlen(jiami);a++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+1)%128;</span><br><span class="line">        c=(c+S[b])%128;</span><br><span class="line">        swap(S,b,c);</span><br><span class="line">        d=(S[b]+S[c])%128;</span><br><span class="line">        key=S[d];</span><br><span class="line">        jiami[a]=(unsigned char)jiami[a]^key;//通过异或相同的数来使其恢复</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    puts(jiami);</span><br><span class="line">    &#125;break;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tea"><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">teajiami</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> <span class="comment">//此处uint32长度就为usigned int占32bit共4个字节</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0</span>;  <span class="comment">// 注意sum也是32位无符号整型</span></span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="comment">//进行32轮迭代，次数越多越难破解，但同时效率也会降低</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);<span class="comment">//此处可以作为检验tea加密的突破口，移位运算结合异或运算</span></span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>]=v0; </span><br><span class="line">    v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">teajiemi</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> <span class="comment">//解密也是进行相同的异或操作，通过异或同一个数恢复原数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = delta * <span class="number">32</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>]=v0; </span><br><span class="line">    v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 两个32位无符号整数，即待加密的64bit明文数据</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x12345678</span>, <span class="number">0x78563412</span>&#125;;</span><br><span class="line">    <span class="comment">// 四个32位无符号整数，即128bit的key</span></span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>]= &#123;<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    teajiami(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    teajiemi(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><p>待做，特征为加密轮数由加密个数决定</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>md5主要用于校验文件（不同的文件生成的md5码不同，通过检测传输前后的md5码可以检测其是否被篡改）</p><p>MD5可以将信息以512位来处理信息</p><p>主要是让信息长度比512的整数倍少64位（记录数据长度），若不足则进行填充（由一个一和对应的后续一段0表示）</p><p>再将对应的信息分块，每块有512位，再将每块再分为16个32位</p><p>用四组幻数进行循环计算（可用于检验是否位为MD5算法）</p><p>另外检验MD5算法一般可以看见较长的函数运算语句</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习报告（三到四周）&quot;&gt;&lt;a href=&quot;#学习报告（三到四周）&quot; class=&quot;headerlink&quot; title=&quot;学习报告（三到四周）&quot;&gt;&lt;/a&gt;学习报告（三到四周）&lt;/h1&gt;&lt;h2 id=&quot;base16&quot;&gt;&lt;a href=&quot;#base16&quot; class=&quot;</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="实验室报告" scheme="http://example.com/categories/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>学习报告（一到二周）</title>
    <link href="http://example.com/2023/06/06/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%EF%BC%88%E4%B8%80%E5%88%B0%E4%BA%8C%E5%91%A8%EF%BC%89/"/>
    <id>http://example.com/2023/06/06/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%EF%BC%88%E4%B8%80%E5%88%B0%E4%BA%8C%E5%91%A8%EF%BC%89/</id>
    <published>2023-06-06T04:12:00.713Z</published>
    <updated>2023-06-06T04:12:00.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习报告（一到二周）"><a href="#学习报告（一到二周）" class="headerlink" title="学习报告（一到二周）"></a>学习报告（一到二周）</h1><h3 id="语言学习"><a href="#语言学习" class="headerlink" title="语言学习"></a>语言学习</h3><h4 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h4><p>已基本了解其使用语法，及其功能（函数调用，返回父函数）</p><p>mov，jmp，push，pop（基本语句）</p><p>call（调用子函数），ret（返回父函数），leave（将栈中的指向子函数地址去除，恢复父函数指令）</p><h4 id="stack用法"><a href="#stack用法" class="headerlink" title="stack用法"></a>stack用法</h4><p>存储函数在内存中的位置，存储变量，存储命令等</p><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><p>基本理解指针用法（用于指向变量地址），可用于子函数中调用外部变量,也可用于间接修改和间接引用对应地址的值</p><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><h4 id="ida静态分析"><a href="#ida静态分析" class="headerlink" title="ida静态分析"></a>ida静态分析</h4><p>通过解ctf题逐步理解</p><p>基本可以看懂其伪代码表示意思</p><p>基本会搜索相应输出结果以找到目标程序</p><h3 id="评测作业"><a href="#评测作业" class="headerlink" title="评测作业"></a>评测作业</h3><h4 id="1，交换数值"><a href="#1，交换数值" class="headerlink" title="1，交换数值"></a>1，交换数值</h4><p>(1)指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">change</span> <span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">m = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = m;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br><span class="line">change (&amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)+-交换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)异或(利用两次异或后为原值)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;b=<span class="number">2</span>;</span><br><span class="line">    a = a^b;</span><br><span class="line">    b = a^b;</span><br><span class="line">    a = a^b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2，汇编角度分析switch语句"><a href="#2，汇编角度分析switch语句" class="headerlink" title="2，汇编角度分析switch语句"></a>2，汇编角度分析switch语句</h4><p>switch相当于一个子函数，每个case对应命令地址，所有的case按我们在c语言中写出的顺序排序，switch寻找对应case名对应的地址，将IP移向对应地址再进行相应命令，根据IP进行一次命令后+一个命令长度，就会按顺序执行命令。</p><p>只要不遇到break就不会退出该子函数。</p><h4 id="3，位运算判断奇偶数"><a href="#3，位运算判断奇偶数" class="headerlink" title="3，位运算判断奇偶数"></a>3，位运算判断奇偶数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">if</span>(a&amp;<span class="number">1</span>==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a是一个偶数&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a是一个奇数&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过最后一位是否为1判断奇偶数，因为除第一位其他都为2的多少次方倍</p><h4 id="4，"><a href="#4，" class="headerlink" title="4，"></a>4，</h4><h5 id="选择排序（）"><a href="#选择排序（）" class="headerlink" title="选择排序（）"></a>选择排序（）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">change</span> <span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span><span class="comment">//交换数字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">m = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = m;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   a[]=&#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">   <span class="type">int</span> i,j;</span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &lt; =<span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[i])</span><br><span class="line">change(&amp;a[j], &amp;a[i]);\\交换数值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">change</span> <span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span><span class="comment">//交换数字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">m = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = m;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>],n,m,c,o;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt;= <span class="number">10000</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[n]);</span><br><span class="line"><span class="keyword">if</span> (getchar() == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (m = n<span class="number">-1</span>; m &gt;= <span class="number">0</span>; m--)<span class="comment">//依次将最高位移向最右端</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( o= <span class="number">0</span>;o &lt;= m; o++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[o] &gt; a[o + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">change(&amp;a[o],a[o+<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (o = <span class="number">0</span>; o &lt;= n; o++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, a[o]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="二分寻找"><a href="#二分寻找" class="headerlink" title="二分寻找"></a>二分寻找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> ele)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果[p,q] 不存在，返回 -1</span></span><br><span class="line"><span class="keyword">if</span> (p &gt; q) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到中间元素所在的位置</span></span><br><span class="line">mid = p + (q - p) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//递归的出口</span></span><br><span class="line"><span class="keyword">if</span> (ele == arr[mid]) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较 ele 和 arr[mid] 的值，缩小 ele 可能存在的区域</span></span><br><span class="line"><span class="keyword">if</span> (ele &lt; arr[mid]) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//新的搜索区域为 [p,mid-1]</span></span><br><span class="line"><span class="keyword">return</span> search(arr, p, mid - <span class="number">1</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//新的搜索区域为 [mid+1,q]</span></span><br><span class="line"><span class="keyword">return</span> search(arr, mid + <span class="number">1</span>, q, ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">10</span>,<span class="number">14</span>,<span class="number">19</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">31</span>,<span class="number">33</span>,<span class="number">35</span>,<span class="number">42</span>,<span class="number">44</span> &#125;;<span class="comment">//二分法首先得排序</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,search(a, <span class="number">0</span>, <span class="number">9</span>, <span class="number">31</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5，出的题目"><a href="#5，出的题目" class="headerlink" title="5，出的题目"></a>5，出的题目</h5><p>目测需要动态调试，没寻找到对应的地址，不太会做</p><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>仍需多加练习CTF</p><p>仍需多了解加密算法如base64及更高级的算法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习报告（一到二周）&quot;&gt;&lt;a href=&quot;#学习报告（一到二周）&quot; class=&quot;headerlink&quot; title=&quot;学习报告（一到二周）&quot;&gt;&lt;/a&gt;学习报告（一到二周）&lt;/h1&gt;&lt;h3 id=&quot;语言学习&quot;&gt;&lt;a href=&quot;#语言学习&quot; class=&quot;head</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="实验室报告" scheme="http://example.com/categories/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>学习报告(最后一次任务)</title>
    <link href="http://example.com/2023/06/06/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A(%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E4%BB%BB%E5%8A%A1)/"/>
    <id>http://example.com/2023/06/06/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A(%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E4%BB%BB%E5%8A%A1)/</id>
    <published>2023-06-06T04:12:00.708Z</published>
    <updated>2023-06-06T04:12:00.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RE1-PYC"><a href="#RE1-PYC" class="headerlink" title="RE1.PYC"></a>RE1.PYC</h1><p>先启动该文件看下运行结果</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235231628.png" alt=" "></p><p>不知道是因为什么无法再次运行，通过搜索找到是因为没有原py文件所以无法再次运行，那就通过ida(32位)看看其源代码</p><p>pyc文件主要是无法通过f5反汇编查找代码逻辑</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235426178.png" alt="image-20221203235426178"></p><p>尝试通过shift+f12查询字符串，结果如下</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203234728213.png" alt="image-20221203234728213"></p><p>一般有效的字符串，线索之类的会出现在此，如果不有效也一般会放在内存附近（一般）</p><p>通过双击寻找，往上翻后最终找到了对应的密文（非flag{}此类格式应该是经过了加密）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235623344.png" alt="image-20221203235623344"></p><p>下方也有说明，表现是通过base64加密的，将其拖入base64中解密</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235745853.png" alt="image-20221203235745853"></p><p>得到了最后的flag：D0g3{Do_You_Want_To_Hammer_Me}</p><h1 id="RE2"><a href="#RE2" class="headerlink" title="RE2"></a>RE2</h1><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221204003416911.png" alt="image-20221204003416911"></p><p>通过反汇编找到对应函数极少（一般是通过了加壳）</p><p>再通过寻找字符串，发现确实是通过了upx加壳,且是3.96版本，用普通的脱壳尝试如下</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221204004546195.png" alt="image-20221204004546195"></p><p>发现报错无法脱壳</p><p>疯狂百度，发现是经过了特征码修改</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221205152424562.png" alt="image-20221205152424562"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221205152739287.png" alt="image-20221205152739287"></p><p>尝试通过winhex修改该文件,失败了。</p><p>通过开挂发现需要dump</p><p>不太成功dump出源文件后（需进行反反编译操作将真正的EOP找到，然后再将源文件dump下来，此处我不知道为什么无法获取对原文加密的函数）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212212627494.png" alt="image-20221212212627494"></p><p>正常情况应该如图</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212213109598.png" alt="image-20221212213109598"></p><p>此处以正常情况距离</p><p>先通过shift+f12搜索显示的字符串</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212213343179.png" alt="image-20221212213343179"></p><p>双击选中</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212213424909.png" alt="image-20221212213424909"></p><p>再通过x查询交叉引用</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212213452131.png" alt="image-20221212213452131"></p><p>成功找到对应函数</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212213524142.png" alt="image-20221212213524142"></p><p>再通过f5反汇编就可以大致看懂了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212213555159.png" alt="image-20221212213555159"></p><p>根据wp所说此处采用了多重加密（包含仿射加密）</p><p>根据此处可以获得仿射加密的字典</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(v29, <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwzyz0123456789&#123;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>还有被加密的的字符</p><p>unsigned char是因为默认字符有负数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a[]=&#123;</span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x0A</span>,<span class="number">0xF3</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x04</span>,</span><br><span class="line"><span class="number">0xF2</span>,<span class="number">0x02</span>,<span class="number">0xF7</span>,<span class="number">0x08</span>,<span class="number">0xF5</span>,<span class="number">0x08</span>,<span class="number">0xF5</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x32</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x08</span>,<span class="number">0xF3</span>,<span class="number">0x04</span>,<span class="number">0x0A</span>,</span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x04</span>,<span class="number">0xF7</span>,<span class="number">0x08</span>,<span class="number">0x2A</span>,<span class="number">0x12</span>,</span><br><span class="line"><span class="number">0x2A</span>,<span class="number">0xF5</span>,<span class="number">0x04</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x04</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,</span><br><span class="line"><span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x0D</span>,<span class="number">0x34</span>,<span class="number">0xF2</span>,<span class="number">0x0D</span>,<span class="number">0xF5</span>,<span class="number">0x0A</span>,</span><br><span class="line"><span class="number">0x12</span>,<span class="number">0xF3</span>,<span class="number">0x02</span>,<span class="number">0xF2</span>,<span class="number">0x12</span>,<span class="number">0x12</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,</span><br><span class="line"><span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x0D</span>,<span class="number">0xF3</span>,<span class="number">0x0A</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据仿射加密规则c(密文)&#x3D;(a*m(待加密字符)+b)(mod n)</p><p>解密则需要获得密钥a与字典长度n的最大公因数gcd（a,n）</p><p>d(解密)&#x3D;(a-gcd(a,n)(c-b))(mod n)</p><p>其通过异或加密和数字分解加密将实际值掩盖了，首先应该通过</p><p>先异或回去再将质数乘回来</p><p>如下</p><p>此处分别异或的为0xf0和0x0f</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221213151537448.png" alt="image-20221213151537448"></p><p> 将分解出的质数拿出来放入数组中得</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> divi_step[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据wp</p><p>具体处理则为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a[]=&#123;</span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x0A</span>,<span class="number">0xF3</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x04</span>,</span><br><span class="line"><span class="number">0xF2</span>,<span class="number">0x02</span>,<span class="number">0xF7</span>,<span class="number">0x08</span>,<span class="number">0xF5</span>,<span class="number">0x08</span>,<span class="number">0xF5</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x32</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x08</span>,<span class="number">0xF3</span>,<span class="number">0x04</span>,<span class="number">0x0A</span>,</span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x04</span>,<span class="number">0xF7</span>,<span class="number">0x08</span>,<span class="number">0x2A</span>,<span class="number">0x12</span>,</span><br><span class="line"><span class="number">0x2A</span>,<span class="number">0xF5</span>,<span class="number">0x04</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x04</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,</span><br><span class="line"><span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x0D</span>,<span class="number">0x34</span>,<span class="number">0xF2</span>,<span class="number">0x0D</span>,<span class="number">0xF5</span>,<span class="number">0x0A</span>,</span><br><span class="line"><span class="number">0x12</span>,<span class="number">0xF3</span>,<span class="number">0x02</span>,<span class="number">0xF2</span>,<span class="number">0x12</span>,<span class="number">0x12</span>,<span class="number">0xF2</span>,<span class="number">0xF2</span>,</span><br><span class="line"><span class="number">0xF2</span>,<span class="number">0xF2</span>,<span class="number">0x0D</span>,<span class="number">0xF3</span>,<span class="number">0x0A</span>,</span><br><span class="line">&#125;;<span class="comment">//获取的密文</span></span><br><span class="line"><span class="comment">//0 1 4</span></span><br><span class="line"><span class="type">int</span> divi_step[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,</span><br><span class="line">&#125;;<span class="comment">//一般F0 最后一位0F</span></span><br><span class="line"><span class="type">char</span> table[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwzyz0123456789&#123;&#125;&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> wp[<span class="number">64</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> btmp=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,pre_base=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//素数分解逆推</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">btmp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;divi_step[i];j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==divi_step[i]<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">btmp=(a[pre_base+j]^<span class="number">0x0F</span>)*btmp;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">btmp=(a[pre_base+j]^<span class="number">0xF0</span>)*btmp;<span class="comment">//将原来异或的文字异或回去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">wp[i]=btmp;</span><br><span class="line">pre_base+=divi_step[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//异或逆推</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">// 1 2 3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">31</span>)</span><br><span class="line">wp[i]=wp[i]^wp[<span class="number">0</span>];<span class="comment">//通过异或的可逆性恢复原来的字符</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">wp[i]=wp[i]^wp[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//仿射密码学逆推</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">wp[i] = (<span class="type">unsigned</span> <span class="type">char</span>)((wp[i] - <span class="number">47</span>) * <span class="number">45</span>) % <span class="number">64</span>;<span class="comment">//强制转化为unsigned char 防止出现负数</span></span><br><span class="line">        <span class="comment">//这个符号的处理很重要的</span></span><br><span class="line">wp[i] = table[wp[i]];</span><br><span class="line">&#125;</span><br><span class="line">wp[<span class="number">32</span>]=<span class="number">0</span>;<span class="comment">//给字符串一个结尾</span></span><br><span class="line"><span class="built_in">puts</span>((<span class="type">char</span>*)wp);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    最终代码运行结果不是wp的答案那种而是D8g7{TherefIsfAfLongfWa6fTofGof}</p><p>wp中答案则是</p><p>D0g3{There_Is_A_Long_Way_To_Go_}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RE1-PYC&quot;&gt;&lt;a href=&quot;#RE1-PYC&quot; class=&quot;headerlink&quot; title=&quot;RE1.PYC&quot;&gt;&lt;/a&gt;RE1.PYC&lt;/h1&gt;&lt;p&gt;先启动该文件看下运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;wrwrw&#92;AppDa</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="实验室报告" scheme="http://example.com/categories/re/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8A%A5%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>ez_baby_apk</title>
    <link href="http://example.com/2023/06/06/re/%E5%AE%89%E5%8D%93/ez_baby_apk/"/>
    <id>http://example.com/2023/06/06/re/%E5%AE%89%E5%8D%93/ez_baby_apk/</id>
    <published>2023-06-06T04:12:00.703Z</published>
    <updated>2023-06-06T04:12:00.835Z</updated>
    
    <content type="html"><![CDATA[<p>ez_baby_apk</p><p>主方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(C0096R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="string">&quot;reversecarefully&quot;</span>.replaceAll(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;3&quot;</span>);<span class="comment">//将e换成3</span></span><br><span class="line">        <span class="built_in">this</span>.flag = (TextView) findViewById(C0096R.C0099id.flag);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">vector2</span> <span class="operator">=</span> (String) confusion(<span class="string">&quot;reversehavemagic&quot;</span>);<span class="comment">//对字符串进行md5加密</span></span><br><span class="line">        <span class="built_in">this</span>.input_1 = (EditText) findViewById(C0096R.C0099id.input_1);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(C0096R.C0099id.button);</span><br><span class="line">        <span class="built_in">this</span>.button = button;</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">C00001</span>(<span class="built_in">this</span>, vector2, key1, <span class="string">&quot;BxLHc1KruiH31I94W171oal+9olDzgBIjnK/J1Db0IUyi+MbI38+nw62ejCPShRB&quot;</span>));<span class="comment">//此处为密文</span></span><br><span class="line">    &#125;<span class="comment">//注意其传参位置 vector才是key，key是偏移量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>md5加密方法(此处输出的是32位小写)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">confusion</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);     <span class="comment">// Catch: Exception -&gt; L6</span></span><br><span class="line">        md.update(str.getBytes());     <span class="comment">// Catch: Exception -&gt; L6</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md.digest()).toString(<span class="number">16</span>);</span><br><span class="line">    L6:</span><br><span class="line">        e = move-exception;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DES加密方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DES</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String strKey, String strClearText, String mstrIvParameter)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] raw = strKey.getBytes();     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">skeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(raw, type);     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(CBC_PKCS5_PADDING);     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(mstrIvParameter.getBytes());     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        cipher.init(<span class="number">1</span>, skeySpec, iv);     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        <span class="type">byte</span>[] cipherText = cipher.doFinal(strClearText.getBytes());     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBase64Content</span> <span class="operator">=</span> Base64.encodeToString(cipherText, <span class="number">0</span>);     <span class="comment">// Catch: Exception -&gt; L7</span></span><br><span class="line">        <span class="keyword">return</span> strBase64Content.replaceAll(System.getProperty(<span class="string">&quot;line.separator&quot;</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    L7:</span><br><span class="line">        e = move-exception;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处des使用的是CBC模式，pkcs5padding带有偏移量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">密文&quot;BxLHc1KruiH31I94W171oal+9olDzgBIjnK/J1Db0IUyi+MbI38+nw62ejCPShRB&quot;</span><br><span class="line"></span><br><span class="line">密码(String) confusion(&quot;reversehavemagic&quot;) 32位小写md5</span><br><span class="line"></span><br><span class="line">偏移&quot;reversecarefully&quot;.replaceAll(&quot;e&quot;, &quot;3&quot;)</span><br></pre></td></tr></table></figure><p>但我自己电脑复现出来是乱码，可以通过网上的解密工具进行解密</p><p>NKCTF{nI_k@i_sHi_zhu_j1an_il_Jie_RE_le}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ez_baby_apk&lt;/p&gt;
&lt;p&gt;主方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="安卓" scheme="http://example.com/categories/re/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>smc</title>
    <link href="http://example.com/2023/06/06/re/smc/"/>
    <id>http://example.com/2023/06/06/re/smc/</id>
    <published>2023-06-06T04:12:00.694Z</published>
    <updated>2023-06-06T04:12:00.821Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __usercall <span class="title function_">sub_411244</span><span class="params">(<span class="type">unsigned</span> __int8 a1@&lt;al&gt;, <span class="type">unsigned</span> __int16 a2@&lt;dx&gt;, <span class="type">int</span> a3@&lt;edi&gt;)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_4117A0(a1, a2, a3);</span><br><span class="line">&#125;<span class="comment">//此处是被加密后的函数</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x004117A0</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">171</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PatchByte</span>(addr+i,<span class="built_in">Byte</span>(addr+i)^(<span class="number">-18</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//可以通过idc脚本来解密,解密后需要手动找到对应的位置进行代码转化，ida可能识别不到对应的是个函数 用p键对准函数头来将其识别为函数</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_4117A0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41C0A2);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a1) = ((*(_BYTE *)(i + a1) | ~*(_BYTE *)(a1 + (i + <span class="number">1</span>) % a2)) &amp; (*(_BYTE *)(a1 + (i + <span class="number">1</span>) % a2) | ~*(_BYTE *)(i + a1)))</span><br><span class="line">                       + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;<span class="comment">//解密后的加密过程</span></span><br></pre></td></tr></table></figure><p>pythonz3解题方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a=[<span class="number">0x90</span>,<span class="number">0xA0</span>,<span class="number">0xF8</span>,<span class="number">0x93</span>,<span class="number">0x8F</span>,<span class="number">0xF8</span>,<span class="number">0xF3</span>,<span class="number">0xF2</span>,</span><br><span class="line">    <span class="number">0xE7</span>,<span class="number">0x9F</span>,<span class="number">0xFB</span>,<span class="number">0x8F</span>,<span class="number">0xE9</span>,<span class="number">0x00</span>,<span class="number">0xEB</span>,<span class="number">0xE6</span>,</span><br><span class="line">    <span class="number">0xED</span>,<span class="number">0xEE</span>,<span class="number">0xED</span>,<span class="number">0xF4</span>,<span class="number">0xEE</span>,<span class="number">0xE1</span>,<span class="number">0xFD</span>,<span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0xE7</span>,<span class="number">0xFC</span>,<span class="number">0xE3</span>,<span class="number">0x00</span>,<span class="number">0x9A</span>,<span class="number">0x00</span>,<span class="number">0x9B</span>,<span class="number">0x39</span>]</span><br><span class="line">flag =[BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">out=[<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    out[i]=flag[i]</span><br><span class="line">f=Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    out[i]=((out[i]|~out[(i+<span class="number">1</span>)%<span class="number">32</span>])&amp;(out[(i+<span class="number">1</span>)%<span class="number">32</span>]|~out[i]))+<span class="number">1</span><span class="comment">#注意括号，因为运算符号顺序不同括号很重要！</span></span><br><span class="line">    f.add(out[i]==a[i])</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br></pre></td></tr></table></figure><p>答案为</p><p>B2RZ7FNCMT50AVVCYJXKGUJITMITT22W</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re</title>
    <link href="http://example.com/2023/06/06/re/Re/"/>
    <id>http://example.com/2023/06/06/re/Re/</id>
    <published>2023-06-06T04:12:00.689Z</published>
    <updated>2023-06-06T04:12:00.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p>cpu中储存需要用到的数值地址之类的名叫寄存器(AX,BX,CX诸如此类)。</p><p>cpu执行命令是按次序进行的通过cs，ip共同决定cs（段地址），ip（偏移地址）</p><p>cs*16+ip便为此次命令的地址，若此次命令并不改变cs或ip，则ip+3或2（由下条命令长度决定）</p><p>然后执行下次命令。如下图（由左至右CS:IP,指令在十六进制下的表现,指令含义）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221103224226701.png" alt="image-20221103224226701"></p><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><h6 id="Dosbox"><a href="#Dosbox" class="headerlink" title="Dosbox"></a>Dosbox</h6><p>常用命令</p><p>r命令-展示当前各寄存器值（AX,BX之类）以及当前指向的指令地址（CS,IP）栈地址（SS,SP）</p><p>u命令-展示当前指令地址后几行的指令及地址</p><p>a命令-修改指定地址所存储的指令（重点是指令）</p><p>t命令-执行当前CSIP指向的指令并显示当前哥寄存器值和当前指令地址</p><p>d命令-若不输入如d xxxx:xxxx的地址则显示当前指令地址的内存中存储的数据（地址，数据16进制，数据以ASCII码表现状态）<img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221103225412564.png"></p><p>e命令-修改内存中数据（16进制）（如下图实现在内存中写入hello world）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e 073f:0100</span><br><span class="line">073f:0100 00.48 00.65 00.6c 00.6c 00.6f 00.20 00.57 00.6f 00.72 00.6c 00.64//修改内存</span><br><span class="line">d 0100 //查看0100处内存</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221103232108493.png" alt="image-20221103232108493"></p><p>常用指令</p><p>jmp-将cs:ip指向所输入的地址（如 jmp xxxx:xxxx）也可直接调用寄存器中的值（如 jmp ax）</p><p>mov-将后项的值赋给前项（注：不能赋给ip）</p><p>add-将前项加上后项且和赋给前项</p><p>sub-将前项减去后项且差赋给前项</p><p>cmp-比较指令，可分为相等，大于，小于：</p><p>cmprsi,rdi相当于 rsi？rdi，”?”可为&gt;.&lt;.&#x3D;</p><p>cmov-条件跳转，分为很多种，但是只要满足对应条件就进行替换 </p><p>cmova（大于就替换）rdx, rax 大于就将rax赋给rdx</p><p>具体指令在<a href="http://www.cppblog.com/tgh621/archive/2008/09/02/60721.aspx">CMOV开头的汇编指令 - c++初学者 - C++博客 (cppblog.com)</a></p><p>retn n- 相当于对应跳转</p><p>pop eip </p><p>add esp, n</p><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><p>{</p><p>push-将所给值推入栈</p><p>pop-将栈顶值赋给对应寄存器或内存</p><h6 id="栈-用来存储指令，地址，等数据，其特点是存储方向由高地址到低地址（windows中）"><a href="#栈-用来存储指令，地址，等数据，其特点是存储方向由高地址到低地址（windows中）" class="headerlink" title="栈-用来存储指令，地址，等数据，其特点是存储方向由高地址到低地址（windows中）"></a>栈-用来存储指令，地址，等数据，其特点是存储方向由高地址到低地址（windows中）</h6><p>根据cpu位数不同栈一个栈帧存放不同大小数据（一个字）如16位是2字节，32位4字节，64位8字节</p><p>高位地址放高位数据低位地址放低位数据（如16位cpu存放数据高八位存高位地址低八位存低位地址,输入AB则高位是A低位是B）</p><p>}</p><h5 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h5><h6 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h6><ul><li>EAX（寄存器寄存器-累加器）：最常用于算术，逻辑和数据传输指令、乘法和除法运算使用此寄存器。对于Windows API函数，函数的返回值通常将存储在EAX寄存器中。</li><li>EBX（基址寄存器）：EBX寄存器可以直接访问存储器数据，它也是一个通用寄存器。</li><li>ECX（计数寄存器）：ECX是一个共享寄存器，可以用作各种命令的计数器。它还可能包含内存中的数据未对齐。使用计数器的命令是顺序，循环和LOOP &#x2F; LOOPD指令。</li><li>EDX（数据寄存器）：是一个通用寄存器，用于包含乘法结果或除法结果的一部分。它还可以直接访问内存中的数据地址。</li><li>EDI（目标索引）：EDI通常用于处理字符串或数组的工作。该寄存器将指向目标字符串。此外它也是一个通用寄存器。</li><li>ESI（源索引）：与EDI一样，ESI也经常用于处理字符串或数组的操作。该寄存器将指向源字符串。</li><li>EBP（基本指针）：EBP指向内存位置，除了被共享外，还用作访问函数堆栈中的参数和局部变量的帧指针。</li><li>ESP（堆栈指针）：该寄存器始终指向当前堆栈顶部。根据堆栈的工作原理，该寄存器将被定向到低位地址。</li></ul><h6 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a>特殊寄存器</h6><ul><li>EIP（指令指针）：这是一个特殊的寄存器，它始终指向要执行的下一条指令。与其他寄存器不同，EIP不受指令直接影响。</li><li>EFLAGS（标志寄存器），每个位都是用来反映操作的特定状态，根据计算结果启用这些标志寄存器，并根据这些标志来执行程序的执行分支。</li></ul><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>call-一般用来调用函数，比如我们在c语言中定义的函数，在父函数（上级函数）call某段函数的起始地址就相当于调用了该函数，配合栈使用ebp,esp,汇编ret命令可以实现子函数再重新调用回父函数</p><p>ret-返回上级函数具体则是返回上级函数调用这个命令的下一个命令语句</p><p>具体如图</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221104231216251.png" alt="image-20221104231216251"></p><p>leave</p><p>注：</p><p>•函数状态主要涉及三个寄存器 —— esp，ebp，eip。esp 用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。ebp 用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。eip 用来存储即将执行的程序指令的地址，cpu 依照 eip 的存储内容读取指令并执行，eip 随之指向相邻的下一条指令，如此反复，程序就得以连续执行指令。</p><h6 id="附：函数具体运行情况-加了百分号就是将前值赋给后值了如mov-esp-ebp是将esp值赋给ebp"><a href="#附：函数具体运行情况-加了百分号就是将前值赋给后值了如mov-esp-ebp是将esp值赋给ebp" class="headerlink" title="附：函数具体运行情况(加了百分号就是将前值赋给后值了如mov %esp,%ebp是将esp值赋给ebp)"></a>附：函数具体运行情况(加了百分号就是将前值赋给后值了如mov %esp,%ebp是将esp值赋给ebp)</h6><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105154603364.png" alt="image-20221105154603364"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155713546.png" alt="image-20221105155713546"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155621473.png" alt="image-20221105155621473"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155806106.png" alt="image-20221105155806106"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155139034.png" alt="image-20221105155139034"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155201150.png" alt="image-20221105155201150"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155219421.png" alt="image-20221105155219421"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155232747.png" alt="image-20221105155232747"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155244346.png" alt="image-20221105155244346"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155304600.png" alt="image-20221105155304600"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155322112.png" alt="image-20221105155322112"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155512974.png" alt="image-20221105155512974"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155524091.png" alt="image-20221105155524091"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105155551842.png" alt="image-20221105155551842"></p><h5 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h5><p>HeloWorld.exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:00401005 public start</span><br><span class="line">.text:00401005 start proc near</span><br><span class="line">.text:00401005 jmp     sub_401010</span><br><span class="line">.text:00401005 start endp</span><br></pre></td></tr></table></figure><p>public start-用于声明一个函数，其是公用的（可被其他函数调用），其他函数也可类似声明。</p><p>start proc near-表示函数开头,此处start表明了是函数入口,对其他的函数来说这个”start”可以换成对应的函数名。</p><p>start endp-表示函数结尾，对其他的函数来说这个”start”可以换成对应的函数名。</p><p>jmp-jmp     sub_401010-运行结果如下</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224221201527.png" alt="image-20221224221201527"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224221142009.png" alt="image-20221224221142009"></p><p>只修改了EIP值相当于指向了第一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:00401010 sub_401010 proc near                    ; CODE XREF: start↑j</span><br><span class="line">.text:00401010 push    0                               ; uType</span><br><span class="line">.text:00401012 push    offset Caption                  ; &quot;D0g3!&quot;</span><br><span class="line">.text:00401017 push    offset Text                     ; &quot;Welcome to Re&quot;</span><br><span class="line">.text:0040101C push    0                               ; hWnd</span><br><span class="line">.text:0040101E call    MessageBoxA</span><br><span class="line">.text:00401023 push    0                               ; uExitCode</span><br><span class="line">.text:00401025 call    ExitProcess</span><br><span class="line">.text:00401025 sub_401010 endp</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224222915631.png" alt="image-20221224222915631"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224222931903.png" alt="image-20221224222931903"></p><p>当前ip指向push 0,ida常以”;”作注释，搜索后发现其应该是</p><p>MessageBox( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)的第一个参数。</p><p>push-push    0结果如下</p><p>执行此命令后</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223515193.png" alt="image-20221224223515193"></p><p>变为了</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223545415.png" alt="image-20221224223545415"></p><p>将0压入了栈内相当于将栈顶提高了一位（4字节 32bit）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223722949.png" alt="image-20221224223722949"></p><p>剩下的push都是类似的变化</p><p>此处应该都是对MessageBox传参</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223829476.png" alt="image-20221224223829476"></p><p>定义了弹窗类型，传递了字符串的指针，也定义了按钮和图标</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224223927998.png" alt="image-20221224223927998"></p><p>这几个push执行后栈内也多了两个字符串的地址和两个数字0</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224224025205.png" alt="image-20221224224025205"></p><p>栈顶也被抬高了4位，EIP也向后移动了15</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0040101E call    MessageBoxA</span><br><span class="line">.text:00401023 push    0                               ; uExitCode</span><br><span class="line">.text:00401025 call    ExitProcess</span><br><span class="line">.text:00401025 sub_401010 endp</span><br></pre></td></tr></table></figure><p>。</p><p>call-此处call函数将</p><p>call函数的下一个指令.text:00401023 push    0   的地址放入了栈中</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224232526961.png" alt="image-20221224232526961"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224232540977.png" alt="image-20221224232540977"></p><p>ESP也因此抬高了一位，EIP指向了所call的函数MessageBoxA的函数头</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224234025573.png" alt="image-20221224234025573"></p><p>dword ptr n 就是ESP + n处栈中存取的数据</p><p>同时也定义了对应参数在栈内的位置</p><p>如dword ptr 4 就是ESP + 4 &#x3D; 0019FF60 + 4 &#x3D; 0019FF64</p><p>正对应了压入栈中的参数0<img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221224234349159.png" alt="image-20221224234349159"></p><p>其他参数获取原理类似。</p><p>offset-__imp_MessageBoxA dd offset user32_MessageBoxA</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225000500211.png" alt="image-20221225000500211"></p><p>offset 指令相当于把对应函数“user32_MessageBoxA”的指针（指向函数的头部）给了这个”__imp_MessageBoxA“让其有了等效的作用</p><p>所以在上文的jmp中直接jmp到了user32_MessageBoxA这个函数中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">user32.dll:772519E0 user32_MessageBoxA:</span><br><span class="line">user32.dll:772519E0 mov     edi, edi</span><br><span class="line">user32.dll:772519E2 push    ebp</span><br><span class="line">user32.dll:772519E3 mov     ebp, esp</span><br><span class="line">user32.dll:772519E5 cmp     dword_77276C94, 0</span><br><span class="line">user32.dll:772519EC jz      short loc_77251A10</span><br><span class="line">user32.dll:772519EE mov     eax, large fs:18h</span><br><span class="line">user32.dll:772519F4 mov     edx, offset unk_772771A4</span><br><span class="line">user32.dll:772519F9 mov     ecx, [eax+24h]</span><br><span class="line">user32.dll:772519FC xor     eax, eax</span><br><span class="line">user32.dll:772519FE lock cmpxchg [edx], ecx</span><br><span class="line">user32.dll:77251A02 test    eax, eax</span><br><span class="line">user32.dll:77251A04 jnz     short loc_77251A10</span><br><span class="line">user32.dll:77251A06 mov     dword_77276D00, 1</span><br></pre></td></tr></table></figure><p>mov edi, edi</p><p>mov是将后项覆盖给前项，但此处自己覆盖自己是不会改变的</p><p>此处这么做的目的在网上搜了一下：</p><p>1.为了实现hot-patching技术，即运行时修改一个函数的行为。</p><p>2.为了提高效率。执行一条MOV指令比执行两条NOP指令花费更少的时间。</p><p>其他的mov指令也是类似的覆盖 </p><p>push ebp </p><p>原来ebp如下图</p><p>将EBP的所存的</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225001444463.png" alt="image-20221225001444463"></p><p>压入了栈中，抬高了一位ESP</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225001732773.png" alt="image-20221225001732773"></p><p>同时EBP中所存的不会因push而被抛弃掉</p><p>mov ebp, esp将esp指向的栈顶位置赋给ebp</p><p>原ebp</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225002625179.png" alt="image-20221225002625179"></p><p>赋值后的ebp</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225002651473.png" alt="image-20221225002651473"></p><p>cmp     dword_77276C94, 0</p><p>将dword_77276c94(0)与0比较</p><table><thead><tr><th>CMP结果</th><th>ZF</th><th>CF</th></tr></thead><tbody><tr><td>目的操作数 &lt; 源操作数</td><td>0</td><td>1</td></tr><tr><td>目的操作数 &gt; 源操作数</td><td>0</td><td>0</td></tr><tr><td>目的操作数 &#x3D; 源操作数</td><td>1</td><td>0</td></tr></tbody></table><p>因为相等 所以ZF&#x3D;1,CF&#x3D;0但初始状态下ZF&#x3D;1,CF&#x3D;0</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225003354313.png" alt="image-20221225003354313"></p><p>所以此处ZF,CF值没有变化</p><p>jz      short loc_77251A10</p><p>根据ZF为1就跳转，ZF为0就不跳转</p><p>此处在执行cmp     dword_77276C94, 0后ZF为1</p><p>其会跳转（将EIP移向）short loc_77251A10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user32.dll:77251A10 loc_77251A10:                           ; CODE XREF: user32.dll:user32_MessageBoxA+C↑j</span><br><span class="line">user32.dll:77251A10                                         ; user32.dll:user32_MessageBoxA+24↑j</span><br><span class="line">user32.dll:77251A10 push    0FFFFFFFFh</span><br><span class="line">user32.dll:77251A12 push    0</span><br><span class="line">user32.dll:77251A14 push    dword ptr [ebp+14h]</span><br><span class="line">user32.dll:77251A17 push    dword ptr [ebp+10h]</span><br><span class="line">user32.dll:77251A1A push    dword ptr [ebp+0Ch]</span><br><span class="line">user32.dll:77251A1D push    dword ptr [ebp+8]</span><br><span class="line">user32.dll:77251A20 call    near ptr user32_MessageBoxTimeoutA</span><br><span class="line">user32.dll:77251A25 pop     ebp</span><br><span class="line">user32.dll:77251A26 retn    10h</span><br></pre></td></tr></table></figure><p>前面的push为一如既往的传参操作</p><p>call也是调用对应的弹窗函数，可见前文有相对应的。</p><p>pop ebp</p><p>将栈顶的弹出给ebp</p><p>原栈顶和ebp：</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225004823350.png" alt="image-20221225004823350"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225004829852.png" alt="image-20221225004829852"></p><p>执行后：</p><p>原栈顶的数据并不会被清除只是将栈顶下移了一位</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005011800.png" alt="image-20221225005011800"></p><p>ebp也变为了原栈顶所对应的数据</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005018288.png" alt="image-20221225005018288"></p><p>retn 10h</p><p>原ESP和EIP及原栈顶</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005136127.png" alt="image-20221225005136127"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005143222.png" alt="image-20221225005143222"></p><p>执行后</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221225005232923.png" alt="image-20221225005232923"></p><p>相当于将原栈顶的数据弹出给了EIP使得ESP+4h</p><p>又让ESP+10h（retn后面所跟的数值）</p><p>所以retn n&#x3D; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop eip</span><br><span class="line">add esp 0xn</span><br></pre></td></tr></table></figure><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>定义数组时 所定义的函数名就相当于地址</p><p>如图</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221107132906320.png" alt="image-20221107132906320"></p><p>定义数组时选择的类型（char int之类）就决定了每个元素对应的长度了</p><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="type">char</span> *pa=&amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %c&quot;</span>,pa,*pa)</span><br></pre></td></tr></table></figure><p>定义时用 类型+*+名字 来表示</p><p>这个名字对应的指针变量就存入了一个地址</p><p>如果要获取这个地址对应所存取的值则需要在输出时对这个名字加*号</p><p>这个操作也叫解引用（获取这个指针变量存入的地址对应的值，相当于按地址寻找值）</p><p>当对指针变量+1时则是根据你之前定义指针时的数据类型加对应的地址长度 如char长度为1，int为4</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221107133434972.png" alt="image-20221107133434972"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221107133505279.png" alt="image-20221107133505279"></p><p>当定义了一个指针指向一个数组名时其实也就是指向了a[0]可通过指针+n后寻找到a[n].</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">char</span>* pa = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x,%x&quot;</span>,*(pa+<span class="number">1</span>), *pa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>间接修改及间接引用</p><p>*pa&#x3D;一个值就是对pa指向的值进行间接修改</p><p>解引用就是取出对应地址所对的值</p><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>&amp;，|,^,~,&lt;&lt;,&gt;&gt;,&gt;&gt;&gt;</p><p>“&amp;”-按位与,都为1时结果是1否则为0</p><p>“|”-按位或,有一个为1则为1只有都为0才为0</p><p>“^”-异或,相同为0,相异为1</p><p>“~”-按位取反,0变1,1变0</p><p>“&lt;&lt;”-左移,有符号，会在高位补上符号位,二进制中将低位移向高位</p><p>“&gt;&gt;”-右移,有符号，会在高位补上符号位,二进制中将高位移向低位</p><p>“&gt;&gt;&gt;”-右移运算符，无符号，左边补0 </p><h4 id="calloc-malloc"><a href="#calloc-malloc" class="headerlink" title="calloc,malloc"></a>calloc,malloc</h4><p>都可用于申请内存一般是用指针来指向所开辟的内存的前项下面举的是calloc的例子 malloc不用说明个数因为callo是分配的连续的内存（类似数组）malloc不一定连续（常出现于链表申请）</p><p>数组连续的情况有利于缓存调用（提升程序效率，但降低可修改性，当插入中间值的时候需要修改后面一整个）</p><p>链表不连续的情况有利于中间值修改但地址一般大于缓存调用范围（会降低效率但提高可修改性，可修改中间值不用修改后值）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=(<span class="type">int</span> *)<span class="built_in">calloc</span>(开辟个数n,每个的长度（以字节来算）（通常用<span class="keyword">sizeof</span>（）函数）)；</span><br><span class="line"><span class="type">int</span> *p=（<span class="type">int</span> *）<span class="built_in">malloc</span>(长度（使用<span class="keyword">sizeof</span>）)</span><br></pre></td></tr></table></figure><p>HIDWORD,LOWORD取整形的高16位和取整形的低16位</p><h3 id="Re工具使用"><a href="#Re工具使用" class="headerlink" title="Re工具使用"></a>Re工具使用</h3><h4 id="ida（静态分析）"><a href="#ida（静态分析）" class="headerlink" title="ida（静态分析）"></a>ida（静态分析）</h4><p>快捷键</p><p>shift+f12 -查看字符串,下侧栏目可以用于搜索</p><p>F5（重要）-将汇编代码反编译为类似c语言的伪代码，一般能看懂</p><p>alt+b（重要）-寻找字符串 可以进行模糊搜索，但可能字符串被截断搜索不到</p><p>alt+t -同样也可寻找字符串</p><p>F7-单步步入<br>F8-单步步过</p><p>x-寻找交叉引用，可用于寻找上级函数</p><p>Options——Setup Data Types便可选定D时设置的数据类型；<br>A：可以将图形字符由十六进制数转化成图形，如果一个字节不行，可多选一些字节；<br>C：将数据转换成代码；<br>G：跳转至相应的地址处；<br>Ctrl+F：寻找相应名称的内容；<br>Shift+F9:打开结构体类型窗口；<br>在结构体类型窗口中，<br>Insert（Fn+PgDn得到）:创建新的结构体类型；<br>Delete:删除某一个结构体类型；<br>在结构体end处，按‘D’便可插入成员变量；<br>Alt+Q将某个变量转成一个结构体类型，如果代码区有符号变红，说明该地址处原先的也是一个结构体，但后来被其它的定义给覆盖，按两下‘K’即可打散数据；<br>K:打散数据;<br>T:将某一符号转成结构体成员变量；</p><p>n-修改名字</p><p>对于一个函数起始处，D、C、右键——CreateFunction即可还原。</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221104233318179.png" alt="image-20221104233318179"></p><p>一般有粉红色的都为函数，并非主程序，可以双击键入,使用f5反汇编进入伪代码界面</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221104233558122.png" alt="image-20221104233558122"></p><p>但一般可能找不到密码所在的位置（可能不叫main函数）可以打开程序观察其输出情况，再用相对应的输出结果搜索相应字符如下图</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105000017723.png" alt="image-20221105000017723"></p><p>但一般它可能也不会叫flag，总之根据输出结果寻找对应的函数是大体的解法</p><p>下面是找到的对应主程序</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105000340141.png" alt="image-20221105000340141"></p><p>可以看到是个将字符串替换的加密 可以双击键入对应数据的初始形态（因为是静态分析，并未实际运行程序使数据加密）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105000610878.png" alt="image-20221105000610878"></p><p>可以将对应函数以及字符串复制下来写入以下代码 得到最终的flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">30</span>] = &#123; <span class="string">&quot;flag&#123;hacking_for_fun&#125;&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">29</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">105</span> ||a[i] == <span class="number">114</span>)</span><br><span class="line">a[i] = <span class="number">49</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221105000746211.png" alt="image-20221105000746211"></p><p>这是最后的输出结果</p><p>得到了最终的flag</p><p>练题网站<a href="https://buuoj.cn/challenges">BUUCTF在线评测 (buuoj.cn)</a></p><p>补充：ida一般使用时会有缓存文件，相当于做修改只对这些缓存文件进行修改，而不对原文件进行修改，我现在用不到，但一般大型工程需要很久时间，则需要这些保存自己对它做出的修改了</p><h4 id="程序脱壳"><a href="#程序脱壳" class="headerlink" title="程序脱壳"></a>程序脱壳</h4><p>当用ida静态分析文件时发现函数数特别少一般即为加壳了，可用upx对程序进行脱壳 在powershell中用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> E:\EDGE下载\upx<span class="literal">-3</span>.<span class="number">96</span><span class="literal">-win64</span></span><br><span class="line">upx.exe <span class="literal">-d</span> （文件地址和文件名,）//注意文件名中如果带空格可能会被识别成参数或命令 无法正确寻址</span><br></pre></td></tr></table></figure><h5 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h5><table><thead><tr><th>快捷键</th><th>功能</th><th>注释</th></tr></thead><tbody><tr><td>C</td><td>转换为代码</td><td>一般在IDA无法识别代码时使用这两个功能整理代码</td></tr><tr><td>D</td><td>转换为数据</td><td></td></tr><tr><td>A</td><td>转换为字符</td><td></td></tr><tr><td>N</td><td>为标签重命名</td><td>方便记忆，避免重复分析。</td></tr><tr><td>；</td><td>添加注释</td><td></td></tr><tr><td>R</td><td>把立即值转换为字符</td><td>便于分析立即值</td></tr><tr><td>H</td><td>把立即值转换为10进制</td><td></td></tr><tr><td>Q</td><td>把立即值转换为16进制</td><td></td></tr><tr><td>B</td><td>把立即值转换为2进制</td><td></td></tr><tr><td>G</td><td>跳转到指定地址</td><td></td></tr><tr><td>X</td><td>交叉参考</td><td>便于查找API或变量的引用</td></tr><tr><td>SHIFT+&#x2F;</td><td>计算器</td><td></td></tr><tr><td>ALT+ENTER</td><td>新建窗口并跳转到选中地址</td><td>这四个功能都是方便在不同函数之间分析（尤其是多层次的调用）。具体使用看个人喜好</td></tr><tr><td>ALT+F3</td><td>关闭当前分析窗口</td><td></td></tr><tr><td>ESC</td><td>返回前一个保存位置</td><td></td></tr><tr><td>CTRL+ENTER</td><td>返回后一个保存位置</td><td></td></tr></tbody></table><p>有些未含有特征码（特征码被修改），则需要是用dump,直接将实际运行的程序（二进制）记录下来，就起到了脱壳的作用</p><p>因为壳会掩盖其实际代码，通过debbugger实际运行会暴露其代码通过以下脚本（偷的）可以获取真实的代码文件（也算是脱壳）</p><p>下面为脚本（idc类似于c++）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_LOAD              1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DYNAMIC           2</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">         <span class="keyword">auto</span> ImageBase,StartImg,EndImg;</span><br><span class="line">         <span class="keyword">auto</span> e_phoff;</span><br><span class="line">         <span class="keyword">auto</span> e_phnum,p_offset;</span><br><span class="line">         <span class="keyword">auto</span> i,dumpfile;</span><br><span class="line">         ImageBase=<span class="number">0x400000</span>;</span><br><span class="line">         StartImg=<span class="number">0x400000</span>;</span><br><span class="line">         EndImg=<span class="number">0x0</span>;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">Dword</span>(ImageBase)==<span class="number">0x7f454c46</span> || <span class="built_in">Dword</span>(ImageBase)==<span class="number">0x464c457f</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(dumpfile=<span class="built_in">fopen</span>(<span class="string">&quot;D:\\dumpfile&quot;</span>,<span class="string">&quot;wb&quot;</span>))<span class="comment">//这路可以更改路径</span></span><br><span class="line">    &#123;</span><br><span class="line">      e_phoff=ImageBase+<span class="built_in">Qword</span>(ImageBase+<span class="number">0x20</span>);</span><br><span class="line">      <span class="built_in">Message</span>(<span class="string">&quot;e_phoff = 0x%x\n&quot;</span>, e_phoff);</span><br><span class="line">      e_phnum=<span class="built_in">Word</span>(ImageBase+<span class="number">0x38</span>);</span><br><span class="line">      <span class="built_in">Message</span>(<span class="string">&quot;e_phnum = 0x%x\n&quot;</span>, e_phnum);</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;e_phnum;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">Dword</span>(e_phoff)==PT_LOAD || <span class="built_in">Dword</span>(e_phoff)==PT_DYNAMIC)</span><br><span class="line">                         &#123; </span><br><span class="line">                                 p_offset=<span class="built_in">Qword</span>(e_phoff+<span class="number">0x8</span>);</span><br><span class="line">                                 StartImg=<span class="built_in">Qword</span>(e_phoff+<span class="number">0x10</span>);</span><br><span class="line">                                 EndImg=StartImg+<span class="built_in">Qword</span>(e_phoff+<span class="number">0x28</span>);</span><br><span class="line">                                 <span class="built_in">Message</span>(<span class="string">&quot;start = 0x%x, end = 0x%x, offset = 0x%x\n&quot;</span>, StartImg, EndImg, p_offset);</span><br><span class="line">                                 <span class="built_in">dump</span>(dumpfile,StartImg,EndImg,p_offset);</span><br><span class="line">                                 <span class="built_in">Message</span>(<span class="string">&quot;dump segment %d ok.\n&quot;</span>,i);</span><br><span class="line">                         &#125;    </span><br><span class="line">         e_phoff=e_phoff+<span class="number">0x38</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">fseek</span>(dumpfile,<span class="number">0x3c</span>,<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">fseek</span>(dumpfile,<span class="number">0x28</span>,<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">fclose</span>(dumpfile);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">Message</span>(<span class="string">&quot;dump err.&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">dump</span><span class="params">(dumpfile,startimg,endimg,offset)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> i;</span><br><span class="line">        <span class="keyword">auto</span> size;</span><br><span class="line">        size=endimg-startimg;</span><br><span class="line">        <span class="built_in">fseek</span>(dumpfile,offset,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; size; i=i+<span class="number">1</span> ) </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">fputc</span>(<span class="built_in">Byte</span>(startimg+i),dumpfile);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但使用此脚本时首先得找到OEP（程序入口点，真正实现程序功能的入口）</p><h6 id="OEP"><a href="#OEP" class="headerlink" title="OEP"></a>OEP</h6><p>加壳后会隐藏真正的程序入口点，相当于通过不断地跳转，反复无意义的加减等等（又称作花指令），通过不断地跳转才可以寻找到真正的入口如图下方就是大量的花指令</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221212202340428.png" alt="image-20221212202340428"></p><p>程序真正运行时往往会进行压栈操作（将函数等数据压入栈中方便执行），而运行结束时会进行出栈操作,可以通过这种特点找到对应的OEP</p><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><p>nop操作</p><p>将原花指令（无用的指令）替换为0x90</p><p>比如被数据而不是指令所阻碍可以用nop将其连接起来，但是nop并不会修改实际指令所修改的值，所以当某寄存器做出了修改，nop并不能直接替换否则寄存器中的值会与正常运行的值不同，可能会使程序无法正常运行或崩溃,并且nop太多不便于实际分析,所以常用来替代数据.</p><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><h4 id="1-异或加密"><a href="#1-异或加密" class="headerlink" title="1.异或加密"></a>1.异或加密</h4><p>^ 异或符号，当两个变量A,B异或时其可以看作相对应的bit位分别比较然后进行修改（相同为0，相异为1）如 10010^01110&#x3D;11100但如果其再次对01110取异或则11100^01110&#x3D;10010则又变为异或前的值</p><p>异或加密可通过如此解密</p><p>题目：geek大挑战-(re)-level1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*v1 = -85;</span></span><br><span class="line"><span class="comment">  v2 = 0;</span></span><br><span class="line"><span class="comment">  int i,j;</span></span><br><span class="line"><span class="comment">  for ( i = 0; i &lt;= 39; ++i )</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    for ( j = 0; j &lt;= 50; ++j )</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      v1 ^= j ^ v2 ^ 0x5F;</span></span><br><span class="line"><span class="comment">      s[i] ^= s[(i + 1) % 40];</span></span><br><span class="line"><span class="comment">      s[i] ^= v1;</span></span><br><span class="line"><span class="comment">      ++v2;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;*/</span>可通过上文原理解密对应被加密的flag</span><br><span class="line">  <span class="comment">/*for ( k = 0; k &lt;= 39; ++k )</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    if ( s[k] != compare_data[k] )</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      puts(&quot;Ohhhh, TRY HARD&quot;);</span></span><br><span class="line"><span class="comment">      return __readfsqword(0x28u) ^ v7;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;*/</span>校验部分可得到对应数据值，但为异或加密后的值需解密</span><br></pre></td></tr></table></figure><p>具体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[] = &#123; <span class="number">161</span>, <span class="number">186</span>, <span class="number">110</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">244</span>, <span class="number">217</span>, <span class="number">170</span>, <span class="number">180</span>, <span class="number">54</span>, <span class="number">90</span>,</span><br><span class="line">   <span class="number">204</span>, <span class="number">140</span>, <span class="number">30</span>, <span class="number">149</span>, <span class="number">33</span>, <span class="number">143</span>, <span class="number">67</span>, <span class="number">225</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">168</span>, <span class="number">106</span>,</span><br><span class="line">   <span class="number">66</span>, <span class="number">174</span>, <span class="number">251</span>, <span class="number">247</span>, <span class="number">165</span>, <span class="number">157</span>, <span class="number">11</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">186</span>, <span class="number">0</span>, <span class="number">135</span>,</span><br><span class="line">   <span class="number">35</span>, <span class="number">144</span>, <span class="number">70</span>, <span class="number">211</span>, <span class="number">223</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">//需补充&#x27;\0&#x27;作为字符串结尾（后续解密不需修改）</span></span><br><span class="line">    <span class="type">char</span> v1 = <span class="number">-85</span>;</span><br><span class="line">    <span class="type">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">    v1 = <span class="number">-85</span>;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">   <span class="comment">/* for (i = 0; i &lt;= 39; ++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for (j = 0; j &lt;= 50; ++j)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            v1 ^= j ^ v2 ^ 0x5F;</span></span><br><span class="line"><span class="comment">            ++v2;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span>加密时是从前往后加密，则解密需要从后往前解密，需要求出最后的v1对应的值才能做解密运算</span><br><span class="line">    <span class="comment">/*for (i = 39; i &gt;= 0; --i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for (j = 50; j &gt;= 0; --j)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            --v2;</span></span><br><span class="line"><span class="comment">            s[i] ^= v1;</span></span><br><span class="line"><span class="comment">            s[i] ^= s[(i + 1) % 40];</span></span><br><span class="line"><span class="comment">            v1 ^= j ^ v2 ^ 0x5F;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span>将后面的加密顺序调转（包括指令如加密中最后的++v2变为最上方的--v2，异或运算不用变化，只需跟随加密顺序再将顺序逆转就可进行解密运算了</span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">//以字符串输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以此就可以得到flag了</p><h4 id="base16"><a href="#base16" class="headerlink" title="base16"></a>base16</h4><p>base加密算法按分割长度及字典长度不同分为base16，base64等等</p><p>base后面的数字指的是它按多少bit划分为一块数据（如base16是以4bit为一块数据，这块数据可以对应2^4个字符类似ascii码，如下图）</p><table><thead><tr><th align="center">数据</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">字符</td><td align="center">‘0’</td><td align="center">‘1’</td><td align="center">‘2’</td><td align="center">‘3’</td></tr><tr><td align="center">数据</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td></tr><tr><td align="center">字符</td><td align="center">‘4’</td><td align="center">‘5’</td><td align="center">‘6’</td><td align="center">‘7’</td></tr><tr><td align="center">数据</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td></tr><tr><td align="center">字符</td><td align="center">‘8’</td><td align="center">‘9’</td><td align="center">‘A’</td><td align="center">‘B’</td></tr><tr><td align="center">数据</td><td align="center">12</td><td align="center">13</td><td align="center">14</td><td align="center">15</td></tr><tr><td align="center">字符</td><td align="center">‘C’</td><td align="center">‘D’</td><td align="center">‘E’</td><td align="center">‘F’</td></tr></tbody></table><p>base16可以通过将一个字符数据（8bit）拆分为两部分每个数据对应了上图的（字典）</p><p>因为char型只有8bit将字符数据拆分可以通过左移’&lt;&lt;’右移’&gt;&gt;’来实现因为要分别计算，可以通过两个函数来实现拆分</p><h5 id="注意1：移位算法计算时，是在所有移位操作完成后才会进行补0操作，如a-lt-lt-4-gt-gt-4其值仍然是a，可以通过中间用’b-x3D-a-lt-lt-4；再进行b-gt-gt-4’"><a href="#注意1：移位算法计算时，是在所有移位操作完成后才会进行补0操作，如a-lt-lt-4-gt-gt-4其值仍然是a，可以通过中间用’b-x3D-a-lt-lt-4；再进行b-gt-gt-4’" class="headerlink" title="注意1：移位算法计算时，是在所有移位操作完成后才会进行补0操作，如a&lt;&lt;4&gt;&gt;4其值仍然是a，可以通过中间用’b&#x3D;a&lt;&lt;4；再进行b&gt;&gt;4’"></a>注意1：移位算法计算时，是在所有移位操作完成后才会进行补0操作，如a&lt;&lt;4&gt;&gt;4其值仍然是a，可以通过中间用’b&#x3D;a&lt;&lt;4；再进行b&gt;&gt;4’</h5><h5 id="就可以实现b-x3D-a的低四位"><a href="#就可以实现b-x3D-a的低四位" class="headerlink" title="就可以实现b&#x3D;a的低四位"></a>就可以实现b&#x3D;a的低四位</h5><h5 id="注意2：移位优先级比加减法要低所以移位时注意加括号"><a href="#注意2：移位优先级比加减法要低所以移位时注意加括号" class="headerlink" title="注意2：移位优先级比加减法要低所以移位时注意加括号"></a>注意2：移位优先级比加减法要低所以移位时注意加括号</h5><h5 id="注意3：vs新标准不支持gets，此处fgets效果类似但会将回车（’-n’读入数组内）然后在回车后补空（也是字符串的结束符’-0’）具体指令形式为fgets-字符串数组-字符个数-缓冲区（如stdin）"><a href="#注意3：vs新标准不支持gets，此处fgets效果类似但会将回车（’-n’读入数组内）然后在回车后补空（也是字符串的结束符’-0’）具体指令形式为fgets-字符串数组-字符个数-缓冲区（如stdin）" class="headerlink" title="注意3：vs新标准不支持gets，此处fgets效果类似但会将回车（’\n’读入数组内）然后在回车后补空（也是字符串的结束符’\0’）具体指令形式为fgets(字符串数组,字符个数,缓冲区（如stdin）)"></a>注意3：vs新标准不支持gets，此处fgets效果类似但会将回车（’\n’读入数组内）然后在回车后补空（也是字符串的结束符’\0’）具体指令形式为fgets(字符串数组,字符个数,缓冲区（如stdin）)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">base16l</span><span class="params">(<span class="type">char</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> b=a&gt;&gt;<span class="number">4</span>;<span class="comment">/*都使用unsigned char原因是部分编译器默认为signed char 若最高位为1则会被识别成负数,以字符型式是无法显示的，具体结果如下*/</span></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">r</span><span class="params">( <span class="type">char</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;<span class="comment">/*都使用unsigned char原因是部分编译器默认为signed char 若最高位为1则会被识别成负数,以字符型式是无法显示的，具体结果如下*/</span></span><br><span class="line">    a=b&lt;&lt;<span class="number">4</span>;<span class="comment">/*左移四位先将高4位全部变为0，再将b进行右移4位，可以返回a的低4位（中间用了a来代替输入值b计算的原因是输入值一般为signed char 移位后可能会出现复数，得先转化为unsigned char*/</span></span><br><span class="line">    <span class="keyword">return</span> b &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> <span class="title function_">r</span><span class="params">(<span class="type">char</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line">b = m&lt;&lt;<span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> b &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = r(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c&quot;</span>,<span class="string">&#x27;h&#x27;</span>, r(<span class="string">&#x27;h&#x27;</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221110143901747.png" alt="image-20221110143901747"></p><p> 解密环节也可以通过移位操作实现，将高四位和低四位重新拼接起来，如（h&lt;&lt;4+l,以h代指高四位，以l代指低四位）算法如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> table[] = &#123; <span class="string">&quot;0123456789ABCDEF&quot;</span> &#125;;<span class="comment">//定义相对应的字典</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">check</span><span class="params">( <span class="type">char</span> a, <span class="type">char</span>* b)</span><span class="comment">//检测密文对应的4bit数据并返回该4bit数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">15</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == *(b + c))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> jiami[<span class="number">100</span>], jiemi[<span class="number">50</span>], e;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入待解密的字符:&quot;</span>);</span><br><span class="line">        fgets(jiami,<span class="number">100</span>,<span class="built_in">stdin</span>);<span class="comment">//vs新标准不支持gets，此处fgets效果类似但会将回车（&#x27;\n&#x27;读入数组内）然后在回车后补空（也是字符串的结束符&#x27;\0&#x27;）具体指令形式为fgets(字符串数组,字符个数,缓冲区)</span></span><br><span class="line">        <span class="keyword">for</span> (a = <span class="number">0</span>; <span class="number">1</span>; a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (jiami[a] == <span class="string">&#x27;\n&#x27;</span>)<span class="comment">//将回车改为&#x27;\0&#x27;</span></span><br><span class="line">            &#123;</span><br><span class="line">                jiami[a] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>, c = <span class="number">0</span>; b &lt; a; b += <span class="number">2</span>, c++)</span><br><span class="line">        &#123;</span><br><span class="line">            e = check(jiami[b], table) &lt;&lt; <span class="number">4</span>;<span class="comment">/*此处定义一个e的原因是因为移位优先级比加法低*/</span></span><br><span class="line">            jiemi[c] =(e + check(jiami[b + <span class="number">1</span>], table));<span class="comment">//也可将此处的e改为&#x27;(check(jiami[b], table))&#x27;注意有括号      </span></span><br><span class="line">        &#125;</span><br><span class="line">        jiemi[(a) / <span class="number">2</span> <span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将加密与解密拼合起来具体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> table[] = &#123; <span class="string">&quot;0123456789ABCDEF&quot;</span> &#125;;<span class="comment">//字典</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">r</span><span class="params">( <span class="type">char</span> m)</span><span class="comment">//一个字符将被加密为两个字符可分为左右</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">    a=m&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> a &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">l</span><span class="params">(<span class="type">char</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">    a = n;</span><br><span class="line">    <span class="keyword">return</span> (a&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">check</span><span class="params">( <span class="type">char</span> a, <span class="type">char</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c;<span class="comment">//将char转为无符号的</span></span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">15</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == *(b + c))<span class="comment">//检索字典寻找其四位对应值</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag, a, b, c, f;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;选择模式加密0/解密1:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;flag);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="type">char</span> yuan[<span class="number">100</span>], jia[<span class="number">200</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入待加密的字符:&quot;</span>);</span><br><span class="line">            fgets(yuan,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">for</span> (a = <span class="number">0</span>; <span class="number">1</span>; a++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (yuan[a] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (b = <span class="number">0</span>, f = <span class="number">0</span>; b &lt; (<span class="number">2</span> * a); b += <span class="number">2</span>, f++)</span><br><span class="line">            &#123;</span><br><span class="line">                jia[b] = table[l(yuan[f])];</span><br><span class="line">                jia[b + <span class="number">1</span>] = table[r(yuan[f])];</span><br><span class="line">            &#125;</span><br><span class="line">            jia[<span class="number">2</span> * a] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="built_in">puts</span>(jia);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> jiami[<span class="number">100</span>], jiemi[<span class="number">50</span>], e;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入待解密的字符:&quot;</span>);</span><br><span class="line">        fgets(jiami,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">for</span> (a = <span class="number">0</span>; <span class="number">1</span>; a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (jiami[a] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                jiami[a] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>, c = <span class="number">0</span>; b &lt; a; b += <span class="number">2</span>, c++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            jiemi[c] = ((check(jiami[b], table) &lt;&lt; <span class="number">4</span>) + check(jiami[b + <span class="number">1</span>], table));</span><br><span class="line">        &#125;</span><br><span class="line">        jiemi[(a) / <span class="number">2</span> <span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(jiemi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以自定义字典实现私人的加密解密，但base16只支持16个字符，且加密会将数据量增大一倍</p><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>base64原理类似但是其为6bit为一个字符，只有3字符才能完整分为4个字符，所以通过补0来实现解密前与解密后的一一对应</p><p>具体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> zidian[]=&#123;<span class="string">&quot;ABCDEFGHIJKMLNOPQRSTUVWXYZabcdefghijkmlnopqrstuvwxyz0123456789+/&quot;</span>&#125;;<span class="comment">//字典</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">base64</span><span class="params">(<span class="type">char</span> *jiami,<span class="type">int</span> n,<span class="type">char</span> *jiemi)</span><span class="comment">//加密操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a;<span class="comment">//vsc中char有符号</span></span><br><span class="line"><span class="type">int</span> b,c;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>)<span class="comment">//每三个字符生成四个字符的密文，此处判断是否满足能被三整除以判断是否需要补位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>,c=<span class="number">0</span>;b&lt;(n-(n%<span class="number">3</span>));c+=<span class="number">4</span>,b+=<span class="number">3</span>)<span class="comment">//这几处位运算分开是因为位运算特性:运算结束后补0</span></span><br><span class="line">&#123;</span><br><span class="line">    a=jiami[b]&gt;&gt;<span class="number">2</span>;<span class="comment">//取char型的高6位</span></span><br><span class="line">    jiemi[c]=zidian[a];</span><br><span class="line">    a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];<span class="comment">//取前一个char的低2位和后一个的高4位</span></span><br><span class="line">    a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    jiemi[c+<span class="number">2</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)];<span class="comment">//取前一个char的低4位和后一个的高二位</span></span><br><span class="line">    a=jiami[b+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c+<span class="number">3</span>]=zidian[a&gt;&gt;<span class="number">2</span>];<span class="comment">//取最后一个的低6位 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>,c=<span class="number">0</span>;b&lt;(n-(n%<span class="number">3</span>));c+=<span class="number">4</span>,b+=<span class="number">3</span>)<span class="comment">//这几处位运算分开是因为位运算特性:运算结束后补0</span></span><br><span class="line">&#123;</span><br><span class="line">    a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c]=zidian[a];</span><br><span class="line">    a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    jiemi[c+<span class="number">2</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c+<span class="number">3</span>]=zidian[a&gt;&gt;<span class="number">2</span>]; </span><br><span class="line">&#125;<span class="comment">//因为余一，所以取最后的字符的高六位，作为一个字符，剩下的二位与四个0组成下个字符，剩下的两个密文字符全由0补齐</span></span><br><span class="line">a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">jiemi[c]=zidian[a];</span><br><span class="line">a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">jiemi[c+<span class="number">1</span>]=zidian[a&gt;&gt;<span class="number">2</span>];</span><br><span class="line">jiemi[c+<span class="number">2</span>]=zidian[<span class="number">0</span>];</span><br><span class="line">jiemi[c+<span class="number">3</span>]=zidian[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>,c=<span class="number">0</span>;b&lt;(n-(n%<span class="number">3</span>));c+=<span class="number">4</span>,b+=<span class="number">3</span>)<span class="comment">//这几处位运算分开是因为位运算特性:运算结束后补0</span></span><br><span class="line">&#123;</span><br><span class="line">    a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c]=zidian[a];</span><br><span class="line">    a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    jiemi[c+<span class="number">2</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)];</span><br><span class="line">    a=jiami[b+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    jiemi[c+<span class="number">3</span>]=zidian[a&gt;&gt;<span class="number">2</span>]; </span><br><span class="line">&#125;<span class="comment">//因为余二，所以取最后的字符的高六位，作为一个字符，剩下的二位与下个字符的高四位组成下个字符，剩下的两位与四位0补齐，最后的剩下的一个密文字符全由0补齐</span></span><br><span class="line">a=jiami[b]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">jiemi[c]=zidian[a];</span><br><span class="line">a=jiami[b]&lt;&lt;<span class="number">6</span>;</span><br><span class="line">jiemi[c+<span class="number">1</span>]=zidian[(a&gt;&gt;<span class="number">2</span>)+(jiami[b+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)];</span><br><span class="line">a=jiami[b+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>;</span><br><span class="line">jiemi[c+<span class="number">2</span>]=zidian[a&gt;&gt;<span class="number">2</span>];</span><br><span class="line">jiemi[c+<span class="number">3</span>]=zidian[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">a=((n-n%<span class="number">3</span>)/<span class="number">3</span>)+<span class="number">1</span>;</span><br><span class="line">jiemi[<span class="number">4</span>*a]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">found</span><span class="params">(<span class="type">char</span> jiami)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;<span class="comment">//char具有符号会出现复数等离奇情况 unsigned char无符号则无此情况</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">64</span>;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(jiami==zidian[a])<span class="comment">//与字典对应寻找密文对应的6位二进制数</span></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">base64jiemi</span><span class="params">(<span class="type">char</span> *jiami,<span class="type">int</span> n,<span class="type">char</span> *jiemi)</span><span class="comment">//解密操作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c;<span class="comment">//char具有符号会出现复数等离奇情况 unsigned char无符号则无此情况</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>,b=<span class="number">0</span>;a&lt;n;a+=<span class="number">4</span>,b+=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        jiemi[b]=(found(jiami[a])&lt;&lt;<span class="number">2</span>)+(found(jiami[a+<span class="number">1</span>])&gt;&gt;<span class="number">4</span>);<span class="comment">//8bit数需要6位和2位拼接此处都为拼接操作</span></span><br><span class="line">        c=found(jiami[a+<span class="number">1</span>])&lt;&lt;<span class="number">4</span>;</span><br><span class="line">        jiemi[b+<span class="number">1</span>]=c+(found(jiami[a+<span class="number">2</span>])&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        c=found(jiami[a+<span class="number">2</span>])&lt;&lt;<span class="number">6</span>;</span><br><span class="line">        jiemi[b+<span class="number">2</span>]=c+found(jiami[a+<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,m,flag;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择加密/解密 0/1&quot;</span>);<span class="comment">//加密解密二合一</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;flag);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入加密长度&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//吸掉回车</span></span><br><span class="line"><span class="type">char</span> *jiami=(<span class="type">char</span>*)<span class="built_in">calloc</span>(n,<span class="keyword">sizeof</span>(<span class="type">char</span>));<span class="comment">//申请连续的内存作为数组使用</span></span><br><span class="line">fgets(jiami,n,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;n;m++)</span><br><span class="line"><span class="keyword">if</span>(jiami[m]==<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    jiami[m]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *jiemi=(<span class="type">char</span>*)<span class="built_in">calloc</span>(<span class="number">4</span>*(((n-n%<span class="number">3</span>)/<span class="number">3</span>)+<span class="number">1</span>)<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">base64(jiami,m,jiemi);</span><br><span class="line"><span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入解密长度&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//吸掉回车</span></span><br><span class="line"><span class="type">char</span> *jiami=(<span class="type">char</span>*)<span class="built_in">calloc</span>(n,<span class="keyword">sizeof</span>(<span class="type">char</span>));<span class="comment">//申请连续的内存作为数组使用</span></span><br><span class="line">fgets(jiami,n,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;n;m++)</span><br><span class="line"><span class="keyword">if</span>(jiami[m]==<span class="string">&#x27;\n&#x27;</span>)<span class="comment">//fgets会吸掉回车，可以以回车来作为结束符</span></span><br><span class="line">&#123;</span><br><span class="line">    jiami[m]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *jiemi=(<span class="type">char</span>*)<span class="built_in">calloc</span>(m,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">base64jiemi(jiami,m,jiemi);</span><br><span class="line"><span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="题目（reverse3）-buuctf"><a href="#题目（reverse3）-buuctf" class="headerlink" title="题目（reverse3）-buuctf"></a>题目（reverse3）-buuctf</h5><p>先用shift+f12搜索flag</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221124203131098.png" alt="image-20221124203131098"></p><p>搜索到base64加密字典，猜测是用base64加密完成的</p><p>再在左侧通过搜索名称</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221124203000964.png" alt="image-20221124203000964"></p><p>可以定位到main函数，通过观察输入前的函数</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221124203222336.png" alt="image-20221124203222336"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221124203340270.png" alt="image-20221124203340270"></p><p>由位运算规律可知sub_4110BE是进行base64加密的，再观察下侧for循环可知进行了移位操作，所以加密逻辑是输入-base64-移位等于最后的str2</p><p>对str2进行相反的操作便可</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221124203529195.png" alt="image-20221124203529195"></p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221124203602999.png" alt="image-20221124203602999"></p><p>由此得到了最后的flag</p><h5 id="RE1-PYC"><a href="#RE1-PYC" class="headerlink" title="RE1.PYC"></a>RE1.PYC</h5><p>先启动该文件看下运行结果</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235231628.png" alt="image-20221203235231628"></p><p>不知道是因为什么无法再次运行，通过搜索找到是因为没有原py文件所以无法再次运行，那就通过ida(32位)看看其源代码</p><p>pyc文件主要是无法通过f5反汇编查找代码逻辑</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235426178.png" alt="image-20221203235426178"></p><p>尝试通过shift+f12查询字符串，结果如下</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203234728213.png" alt="image-20221203234728213"></p><p>一般有效的字符串，线索之类的会出现在此，如果不有效也一般会放在内存附近（一般）</p><p>通过双击寻找，往上翻后最终找到了对应的密文（非flag{}此类格式应该是经过了加密）</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235623344.png" alt="image-20221203235623344"></p><p>下方也有说明，表现是通过base64加密的，将其拖入base64中解密</p><p><img src="C:\Users\wrwrw\AppData\Roaming\Typora\typora-user-images\image-20221203235745853.png" alt="image-20221203235745853"></p><p>得到了最后的flag：D0g3{Do_You_Want_To_Hammer_Me},这flag真欠揍(bushi)</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h4 id="base58"><a href="#base58" class="headerlink" title="base58"></a>base58</h4><p>顾名思义，其字典长度为58个字符，但58无法用位运算得出，效率较低，需通过将字符串按顺序排列，左边的为高位，右边为低位，将其ascii码以十进制一一排列（同样从高到低）用其十进制数连续对58取余再将余数逆序输出就是对应的58进制数（与58字符的字典对应）但此时数字是十分大的，进行大数字运算可能失去精度，可将其转化为文本顺序读取（待做）</p><p>加密解密网站：<a href="http://www.atoolbox.net/Tool.php?Id=932">Base58编码&#x2F;解码 - 一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></p><p>字典为”123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ”</p><p>半成品（如果超过输入7个字符，数据过大，损失精度，无法正常输出）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> zidian[] = <span class="string">&quot;123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> e=<span class="number">98</span>;</span><br><span class="line"><span class="comment">//下面为加密所用函数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">cifang</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n)</span><span class="comment">//计算a的n次方方便进行每次都取到两位来与字典一一对应</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)a * cifang(a, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">zhuanhua10</span><span class="params">(<span class="type">char</span>* a, <span class="type">int</span> n)</span><span class="comment">//转化为十进制数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>) * a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)((*(a + n - <span class="number">1</span>)) + (zhuanhua10(a, n - <span class="number">1</span>) * <span class="number">256</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">zhuanhua58</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n, <span class="type">int</span>* p, <span class="type">int</span>* flag)</span><span class="comment">//转化为58进制数同时每两位表示一个58进制方便对字典进行比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*flag == <span class="number">0</span>)<span class="comment">//*p用来计算所存在的字符串长度方便从高位到低位输出，同时方便创造存放加密后密文的数组</span></span><br><span class="line">&#123;</span><br><span class="line">*p = *p + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">58</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*p = *p - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> n % <span class="number">58</span> + zhuanhua58((<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)(n - n % <span class="number">58</span>) / <span class="number">58</span>, p, flag) * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">base58</span><span class="params">(<span class="type">char</span>* jiami, <span class="type">int</span> n, <span class="type">int</span>* p, <span class="type">char</span>* jiemi, <span class="type">int</span>* flag)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> c;</span><br><span class="line">c = zhuanhua58(zhuanhua10(jiami, n), p, flag);</span><br><span class="line"><span class="keyword">for</span> (a = *p, b = <span class="number">0</span>; a &gt; <span class="number">0</span>; a--, b++)</span><br><span class="line">&#123;</span><br><span class="line">jiemi[b] = zidian[(c / cifang(<span class="number">100</span>, a)) - (c / cifang(<span class="number">100</span>, a + <span class="number">1</span>)) * <span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">jiemi[b + <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面为解密所用函数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">jiaoyan</span><span class="params">(<span class="type">char</span> a)</span><span class="comment">//与字典进行比较找到对应的58进制值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">0</span>;<span class="number">1</span>;b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a==zidian[b])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">huifu10</span><span class="params">(<span class="type">char</span> *jiami,<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span><span class="comment">//将58进制值转化为10进制值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jiaoyan(jiami[n])+huifu10(jiami,n<span class="number">-1</span>)*<span class="number">58</span>;<span class="comment">//从n开始是因为输入的数组第0位为高位，后位为低位，从最低位开始方便进行进制转化,且因为58进制数每位都要占两位所以乘了100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> <span class="title function_">huifu256</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n%<span class="number">256</span>+huifu256((n-n%<span class="number">256</span>)/<span class="number">256</span>)*<span class="number">1000</span>;<span class="comment">//将10进制数转化为256进制（与ascii码对应）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">base58jiemi</span><span class="params">(<span class="type">char</span> *jiemi,<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">1000</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e++;<span class="comment">//因为要输入所以前移一位但此时以经没有输入了就让数组指向最高位字符</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">jiemi[e]=n%<span class="number">1000</span>;<span class="comment">//取低三位获取低位值</span></span><br><span class="line">e--;<span class="comment">//将数组前移一位</span></span><br><span class="line">base58jiemi(jiemi,n/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择加密/解密：0/1&quot;</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符数&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="type">char</span>* jiami = (<span class="type">char</span>*)<span class="built_in">calloc</span>(n+<span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">fgets(jiami, n+<span class="number">2</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="type">int</span> jishu = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> fla = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>* flag = &amp;fla;</span><br><span class="line"><span class="type">int</span>* pjishu = &amp;jishu;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; <span class="number">1</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (jiami[n] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">jiami[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">zhuanhua58(zhuanhua10(jiami, n), pjishu, flag);</span><br><span class="line">*flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span>* jiemi = (<span class="type">char</span>*)<span class="built_in">calloc</span>(*pjishu + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">base58(jiami, n, pjishu, jiemi, flag);</span><br><span class="line"><span class="built_in">puts</span>(jiemi);</span><br><span class="line">&#125;;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入字符数&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="type">char</span>* jiami = (<span class="type">char</span>*)<span class="built_in">calloc</span>(n+<span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">fgets(jiami, n+<span class="number">2</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; <span class="number">1</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (jiami[n] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">jiami[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> jiemi[<span class="number">100</span>]=<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">jiemi[<span class="number">99</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">base58jiemi(jiemi,huifu256(huifu10(jiami,n<span class="number">-1</span>)));</span><br><span class="line"><span class="built_in">puts</span>(jiemi+e);</span><br><span class="line">&#125;;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h4><p>初始的S表是线性的（如y&#x3D;x一样是一条直线，第一个元素为1第二个元素为二依次下去）初始密钥填充T表跟S表长度相同一般都为256(此处改为128是因为char在vs，vsc中为signed char 可见字符范围为128)（充当打乱工具，可由初始密钥再生，本质上是初始密钥重复填充如初始密钥123，则T表就为123123……如此循环）再通过打乱的S表生成真正的密钥（用来异或加密）&#x2F;&#x2F;但同样可能生成不可见字符，打印时会自动隐去,也无法正常输入</p><p>解密原理：</p><p>若KEY相同则打乱的顺序相同，生成的流密码也相同，通过再次对其进行异或就可以解密了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">panduanweishu</span><span class="params">(<span class="type">int</span> a)</span><span class="comment">//判断key数位数，方便填充T表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> b,c;</span><br><span class="line">    <span class="keyword">for</span>(b=<span class="number">1</span>,c=<span class="number">10</span>;<span class="number">1</span>;b++,c*=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a/c==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">anweitianchongKbiao</span><span class="params">(<span class="type">int</span> *T,<span class="type">int</span> b,<span class="type">int</span> weishu)</span><span class="comment">//对T表进行填充</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,c;</span><br><span class="line"><span class="keyword">for</span>(a=weishu<span class="number">-1</span>,c=<span class="number">10</span>;a&gt;=<span class="number">0</span>;a--,c*=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    T[a]=b%c-b%(c/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(a=weishu;a&lt;<span class="number">128</span>;a++)</span><br><span class="line">&#123;</span><br><span class="line">    T[a]=T[a%weishu];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">   a[x]=a[x]^a[y];</span><br><span class="line">   a[y]=a[x]^a[y];</span><br><span class="line">   a[x]=a[x]^a[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> S[<span class="number">128</span>],T[<span class="number">128</span>],a,b,c,d,key;</span><br><span class="line">    <span class="type">char</span> jiami[<span class="number">100</span>],jiemi[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择加密或解密 0/1:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">switch</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入待加密字符&quot;</span>);</span><br><span class="line">    gets(jiami);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入初始KEY&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">128</span>;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[a]=a;<span class="comment">//初始化S表</span></span><br><span class="line">    &#125;</span><br><span class="line">    anweitianchongKbiao(T,key,panduanweishu(key));</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>,b=<span class="number">0</span>;a&lt;<span class="number">128</span>;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+S[a]+T[a])%<span class="number">128</span>;<span class="comment">//通过T表提供顺序进行打乱S表</span></span><br><span class="line">        swap(S,a,b);<span class="comment">//打乱操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取得密钥,同时加密 </span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;a&lt;<span class="built_in">strlen</span>(jiami);a++)<span class="comment">//此处都为取得密码流操作对字符进行异或</span></span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+<span class="number">1</span>)%<span class="number">128</span>;</span><br><span class="line">        c=(c+S[b])%<span class="number">128</span>;</span><br><span class="line">        swap(S,b,c);</span><br><span class="line">        d=(S[b]+S[c])%<span class="number">128</span>;</span><br><span class="line">        key=S[d];</span><br><span class="line">        jiami[a]=jiami[a]^key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(jiami);</span><br><span class="line">    &#125;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;请输入待解密字符&quot;</span>);<span class="comment">//解密过程是通过相同的异或操作恢复原来的数据</span></span><br><span class="line">    gets(jiami);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入初始KEY&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">128</span>;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[a]=a;</span><br><span class="line">    &#125;</span><br><span class="line">    anweitianchongKbiao(T,key,panduanweishu(key));</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>,b=<span class="number">0</span>;a&lt;<span class="number">128</span>;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+S[a]+T[a])%<span class="number">128</span>;<span class="comment">//通过T表提供顺序进行打乱S表</span></span><br><span class="line">        swap(S,a,b);<span class="comment">//打乱操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;a&lt;<span class="built_in">strlen</span>(jiami);a++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=(b+<span class="number">1</span>)%<span class="number">128</span>;</span><br><span class="line">        c=(c+S[b])%<span class="number">128</span>;</span><br><span class="line">        swap(S,b,c);</span><br><span class="line">        d=(S[b]+S[c])%<span class="number">128</span>;</span><br><span class="line">        key=S[d];</span><br><span class="line">        jiami[a]=(<span class="type">unsigned</span> <span class="type">char</span>)jiami[a]^key;<span class="comment">//通过异或相同的数来使其恢复</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(jiami);</span><br><span class="line">    &#125;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h4><p>此处用了&lt;stdint.h&gt;定义了int16_t,int32_t等带符号整形也有uint8_t，uint16_t等不带符号的整形，u为unsigned的意思</p><p>tea加密总体也是用异或加密实现的，且系列算法都通过一个常数作为倍数一般写作0X9E3779B9，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">teajiami</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> <span class="comment">//此处uint32长度就为usigned int占32bit共4个字节</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0</span>;  <span class="comment">// 注意sum也是32位无符号整型</span></span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="comment">//进行32轮迭代，次数越多越难破解，但同时效率也会降低</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>]=v0; </span><br><span class="line">    v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">teajiemi</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> <span class="comment">//解密也是进行相同的异或操作，通过异或同一个数恢复原数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = delta * <span class="number">32</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>]=v0; </span><br><span class="line">    v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 两个32位无符号整数，即待加密的64bit明文数据</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x12345678</span>, <span class="number">0x78563412</span>&#125;;</span><br><span class="line">    <span class="comment">// 四个32位无符号整数，即128bit的key</span></span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>]= &#123;<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    teajiami(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    teajiemi(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h4><p>待做（），跟tea加密类似，都有相同的（&amp;,^,&lt;&lt;,&gt;&gt;）位运算，只不过每次的key是有变化的，但通过观察伪代码应该可以实现辨认</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h4><p>待做（)，跟tea加密类似，加密轮数由待加密字符数决定</p><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>md5主要用于校验文件（不同的文件生成的md5码不同，通过检测传输前后的md5码可以检测其是否被篡改）</p><p>MD5可以将信息以512位来处理信息</p><p>主要是让信息长度比512的整数倍少64位（记录数据长度），若不足则进行填充（由一个一和对应的后续一段0表示）</p><p>再将对应的信息分块，每块有512位，再将每块再分为16个32位</p><p>用四组幻数进行循环计算（可用于检验是否位为MD5算法）</p><p>另外检验MD5算法一般可以看见较长的函数运算语句</p><h4 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h4><p>和数学上的线性方程类似</p><p>可通过a,b(这俩个都为密钥),n(字符个数)</p><p>c(密文)&#x3D;(a*m(待加密字符)+b)(mod n)</p><p>此处n的个数就是字典的长度（字典可自定义）</p><p>因为要解密所以a与b需互质，这样才能让字符与密文一一对应</p><p>则解密算法为</p><p>d(解密)&#x3D;(a-gcd(a,n)(c-b))(mod 26)</p><p>gcd为欧几里得算法，取最大公约数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h3&gt;&lt;p&gt;cpu中储存需要用到的数值地址之类的名叫寄存器(AX,BX,CX诸如此类)。&lt;/p&gt;
&lt;p&gt;cpu执行命令是按次序进行的通过</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>pythonz3</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/pythonz3/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/pythonz3/</id>
    <published>2023-06-06T04:12:00.685Z</published>
    <updated>2023-06-06T04:12:00.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h1><p>其分为整型(Int)，实型(Real)和向量(BitVec)</p><h2 id="整形-int"><a href="#整形-int" class="headerlink" title="整形(int)"></a>整形(int)</h2><p>不是c中具有上下限的整形而是数学意义上的整数</p><p>创建方式</p><ol><li>Int(name, ctx&#x3D;None)，创建一个整数变量，name是名字</li><li>Ints (names, ctx&#x3D;None)，创建多个整数变量，names是空格分隔名字</li><li>IntVal (val, ctx&#x3D;None)，创建一个整数常量，有初始值，没名字。</li></ol><h2 id="实形-real"><a href="#实形-real" class="headerlink" title="实形(real)"></a>实形(real)</h2><p>是数学意义上的实数</p><p>创建方式</p><ol><li>real(name, ctx&#x3D;None)，创建一个实变量，name是名字</li><li>reals (names, ctx&#x3D;None)，创建多个实变量，names是空格分隔名字</li><li>realVal (val, ctx&#x3D;None)，创建一个实常量，有初始值，没名字。</li></ol><h2 id="向量-BitVec"><a href="#向量-BitVec" class="headerlink" title="向量(BitVec)"></a>向量(BitVec)</h2><p>数学意义上的向量</p><p>创建方式</p><p>Bitvec(name,bv,ctx&#x3D;None)，创建一个位向量，name是他的名字，bv表示大小<br>BitVecs(name,bv,ctx&#x3D;None)，创建一个有多变量的位向量，name是名字，bv表示大小<br>BitVecVal(val,bv,ctx&#x3D;None)，创建一个位向量，有初始值，没名字。</p><h1 id="python3-11下的使用"><a href="#python3-11下的使用" class="headerlink" title="python3.11下的使用"></a>python3.11下的使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line">x=z3.Real(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y=z3.Real(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">z3.solve(x&gt;<span class="number">2</span>,y&lt;<span class="number">10</span>,x+<span class="number">2</span>*y==<span class="number">7</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">[y = <span class="number">0</span>, x = <span class="number">7</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>在python3.11下使用时需使用”.”访问符访问z3</p><p>类似使用z3这个类中的函数以及数据类型</p><h1 id="具体指令"><a href="#具体指令" class="headerlink" title="具体指令"></a>具体指令</h1><ol><li>s&#x3D;solver()，创建一个解的对象。</li><li>s.add(条件)，为解增加一个限制条件</li><li>s.check()，检查解是否存在，如果存在，会返回”sat”</li><li>model()，输出解得结果</li></ol><p>5.<code>solver.assertions()</code>查看求解器已经添加的约束和约束的个数</p><p>在计算时需给变量约束，没有约束是计算不出结果的，同时给了约束才能进行计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本变量类型&quot;&gt;&lt;a href=&quot;#基本变量类型&quot; class=&quot;headerlink&quot; title=&quot;基本变量类型&quot;&gt;&lt;/a&gt;基本变量类型&lt;/h1&gt;&lt;p&gt;其分为整型(Int)，实型(Real)和向量(BitVec)&lt;/p&gt;
&lt;h2 id=&quot;整形-int&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>5.elf</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/5.elf/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/5.elf/</id>
    <published>2023-06-06T04:12:00.684Z</published>
    <updated>2023-06-06T04:12:00.834Z</updated>
    
    <content type="html"><![CDATA[<p>5.elf教会了我需要注意数据的类型与数据的长度，不然也容易犯错误</p><p>关键在于看懂那几个强制类型转化，和运算符的顺序</p><p>其main函数为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-1D0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">84</span>]; <span class="comment">// [rsp+40h] [rbp-190h] BYREF此处为int型4字节一个</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+190h] [rbp-40h]此处为int64，64bit 8字节一个</span></span><br><span class="line">  __int64 v7[<span class="number">3</span>]; <span class="comment">// [rsp+198h] [rbp-38h] BYREF此处为int64 8字节一个</span></span><br><span class="line">  _BYTE v8[<span class="number">15</span>]; <span class="comment">// [rsp+1B0h] [rbp-20h]此处为1字节一个</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+1BFh] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+1C0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+1C4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1C8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1CCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)v8 = <span class="number">0xA718337232343F22</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;v8[<span class="number">7</span>] = <span class="number">0x7A1EC18428F131A7</span>LL;</span><br><span class="line">  v6 = <span class="number">0x1412100D0A070401</span>LL;</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">0x2A2724211F1D1A17</span>LL;</span><br><span class="line">  qmemcpy((<span class="type">char</span> *)v7 + <span class="number">6</span>, <span class="string">&quot;&#x27;*-/147:=@CFILOR&quot;</span>, <span class="number">16</span>);</span><br><span class="line">  qmemcpy(v5, <span class="string">&quot;\n&quot;</span>, <span class="keyword">sizeof</span>(v5));</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;PLZ input&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v10 = *((<span class="type">char</span> *)&amp;v7[<span class="number">-1</span>] + v11 + j);<span class="comment">//v7先用了括号访问符此处指针指向的是v7[0]前8个字节的数据</span></span><br><span class="line">      <span class="keyword">switch</span> ( v5[v10] )<span class="comment">//此处都有强制类型转化但本质是一致的取的是数据的低八位，注意v5是int型占四字节</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          s[i] += LOBYTE(v5[v10 + <span class="number">1</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          s[i] -= LOBYTE(v5[v10 + <span class="number">1</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          s[i] ^= LOBYTE(v5[v10 + <span class="number">1</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">          s[i] *= (<span class="type">unsigned</span> __int8)v5[v10 + <span class="number">1</span>];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">          --s[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">          ++s[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v11 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[i] != v8[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;wrong wrong wrong&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;woc,you got it,flag is your input&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据其加密和数据类型可以通过动态调试获得几个数组的原始数据</p><p>如图v5是四个字节为一段数据（注意高位低位区别）</p><p><img src="E:\note\re\pythonz3\5.elf.assets\image-20230107152013375.png" alt="image-20230107152013375"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">v5=[</span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x0B</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x51</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x24</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x25</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x36</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x41</span>,<span class="number">0x08</span>,<span class="number">0x0C</span>,<span class="number">0x01</span></span><br><span class="line">]<span class="comment">#此处仅有低位有数据可以直接去掉0x00的数据便于访问</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v7=[</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x07</span>,<span class="number">0x0a</span>,<span class="number">0x0d</span>,<span class="number">0x10</span>,<span class="number">0x12</span>,<span class="number">0x14</span>,</span><br><span class="line"><span class="number">0x17</span>,<span class="number">0x1a</span>,<span class="number">0x1d</span>,<span class="number">0x1f</span>,<span class="number">0x21</span>,<span class="number">0x24</span>,<span class="number">0x27</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x2d</span>,<span class="number">0x2f</span>,<span class="number">0x31</span>,<span class="number">0x34</span>,<span class="number">0x37</span>,<span class="number">0x3a</span>,<span class="number">0x3d</span>,</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0x43</span>,<span class="number">0x46</span>,<span class="number">0x49</span>,<span class="number">0x4c</span>,<span class="number">0x4f</span>,<span class="number">0x52</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x18</span>,</span><br><span class="line"><span class="number">0xa7</span>,<span class="number">0x31</span>]<span class="comment">#v7最开始进行的是v7[-1]，因为python的[-1]跟c不同，此处可以直接将其数组前移8字节，在后续访问时可以不用使用v7[-1]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v8=[</span><br><span class="line"><span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x18</span>,<span class="number">0xa7</span>,</span><br><span class="line"><span class="number">0x31</span>,<span class="number">0xf1</span>,<span class="number">0x28</span>,<span class="number">0x84</span>,<span class="number">0xc1</span>,<span class="number">0x1e</span>,<span class="number">0x7a</span>,<span class="number">0x00</span>]<span class="comment">#直接从动态调试中取就行</span></span><br></pre></td></tr></table></figure><p>具体解密如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span>*</span><br><span class="line">v8=[</span><br><span class="line"><span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x18</span>,<span class="number">0xa7</span>,</span><br><span class="line"><span class="number">0x31</span>,<span class="number">0xf1</span>,<span class="number">0x28</span>,<span class="number">0x84</span>,<span class="number">0xc1</span>,<span class="number">0x1e</span>,<span class="number">0x7a</span>,<span class="number">0x00</span>]</span><br><span class="line">v7=[</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x07</span>,<span class="number">0x0a</span>,<span class="number">0x0d</span>,<span class="number">0x10</span>,<span class="number">0x12</span>,<span class="number">0x14</span>,</span><br><span class="line"><span class="number">0x17</span>,<span class="number">0x1a</span>,<span class="number">0x1d</span>,<span class="number">0x1f</span>,<span class="number">0x21</span>,<span class="number">0x24</span>,<span class="number">0x27</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x2d</span>,<span class="number">0x2f</span>,<span class="number">0x31</span>,<span class="number">0x34</span>,<span class="number">0x37</span>,<span class="number">0x3a</span>,<span class="number">0x3d</span>,</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0x43</span>,<span class="number">0x46</span>,<span class="number">0x49</span>,<span class="number">0x4c</span>,<span class="number">0x4f</span>,<span class="number">0x52</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x18</span>,</span><br><span class="line"><span class="number">0xa7</span>,<span class="number">0x31</span>]</span><br><span class="line">v5=[</span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x0B</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x51</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x24</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x25</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x36</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x41</span>,<span class="number">0x08</span>,<span class="number">0x0C</span>,<span class="number">0x01</span></span><br><span class="line">]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">out=[<span class="number">0</span>]*<span class="number">15</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    out[i]=flag[i]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line">v11=<span class="number">0</span></span><br><span class="line">v10=<span class="number">0</span></span><br><span class="line">v9=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        v10=v7[v11+j]</span><br><span class="line">        <span class="keyword">match</span> v5[v10]:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                out[i]=out[i]+v5[v10+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                out[i]=out[i]-v5[v10+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                out[i]=out[i]^v5[v10+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                out[i]=out[i]*v5[v10+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                out[i]-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                out[i]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">case</span> _:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    v11+=<span class="number">2</span></span><br><span class="line">f=Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    f.add(out[i]==v8[i])</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br></pre></td></tr></table></figure><p>解出来有两个解，依次输入其中试试</p><p><img src="E:\note\re\pythonz3\5.elf.assets\image-20230107152449512.png" alt="image-20230107152449512"></p><p><img src="E:\note\re\pythonz3\5.elf.assets\image-20230107152515596.png" alt="image-20230107152515596"></p><p><img src="E:\note\re\pythonz3\5.elf.assets\image-20230107152705325.png" alt="image-20230107152705325"></p><p>上一个为正确的解：757515121f3d478</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;5.elf教会了我需要注意数据的类型与数据的长度，不然也容易犯错误&lt;/p&gt;
&lt;p&gt;关键在于看懂那几个强制类型转化，和运算符的顺序&lt;/p&gt;
&lt;p&gt;其main函数为&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>4.elf</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/4.elf/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/4.elf/</id>
    <published>2023-06-06T04:12:00.661Z</published>
    <updated>2023-06-06T04:12:00.833Z</updated>
    
    <content type="html"><![CDATA[<p>装好了ubuntu</p><p>它的glibc版本够用</p><p>通过动态调试找到了其存储数据的正确顺序</p><p><img src="E:\note\re\pythonz3\4.elf.assets\image-20230106230217327.png" alt="image-20230106230217327"></p><p>先依次输入数组中存起来备用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v3 == v9 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)s[i] &gt; <span class="number">0x60</span>u &amp;&amp; (<span class="type">unsigned</span> __int8)s[i] &lt;= <span class="number">0x7A</span>u )</span><br><span class="line">        s[i] = (s[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)s[i] &gt; <span class="number">0x40</span>u &amp;&amp; (<span class="type">unsigned</span> __int8)s[i] &lt;= <span class="number">0x5A</span>u )</span><br><span class="line">        s[i] = (s[i] ^ <span class="number">0x4B</span>) - <span class="number">1</span>;</span><br><span class="line">      v6[<span class="number">2</span> * i] = (<span class="type">unsigned</span> __int8)s[i] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">      v6[<span class="number">2</span> * i + <span class="number">1</span>] = s[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据其加密方式需要判断输入的字符的大小，z3无法检验flag具体的大小来建模</p><p>所以可以设立多种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out1[i]=(flag[i]^<span class="number">0x47</span>)+<span class="number">1</span><span class="comment">#只经过前一次异或</span></span><br><span class="line">out2[i]=(flag[i]^<span class="number">0x4B</span>)-<span class="number">1</span><span class="comment">#只经过后一次异或</span></span><br><span class="line">out3[i]=(((flag[i]^<span class="number">0x47</span>)+<span class="number">1</span>)^<span class="number">0x4b</span>)-<span class="number">1</span><span class="comment">#两次异或都经过</span></span><br><span class="line">out4[i]=flag[i]<span class="comment">#未经过异或</span></span><br></pre></td></tr></table></figure><p>所以约束条件可为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(((a[<span class="number">2</span>*i]==v61[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v61[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))<span class="keyword">or</span>((a[<span class="number">2</span>*i]==v62[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v62[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))<span class="keyword">or</span>((a[<span class="number">2</span>*i]==v63[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v63[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))<span class="keyword">or</span>((a[<span class="number">2</span>*i]==v64[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v64[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])))</span><br></pre></td></tr></table></figure><p>整体求解如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a=[</span><br><span class="line"><span class="number">0X07</span>,<span class="number">0X0D</span>,<span class="number">0X00</span>,<span class="number">0X05</span>,<span class="number">0X01</span>,<span class="number">0X0C</span>,<span class="number">0X01</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0D</span>,<span class="number">0X05</span>,<span class="number">0X0F</span>,<span class="number">0X00</span>,<span class="number">0X09</span>,</span><br><span class="line"><span class="number">0X05</span>,<span class="number">0X0F</span>,<span class="number">0X03</span>,<span class="number">0X00</span>,<span class="number">0X02</span>,<span class="number">0X05</span>,<span class="number">0X03</span>,</span><br><span class="line"><span class="number">0X03</span>,<span class="number">0X01</span>,<span class="number">0X07</span>,<span class="number">0X07</span>,<span class="number">0X0B</span>,<span class="number">0X02</span>,<span class="number">0X01</span>,</span><br><span class="line"><span class="number">0X02</span>,<span class="number">0X07</span>,<span class="number">0X02</span>,<span class="number">0X0C</span>,<span class="number">0X02</span>,<span class="number">0X02</span>,<span class="number">0X00</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)]</span><br><span class="line">out1=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">out2=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">out3=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">out4=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">v61=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v62=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v63=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v64=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v0=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    out1[i]=(flag[i]^<span class="number">0x47</span>)+<span class="number">1</span></span><br><span class="line">    out2[i]=(flag[i]^<span class="number">0x4B</span>)-<span class="number">1</span></span><br><span class="line">    out3[i]=(((flag[i]^<span class="number">0x47</span>)+<span class="number">1</span>)^<span class="number">0x4b</span>)-<span class="number">1</span></span><br><span class="line">    out4[i]=flag[i]</span><br><span class="line">    v61[<span class="number">2</span>*i]=out1[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v61[<span class="number">2</span>*i+<span class="number">1</span>]=out1[i]&amp;<span class="number">0xF</span></span><br><span class="line">    v62[<span class="number">2</span>*i]=out2[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v62[<span class="number">2</span>*i+<span class="number">1</span>]=out2[i]&amp;<span class="number">0xF</span></span><br><span class="line">    v63[<span class="number">2</span>*i]=out3[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v63[<span class="number">2</span>*i+<span class="number">1</span>]=out3[i]&amp;<span class="number">0xF</span></span><br><span class="line">    v64[<span class="number">2</span>*i]=out4[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v64[<span class="number">2</span>*i+<span class="number">1</span>]=out4[i]&amp;<span class="number">0xF</span></span><br><span class="line">f=Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    f.add(((a[<span class="number">2</span>*i]==v61[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v61[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))<span class="keyword">or</span>((a[<span class="number">2</span>*i]==v62[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v62[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))<span class="keyword">or</span>((a[<span class="number">2</span>*i]==v63[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v63[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))<span class="keyword">or</span>((a[<span class="number">2</span>*i]==v64[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])<span class="keyword">and</span>(a[<span class="number">2</span>*i+<span class="number">1</span>]==v64[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])))</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br></pre></td></tr></table></figure><p>上述代码是有解的,但增加约束条件时会抽风</p><p>因为不知道具体flag格式，无法具体限制其条件只能限制末尾是’}’之类的，但输入条件时就会报错</p><p>未输入其他条件就会有非常多的解下图只是一部分</p><p><img src="E:\note\re\pythonz3\4.elf.assets\image-20230106231208987.png" alt="image-20230106231208987"></p><p>只不过不知道z3中的And，Or是否效果跟原来的逻辑符and，or是否等效</p><p>但在我使用下列求解时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a=[</span><br><span class="line"><span class="number">0X07</span>,<span class="number">0X0D</span>,<span class="number">0X00</span>,<span class="number">0X05</span>,<span class="number">0X01</span>,<span class="number">0X0C</span>,<span class="number">0X01</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0D</span>,<span class="number">0X05</span>,<span class="number">0X0F</span>,<span class="number">0X00</span>,<span class="number">0X09</span>,</span><br><span class="line"><span class="number">0X05</span>,<span class="number">0X0F</span>,<span class="number">0X03</span>,<span class="number">0X00</span>,<span class="number">0X02</span>,<span class="number">0X05</span>,<span class="number">0X03</span>,</span><br><span class="line"><span class="number">0X03</span>,<span class="number">0X01</span>,<span class="number">0X07</span>,<span class="number">0X07</span>,<span class="number">0X0B</span>,<span class="number">0X02</span>,<span class="number">0X01</span>,</span><br><span class="line"><span class="number">0X02</span>,<span class="number">0X07</span>,<span class="number">0X02</span>,<span class="number">0X0C</span>,<span class="number">0X02</span>,<span class="number">0X02</span>,<span class="number">0X00</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)]</span><br><span class="line">out1=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">out2=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">out3=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">out4=[<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">v61=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v62=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v63=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v64=[<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line">v0=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    out1[i]=(flag[i]^<span class="number">0x47</span>)+<span class="number">1</span></span><br><span class="line">    out2[i]=(flag[i]^<span class="number">0x4B</span>)-<span class="number">1</span></span><br><span class="line">    out3[i]=(((flag[i]^<span class="number">0x47</span>)+<span class="number">1</span>)^<span class="number">0x4b</span>)-<span class="number">1</span></span><br><span class="line">    out4[i]=flag[i]</span><br><span class="line">    v61[<span class="number">2</span>*i]=out1[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v61[<span class="number">2</span>*i+<span class="number">1</span>]=out1[i]&amp;<span class="number">0xF</span></span><br><span class="line">    v62[<span class="number">2</span>*i]=out2[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v62[<span class="number">2</span>*i+<span class="number">1</span>]=out2[i]&amp;<span class="number">0xF</span></span><br><span class="line">    v63[<span class="number">2</span>*i]=out3[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v63[<span class="number">2</span>*i+<span class="number">1</span>]=out3[i]&amp;<span class="number">0xF</span></span><br><span class="line">    v64[<span class="number">2</span>*i]=out4[i]&gt;&gt;<span class="number">4</span></span><br><span class="line">    v64[<span class="number">2</span>*i+<span class="number">1</span>]=out4[i]&amp;<span class="number">0xF</span></span><br><span class="line">f=Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    f.add(Or(And((a[<span class="number">2</span>*i]==v61[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]),(a[<span class="number">2</span>*i+<span class="number">1</span>]==v61[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])),And((a[<span class="number">2</span>*i]==v62[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]),(a[<span class="number">2</span>*i+<span class="number">1</span>]==v62[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])),And((a[<span class="number">2</span>*i]==v63[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]),(a[<span class="number">2</span>*i+<span class="number">1</span>]==v63[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>])),And((a[<span class="number">2</span>*i]==v64[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]),(a[<span class="number">2</span>*i+<span class="number">1</span>]==v64[<span class="number">2</span>*(<span class="number">17</span>-i)-<span class="number">2</span>]))))</span><br><span class="line"><span class="keyword">if</span> f.check()==sat:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><p>其输出的是无解</p><p><img src="E:\note\re\pythonz3\4.elf.assets\image-20230106231121538.png" alt="image-20230106231121538"></p><p>非常奇特</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;装好了ubuntu&lt;/p&gt;
&lt;p&gt;它的glibc版本够用&lt;/p&gt;
&lt;p&gt;通过动态调试找到了其存储数据的正确顺序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;E:&#92;note&#92;re&#92;pythonz3&#92;4.elf.assets&#92;image-20230106230217327.png&quot; al</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>3.elf</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/3.elf/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/3.elf/</id>
    <published>2023-06-06T04:12:00.643Z</published>
    <updated>2023-06-06T04:12:00.832Z</updated>
    
    <content type="html"><![CDATA[<p>尝试对3.elf进行动态调试</p><p><img src="E:\note\re\pythonz3\3.elf.assets\image-20230104222906904.png" alt="image-20230104222906904"></p><p>寄，我的glibc库版本低了</p><p><img src="E:\note\re\pythonz3\3.elf.assets\image-20230104223251675.png" alt="image-20230104223251675"></p><p>但根据2.elf的经验，其存储顺序应该是按上到下的顺序存储的，从低位到高位存储的</p><p>同时这个每两位就代表了一个字符刚好就有42个字符符合校验的字符个数</p><p>所以z3破解代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *    </span><br><span class="line">DataCmp=[</span><br><span class="line"><span class="number">0x66</span>,<span class="number">0x4E</span>,<span class="number">0XA9</span>,<span class="number">0XFD</span>,<span class="number">0X3C</span>,<span class="number">0X55</span>,<span class="number">0X90</span>,<span class="number">0X24</span>,</span><br><span class="line"><span class="number">0X57</span>,<span class="number">0XF6</span>,<span class="number">0X5D</span>,<span class="number">0XB1</span>,<span class="number">0X01</span>,<span class="number">0X20</span>,<span class="number">0X81</span>,<span class="number">0XFD</span>,</span><br><span class="line"><span class="number">0X36</span>,<span class="number">0XA9</span>,<span class="number">0X1F</span>,<span class="number">0XA1</span>,<span class="number">0X0E</span>,<span class="number">0X0D</span>,<span class="number">0X80</span>,<span class="number">0X8F</span>,</span><br><span class="line"><span class="number">0XCE</span>,<span class="number">0X77</span>,</span><br><span class="line"><span class="number">0XE8</span>,<span class="number">0X23</span>,<span class="number">0X9E</span>,<span class="number">0X27</span>,<span class="number">0X60</span>,<span class="number">0X2F</span>,<span class="number">0XA5</span>,<span class="number">0XCF</span>,</span><br><span class="line"><span class="number">0X1B</span>,<span class="number">0XBD</span>,<span class="number">0X32</span>,<span class="number">0XDB</span>,<span class="number">0XFF</span>,<span class="number">0X28</span>,<span class="number">0XA4</span>,<span class="number">0X5D</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>)]  <span class="comment">#初始化序列</span></span><br><span class="line">out=[<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    out[i]=flag[i]</span><br><span class="line">v11 = <span class="number">0</span></span><br><span class="line">v10 = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">v9 = <span class="number">0</span> </span><br><span class="line">v1 =<span class="number">0</span> </span><br><span class="line">f = Solver()<span class="comment">#创建约束求解器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        v9=<span class="number">6</span>*i+j</span><br><span class="line">        v11=flag[v9]</span><br><span class="line">        v10=flag[v9]</span><br><span class="line">        v11 = ~v11</span><br><span class="line">        v11 &amp;= i * (j + <span class="number">2</span>)</span><br><span class="line">        v10 = v10 &amp; ~(i * (j + <span class="number">2</span>)) | v11</span><br><span class="line">        v9 = <span class="number">7</span> * j + i</span><br><span class="line">        out[v9] = v10</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        out[i+<span class="number">1</span>]*=<span class="number">107</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out[i+<span class="number">1</span>]+=out[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    f.add(out[i]==DataCmp[i])</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br></pre></td></tr></table></figure><p>求出其flag为</p><p>flag{wh03v3r_d1g5_1n70_17_f1nd5_7h3_7ru7h}</p><p>我逐渐知道z3的好用了 欸嘿嘿嘿嘿嘿嘿嘿</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;尝试对3.elf进行动态调试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;E:&#92;note&#92;re&#92;pythonz3&#92;3.elf.assets&#92;image-20230104222906904.png&quot; alt=&quot;image-20230104222906904&quot;&gt;&lt;/p&gt;
&lt;p&gt;寄，我的g</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>2.elf z3暴力破解</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/2.elf%20z3%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/2.elf%20z3%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</id>
    <published>2023-06-06T04:12:00.630Z</published>
    <updated>2023-06-06T04:12:00.828Z</updated>
    
    <content type="html"><![CDATA[<p>通过进行动态调试发现确实</p><p>![image-20230104221103045](E:\note\re\pythonz3\2.elf z3暴力破解.assets\image-20230104221103045.png)</p><p>此处是进行校验的字符串</p><p>但是开始我所理解的顺序不是从左到右而是从低位到高位如图</p><p>![image-20230104221209637](E:\note\re\pythonz3\2.elf z3暴力破解.assets\image-20230104221209637.png)</p><p>0x04,0x46,0x81,0x63……正是v4从低位到高位的顺序排列的，我又犯了些低级错误。。。。。</p><p>所以此处通过z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a=[<span class="number">0x4</span>,<span class="number">0x46</span>,<span class="number">0x81</span>,<span class="number">0x63</span>,<span class="number">0x14</span>,</span><br><span class="line"><span class="number">0x53</span>,<span class="number">0x17</span>,<span class="number">0x6d</span>,<span class="number">0x6a</span>,<span class="number">0x67</span>,<span class="number">0x76</span>,<span class="number">0x16</span>,<span class="number">0x34</span>,<span class="number">0x14</span>,</span><br><span class="line"><span class="number">0x34</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">out=[<span class="number">0</span>]*<span class="number">14</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    out[i]=flag[i]</span><br><span class="line">v0=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        out[i]^=i^j^<span class="number">0x32</span></span><br><span class="line">        out[i]+=v0</span><br><span class="line">        v0+=<span class="number">1</span></span><br><span class="line">f=Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    f.add(out[i]==a[i])</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br></pre></td></tr></table></figure><p>找到了对应的flag（也许？）</p><p>![image-20230104221401911](E:\note\re\pythonz3\2.elf z3暴力破解.assets\image-20230104221401911.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过进行动态调试发现确实&lt;/p&gt;
&lt;p&gt;![image-20230104221103045](E:&#92;note&#92;re&#92;pythonz3&#92;2.elf z3暴力破解.assets&#92;image-20230104221103045.png)&lt;/p&gt;
&lt;p&gt;此处是进行校验的字符串&lt;/p</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>1.elf</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/1.elf/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/1.elf/</id>
    <published>2023-06-06T04:12:00.613Z</published>
    <updated>2023-06-06T04:12:00.828Z</updated>
    
    <content type="html"><![CDATA[<p>其加密的过程是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">-85</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">39</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">50</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 ^= j ^ v2 ^ <span class="number">0x5F</span>;</span><br><span class="line">      s[i] ^= s[(i + <span class="number">1</span>) % <span class="number">40</span>];</span><br><span class="line">      s[i] ^= v1;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以直接找到它加密后的字符串</p><p><img src="E:\note\re\1.elf.assets\image-20221228142654979.png" alt="image-20221228142654979"></p><p>可以直接根据加密算法逆推答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s[] = &#123; 161, 186, 110, 70, 128, 244, 217, 170, 180, 54, 90,</span><br><span class="line">   204, 140, 30, 149, 33, 143, 67, 225, 19, 138, 168, 106,</span><br><span class="line">   66, 174, 251, 247, 165, 157, 11, 75, 222, 186, 0, 135,</span><br><span class="line">   35, 144, 70, 211, 223,&#x27;\0&#x27;&#125;;//需补充&#x27;\0&#x27;作为字符串结尾（后续解密不需修改）</span><br><span class="line">    char v1 = -85;</span><br><span class="line">    int v2 = 0;</span><br><span class="line">    v1 = -85;</span><br><span class="line">    v2 = 0;</span><br><span class="line">    int i, j;</span><br><span class="line">   for (i = 0; i &lt;= 39; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        for (j = 0; j &lt;= 50; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            v1 ^= j ^ v2 ^ 0x5F;</span><br><span class="line">            ++v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;//加密时是从前往后加密，则解密需要从后往前解密，需要求出最后的v1对应的值才能做解密运算</span><br><span class="line">    for (i = 39; i &gt;= 0; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        for (j = 50; j &gt;= 0; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            --v2;</span><br><span class="line">            s[i] ^= v1;</span><br><span class="line">            s[i] ^= s[(i + 1) % 40];</span><br><span class="line">            v1 ^= j ^ v2 ^ 0x5F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;//将后面的加密顺序调转（包括指令如加密中最后的++v2变为最上方的--v2，异或运算不用变化，只需跟随加密顺序再将顺序逆转就可进行解密运算了</span><br><span class="line">    puts((char *)s);//以字符串输出</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解出答案就是SYC{bIIngxvJqVDOUqbuiHDpadwfdRePetteyBP}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=Solver()</span><br><span class="line">print(f.model)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其加密的过程是&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
  <entry>
    <title>1.elf z3暴力破解·改</title>
    <link href="http://example.com/2023/06/06/re/pythonz3/1.elf%20z3%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%C2%B7%E6%94%B9/"/>
    <id>http://example.com/2023/06/06/re/pythonz3/1.elf%20z3%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%C2%B7%E6%94%B9/</id>
    <published>2023-06-06T04:12:00.608Z</published>
    <updated>2023-06-06T04:12:00.827Z</updated>
    
    <content type="html"><![CDATA[<p>可通过如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;前面需要输入条件&quot;</span></span><br><span class="line">f=Solver()</span><br><span class="line"><span class="built_in">print</span>(f.model)</span><br></pre></td></tr></table></figure><p>可以查找自己所输入的条件<br>通过对z3的检验发现自己出现了个python的低级常识性错误<br>for循环时range输出的可遍历对象实际是小于该对象的<br>如range(10)其应该是&lt;10<br>所以经过对遍历对象的修改<br>真正的z3代码应该如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *    </span><br><span class="line">DataCmp=[</span><br><span class="line"><span class="number">161</span>, <span class="number">186</span>, <span class="number">110</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">244</span>, <span class="number">217</span>, <span class="number">170</span>, <span class="number">180</span>, <span class="number">54</span>, <span class="number">90</span>,</span><br><span class="line">   <span class="number">204</span>, <span class="number">140</span>, <span class="number">30</span>, <span class="number">149</span>, <span class="number">33</span>, <span class="number">143</span>, <span class="number">67</span>, <span class="number">225</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">168</span>, <span class="number">106</span>,</span><br><span class="line">   <span class="number">66</span>, <span class="number">174</span>, <span class="number">251</span>, <span class="number">247</span>, <span class="number">165</span>, <span class="number">157</span>, <span class="number">11</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">186</span>, <span class="number">0</span>, <span class="number">135</span>,</span><br><span class="line">   <span class="number">35</span>, <span class="number">144</span>, <span class="number">70</span>, <span class="number">211</span>, <span class="number">223</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag[%2d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]  <span class="comment">#初始化序列</span></span><br><span class="line">out=[<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    out[i]=flag[i]</span><br><span class="line">v1=-<span class="number">85</span></span><br><span class="line">v2=<span class="number">0</span>     <span class="comment">#创建约束求解器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>):</span><br><span class="line">        v1^=j^v2^<span class="number">0x5f</span></span><br><span class="line">        out[i]^=flag[(i+<span class="number">1</span>)%<span class="number">40</span>]</span><br><span class="line">        out[i]^=v1</span><br><span class="line">        v2+=<span class="number">1</span></span><br><span class="line">f = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    f.add(out[i]==DataCmp[i])</span><br><span class="line"><span class="keyword">while</span>(f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        p+=<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        condition.append(flag[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>![image-20230104220414343](E:\note\re\pythonz3\1.elf z3暴力破解·改.assets\image-20230104220414343.png)</p><p>在输出结果内找到了对应的正确的flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可通过如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    <category term="re" scheme="http://example.com/categories/re/"/>
    
    <category term="pythonz3" scheme="http://example.com/categories/re/pythonz3/"/>
    
    
  </entry>
  
</feed>
